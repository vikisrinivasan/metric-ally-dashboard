{"version":3,"file":"chart.component.js","sources":["chart.component.js"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAOM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;oBAAM;AACN;AACA;AACA;AACA","sourcesContent":["\"use strict\";\nvar core_1 = require('@angular/core');\nvar ChartComponent = (function () {\n    function ChartComponent(elementRef, ngZone) {\n        this.elementRef = elementRef;\n        this.ngZone = ngZone;\n        this.clickCanvas = new core_1.EventEmitter();\n        this.clickDataset = new core_1.EventEmitter();\n        this.clickElements = new core_1.EventEmitter();\n        this.clickElement = new core_1.EventEmitter();\n    }\n    ChartComponent.prototype.ngOnInit = function () {\n        this.create();\n    };\n    ChartComponent.prototype.ngOnChanges = function (changes) {\n        var _this = this;\n        if (this.chart) {\n            if (changes['type'] || changes['options']) {\n                this.create();\n            }\n            else if (changes['data']) {\n                var currentValue_1 = changes['data'].currentValue;\n                ['datasets', 'labels', 'xLabels', 'yLabels'].forEach(function (property) {\n                    _this.chart.data[property] = currentValue_1[property];\n                });\n                this.chart.update();\n            }\n        }\n    };\n    ChartComponent.prototype.create = function () {\n        var _this = this;\n        this.ngZone.runOutsideAngular(function () {\n            if (_this.canvas) {\n                _this.elementRef.nativeElement.removeChild(_this.canvas);\n            }\n            _this.canvas = document.createElement('canvas');\n            _this.elementRef.nativeElement.appendChild(_this.canvas);\n            _this.chart = new Chart(_this.canvas, {\n                type: _this.type,\n                data: _this.data,\n                options: _this.options\n            });\n            _this.canvas.onclick = function (e) {\n                _this.ngZone.run(function () {\n                    _this.clickCanvas.next(e);\n                    if (_this.clickDataset.observers.length) {\n                        _this.clickDataset.next(_this.chart.getDatasetAtEvent(e));\n                    }\n                    if (_this.clickElements.observers.length) {\n                        _this.clickElements.next(_this.chart.getElementsAtEvent(e));\n                    }\n                    if (_this.clickElement.observers.length) {\n                        _this.clickElement.next(_this.chart.getElementAtEvent(e));\n                    }\n                });\n            };\n        });\n    };\n    ChartComponent.decorators = [\n        { type: core_1.Component, args: [{\n                    selector: 'chart',\n                    template: '',\n                    styles: [':host { display: block; }']\n                },] },\n    ];\n    ChartComponent.ctorParameters = function () { return [\n        { type: core_1.ElementRef, },\n        { type: core_1.NgZone, },\n    ]; };\n    ChartComponent.propDecorators = {\n        'type': [{ type: core_1.Input },],\n        'data': [{ type: core_1.Input },],\n        'options': [{ type: core_1.Input },],\n        'clickCanvas': [{ type: core_1.Output },],\n        'clickDataset': [{ type: core_1.Output },],\n        'clickElements': [{ type: core_1.Output },],\n        'clickElement': [{ type: core_1.Output },],\n    };\n    return ChartComponent;\n}());\nexports.ChartComponent = ChartComponent;\n"]}