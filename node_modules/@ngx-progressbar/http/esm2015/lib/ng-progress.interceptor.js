/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional, Inject } from '@angular/core';
import { finalize } from 'rxjs/operators';
import { NgProgress } from '@ngx-progressbar/core';
import { NG_PROGRESS_HTTP_CONFIG } from './ng-progress-http.interface';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngx-progressbar/core';
export class NgProgressInterceptor {
    /**
     * @param {?} ngProgress
     * @param {?=} config
     */
    constructor(ngProgress, config) {
        this._inProgressCount = 0;
        this._config = {
            id: 'root',
            silentApis: []
        };
        this._config = config ? Object.assign({}, this._config, config) : this._config;
        this._progressRef = ngProgress.ref(this._config.id);
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    intercept(req, next) {
        // Ignore by request headers
        if (req.headers.has('ignoreProgressBar')) {
            return next.handle(req.clone({ headers: req.headers.delete('ignoreProgressBar') }));
        }
        // Ignore silent api requests
        if (this.checkUrl(req)) {
            return next.handle(req);
        }
        this._inProgressCount++;
        if (!this._progressRef.isStarted) {
            this._progressRef.start();
        }
        return next.handle(req).pipe(finalize((/**
         * @return {?}
         */
        () => {
            this._inProgressCount--;
            if (this._inProgressCount === 0) {
                this._progressRef.complete();
            }
        })));
    }
    /**
     * Check if request is silent.
     * @private
     * @param {?} req request
     * @return {?}
     */
    checkUrl(req) {
        /** @type {?} */
        const url = req.url.toLowerCase();
        /** @type {?} */
        const found = this._config.silentApis.find((/**
         * @param {?} u
         * @return {?}
         */
        (u) => url.startsWith(u)));
        return !!found;
    }
}
NgProgressInterceptor.ɵfac = function NgProgressInterceptor_Factory(t) { return new (t || NgProgressInterceptor)(ɵngcc0.ɵɵinject(ɵngcc1.NgProgress), ɵngcc0.ɵɵinject(NG_PROGRESS_HTTP_CONFIG, 8)); };
NgProgressInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgProgressInterceptor, factory: NgProgressInterceptor.ɵfac });
/** @nocollapse */
NgProgressInterceptor.ctorParameters = () => [
    { type: NgProgress },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_PROGRESS_HTTP_CONFIG,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgProgressInterceptor, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.NgProgress }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [NG_PROGRESS_HTTP_CONFIG]
            }] }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgProgressInterceptor.prototype._inProgressCount;
    /**
     * @type {?}
     * @private
     */
    NgProgressInterceptor.prototype._progressRef;
    /**
     * @type {?}
     * @private
     */
    NgProgressInterceptor.prototype._config;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcHJvZ3Jlc3MuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VzIjpbIkBuZ3gtcHJvZ3Jlc3NiYXIvaHR0cC9saWIvbmctcHJvZ3Jlc3MuaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUc3RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUMsT0FBTyxFQUFFLFVBQVUsRUFBaUIsTUFBTSx1QkFBdUIsQ0FBQztBQUNsRSxPQUFPLEVBQXdCLHVCQUF1QixFQUFFLE1BQU0sOEJBQThCLENBQUM7OztBQUc3RixNQUFNLE9BQU8scUJBQXFCO0FBQUc7QUFBUTtBQUVwQztBQUNOO0FBQVEsSUFNVCxZQUFZLFVBQXNCLEVBQStDLE1BQTZCO0FBQ2hILFFBUlUscUJBQWdCLEdBQUcsQ0FBQyxDQUFDO0FBQy9CLFFBQ21CLFlBQU8sR0FBeUI7QUFDbkQsWUFBSSxFQUFFLEVBQUUsTUFBTTtBQUNkLFlBQUksVUFBVSxFQUFFLEVBQUU7QUFDbEIsU0FBRyxDQUFDO0FBQ0osUUFFSSxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxDQUFDLG1CQUFLLElBQUksQ0FBQyxPQUFPLEVBQUssTUFBTSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBQ3hFLFFBQUksSUFBSSxDQUFDLFlBQVksR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDeEQsSUFBRSxDQUFDO0FBQ0g7QUFDTztBQUFzQjtBQUF1QjtBQUFtQjtBQUFRLElBQTdFLFNBQVMsQ0FBQyxHQUFxQixFQUFFLElBQWlCO0FBQUksUUFFcEQsNEJBQTRCO0FBQ2hDLFFBQUksSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFO0FB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QUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQU1BLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFuREEsQUFBQSxBQUhBLEFBQUEsQUFhQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFQQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBR0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBJbnRlcmNlcHRvciwgSHR0cEV2ZW50LCBIdHRwSGFuZGxlciwgSHR0cFJlcXVlc3QgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZmluYWxpemUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IE5nUHJvZ3Jlc3MsIE5nUHJvZ3Jlc3NSZWYgfSBmcm9tICdAbmd4LXByb2dyZXNzYmFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOZ1Byb2dyZXNzSHR0cENvbmZpZywgTkdfUFJPR1JFU1NfSFRUUF9DT05GSUcgfSBmcm9tICcuL25nLXByb2dyZXNzLWh0dHAuaW50ZXJmYWNlJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIE5nUHJvZ3Jlc3NJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XHJcblxyXG4gIHByaXZhdGUgX2luUHJvZ3Jlc3NDb3VudCA9IDA7XHJcbiAgcHJpdmF0ZSBfcHJvZ3Jlc3NSZWY6IE5nUHJvZ3Jlc3NSZWY7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBfY29uZmlnOiBOZ1Byb2dyZXNzSHR0cENvbmZpZyA9IHtcclxuICAgIGlkOiAncm9vdCcsXHJcbiAgICBzaWxlbnRBcGlzOiBbXVxyXG4gIH07XHJcblxyXG4gIGNvbnN0cnVjdG9yKG5nUHJvZ3Jlc3M6IE5nUHJvZ3Jlc3MsIEBPcHRpb25hbCgpIEBJbmplY3QoTkdfUFJPR1JFU1NfSFRUUF9DT05GSUcpIGNvbmZpZz86IE5nUHJvZ3Jlc3NIdHRwQ29uZmlnKSB7XHJcbiAgICB0aGlzLl9jb25maWcgPSBjb25maWcgPyB7Li4udGhpcy5fY29uZmlnLCAuLi5jb25maWd9IDogdGhpcy5fY29uZmlnO1xyXG4gICAgdGhpcy5fcHJvZ3Jlc3NSZWYgPSBuZ1Byb2dyZXNzLnJlZih0aGlzLl9jb25maWcuaWQpO1xyXG4gIH1cclxuXHJcbiAgaW50ZXJjZXB0KHJlcTogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XHJcblxyXG4gICAgLy8gSWdub3JlIGJ5IHJlcXVlc3QgaGVhZGVyc1xyXG4gICAgaWYgKHJlcS5oZWFkZXJzLmhhcygnaWdub3JlUHJvZ3Jlc3NCYXInKSkge1xyXG4gICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxLmNsb25lKHtoZWFkZXJzOiByZXEuaGVhZGVycy5kZWxldGUoJ2lnbm9yZVByb2dyZXNzQmFyJyl9KSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSWdub3JlIHNpbGVudCBhcGkgcmVxdWVzdHNcclxuICAgIGlmICh0aGlzLmNoZWNrVXJsKHJlcSkpIHtcclxuICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5faW5Qcm9ncmVzc0NvdW50Kys7XHJcblxyXG4gICAgaWYgKCF0aGlzLl9wcm9ncmVzc1JlZi5pc1N0YXJ0ZWQpIHtcclxuICAgICAgdGhpcy5fcHJvZ3Jlc3NSZWYuc3RhcnQoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKS5waXBlKFxyXG4gICAgICBmaW5hbGl6ZSgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5faW5Qcm9ncmVzc0NvdW50LS07XHJcbiAgICAgICAgaWYgKHRoaXMuX2luUHJvZ3Jlc3NDb3VudCA9PT0gMCkge1xyXG4gICAgICAgICAgdGhpcy5fcHJvZ3Jlc3NSZWYuY29tcGxldGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hlY2sgaWYgcmVxdWVzdCBpcyBzaWxlbnQuXHJcbiAgICogQHBhcmFtIHJlcSByZXF1ZXN0XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBjaGVja1VybChyZXE6IEh0dHBSZXF1ZXN0PGFueT4pIHtcclxuICAgIGNvbnN0IHVybCA9IHJlcS51cmwudG9Mb3dlckNhc2UoKTtcclxuICAgIGNvbnN0IGZvdW5kID0gdGhpcy5fY29uZmlnLnNpbGVudEFwaXMuZmluZCgodSkgPT4gdXJsLnN0YXJ0c1dpdGgodSkpO1xyXG4gICAgcmV0dXJuICEhZm91bmQ7XHJcbiAgfVxyXG59XHJcbiJdfQ==