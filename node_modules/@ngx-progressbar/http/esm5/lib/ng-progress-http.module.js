/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { NgProgressInterceptor } from './ng-progress.interceptor';
import { NG_PROGRESS_HTTP_CONFIG } from './ng-progress-http.interface';
import * as ɵngcc0 from '@angular/core';
var NgProgressHttpModule = /** @class */ (function () {
    function NgProgressHttpModule() {
    }
    /**
     * @param {?} config
     * @return {?}
     */
    NgProgressHttpModule.withConfig = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: NgProgressHttpModule,
            providers: [
                { provide: NG_PROGRESS_HTTP_CONFIG, useValue: config }
            ]
        };
    };
NgProgressHttpModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgProgressHttpModule });
NgProgressHttpModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgProgressHttpModule_Factory(t) { return new (t || NgProgressHttpModule)(); }, providers: [
        { provide: HTTP_INTERCEPTORS, useClass: NgProgressInterceptor, multi: true }
    ] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgProgressHttpModule, [{
        type: NgModule,
        args: [{
                providers: [
                    { provide: HTTP_INTERCEPTORS, useClass: NgProgressInterceptor, multi: true }
                ]
            }]
    }], function () { return []; }, null); })();
    return NgProgressHttpModule;
}());
export { NgProgressHttpModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcHJvZ3Jlc3MtaHR0cC5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIkBuZ3gtcHJvZ3Jlc3NiYXIvaHR0cC9saWIvbmctcHJvZ3Jlc3MtaHR0cC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQXVCLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xFLE9BQU8sRUFBd0IsdUJBQXVCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7QUFFN0Y7QUFFNkIsSUFGN0I7QUFFTyxJQVlQLENBQUM7QUFDRDtBQUFRO0FBQXlCO0FBQW1CO0FBQVEsSUFUbkQsK0JBQVU7QUFBTztBQUF5QjtBQUFtQjtBQUNqRSxJQURILFVBQWtCLE1BQTRCO0FBQUksUUFDaEQsT0FBTztBQUNYLFlBQU0sUUFBUSxFQUFFLG9CQUFvQjtBQUNwQyxZQUFNLFNBQVMsRUFBRTtBQUNqQixnQkFBUSxFQUFFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO0FBQzlELGFBQU87QUFDUCxTQUFLLENBQUM7QUFDTixJQUFFLENBQUM7d0RBYkYsUUFBUSxTQUFDO1VBQ1IsU0FBUyxFQUFFLDBCQUNULEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxxQkFBcUIsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLHNCQUM3RSxrQkFDRjs7Ozs7Ozs7OztnREFDUTtBQUFDLElBU1YsMkJBQUM7QUFDQSxDQURBLEFBZEQsSUFjQzs7QUFuQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFjQSxBQUFBLEFBUkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQWJBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBVUEsQUFBQSxBQUFBLEFBZEEsQUFjQSxBQVRBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIVFRQX0lOVEVSQ0VQVE9SUyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgTmdQcm9ncmVzc0ludGVyY2VwdG9yIH0gZnJvbSAnLi9uZy1wcm9ncmVzcy5pbnRlcmNlcHRvcic7XHJcbmltcG9ydCB7IE5nUHJvZ3Jlc3NIdHRwQ29uZmlnLCBOR19QUk9HUkVTU19IVFRQX0NPTkZJRyB9IGZyb20gJy4vbmctcHJvZ3Jlc3MtaHR0cC5pbnRlcmZhY2UnO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBwcm92aWRlcnM6IFtcclxuICAgIHsgcHJvdmlkZTogSFRUUF9JTlRFUkNFUFRPUlMsIHVzZUNsYXNzOiBOZ1Byb2dyZXNzSW50ZXJjZXB0b3IsIG11bHRpOiB0cnVlIH1cclxuICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1Byb2dyZXNzSHR0cE1vZHVsZSB7XHJcbiAgc3RhdGljIHdpdGhDb25maWcoY29uZmlnOiBOZ1Byb2dyZXNzSHR0cENvbmZpZyk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmdNb2R1bGU6IE5nUHJvZ3Jlc3NIdHRwTW9kdWxlLFxyXG4gICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICB7IHByb3ZpZGU6IE5HX1BST0dSRVNTX0hUVFBfQ09ORklHLCB1c2VWYWx1ZTogY29uZmlnIH1cclxuICAgICAgXVxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIl19