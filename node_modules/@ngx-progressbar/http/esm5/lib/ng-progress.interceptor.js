/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Optional, Inject } from '@angular/core';
import { finalize } from 'rxjs/operators';
import { NgProgress } from '@ngx-progressbar/core';
import { NG_PROGRESS_HTTP_CONFIG } from './ng-progress-http.interface';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngx-progressbar/core';
var NgProgressInterceptor = /** @class */ (function () {
    function NgProgressInterceptor(ngProgress, config) {
        this._inProgressCount = 0;
        this._config = {
            id: 'root',
            silentApis: []
        };
        this._config = config ? tslib_1.__assign({}, this._config, config) : this._config;
        this._progressRef = ngProgress.ref(this._config.id);
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    NgProgressInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        var _this = this;
        // Ignore by request headers
        if (req.headers.has('ignoreProgressBar')) {
            return next.handle(req.clone({ headers: req.headers.delete('ignoreProgressBar') }));
        }
        // Ignore silent api requests
        if (this.checkUrl(req)) {
            return next.handle(req);
        }
        this._inProgressCount++;
        if (!this._progressRef.isStarted) {
            this._progressRef.start();
        }
        return next.handle(req).pipe(finalize((/**
         * @return {?}
         */
        function () {
            _this._inProgressCount--;
            if (_this._inProgressCount === 0) {
                _this._progressRef.complete();
            }
        })));
    };
    /**
     * Check if request is silent.
     * @param req request
     */
    /**
     * Check if request is silent.
     * @private
     * @param {?} req request
     * @return {?}
     */
    NgProgressInterceptor.prototype.checkUrl = /**
     * Check if request is silent.
     * @private
     * @param {?} req request
     * @return {?}
     */
    function (req) {
        /** @type {?} */
        var url = req.url.toLowerCase();
        /** @type {?} */
        var found = this._config.silentApis.find((/**
         * @param {?} u
         * @return {?}
         */
        function (u) { return url.startsWith(u); }));
        return !!found;
    };
    /** @nocollapse */
    NgProgressInterceptor.ctorParameters = function () { return [
        { type: NgProgress },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_PROGRESS_HTTP_CONFIG,] }] }
    ]; };
NgProgressInterceptor.ɵfac = function NgProgressInterceptor_Factory(t) { return new (t || NgProgressInterceptor)(ɵngcc0.ɵɵinject(ɵngcc1.NgProgress), ɵngcc0.ɵɵinject(NG_PROGRESS_HTTP_CONFIG, 8)); };
NgProgressInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgProgressInterceptor, factory: function (t) { return NgProgressInterceptor.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgProgressInterceptor, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.NgProgress }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [NG_PROGRESS_HTTP_CONFIG]
            }] }]; }, null); })();
    return NgProgressInterceptor;
}());
export { NgProgressInterceptor };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgProgressInterceptor.prototype._inProgressCount;
    /**
     * @type {?}
     * @private
     */
    NgProgressInterceptor.prototype._progressRef;
    /**
     * @type {?}
     * @private
     */
    NgProgressInterceptor.prototype._config;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcHJvZ3Jlc3MuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VzIjpbIkBuZ3gtcHJvZ3Jlc3NiYXIvaHR0cC9saWIvbmctcHJvZ3Jlc3MuaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHN0QsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxVQUFVLEVBQWlCLE1BQU0sdUJBQXVCLENBQUM7QUFDbEUsT0FBTyxFQUF3Qix1QkFBdUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDOzs7QUFFN0Y7QUFDMkMsSUFTekMsK0JBQVksVUFBc0IsRUFBK0MsTUFBNkI7QUFDaEgsUUFSVSxxQkFBZ0IsR0FBRyxDQUFDLENBQUM7QUFDL0IsUUFDbUIsWUFBTyxHQUF5QjtBQUNuRCxZQUFJLEVBQUUsRUFBRSxNQUFNO0FBQ2QsWUFBSSxVQUFVLEVBQUUsRUFBRTtBQUNsQixTQUFHLENBQUM7QUFDSixRQUVJLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLENBQUMsc0JBQUssSUFBSSxDQUFDLE9BQU8sRUFBSyxNQUFNLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7QUFDeEUsUUFBSSxJQUFJLENBQUMsWUFBWSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN4RCxJQUFFLENBQUM7QUFDSDtBQUNPO0FBQXNCO0FBQXVCO0FBQW1CO0FBQVEsSUFBN0UseUNBQVM7QUFBTztBQUFzQjtBQUF1QjtBQUFtQjtBQUU3RSxJQUZILFVBQVUsR0FBcUIsRUFBRSxJQUFpQjtBQUFJLFFBQXRELGlCQTBCQztBQUNILFFBekJJLDRCQUE0QjtBQUNoQyxRQUFJLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMs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QUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBMEJBLEFBeEJBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFHQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBbkRBLEFBQUEsQUFIQSxBQUFBLEFBYUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBMENBLEFBQUEsQUFBQSxBQXBEQSxBQW9EQSxBQW5EQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUdBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwSW50ZXJjZXB0b3IsIEh0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBSZXF1ZXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGZpbmFsaXplIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBOZ1Byb2dyZXNzLCBOZ1Byb2dyZXNzUmVmIH0gZnJvbSAnQG5neC1wcm9ncmVzc2Jhci9jb3JlJztcclxuaW1wb3J0IHsgTmdQcm9ncmVzc0h0dHBDb25maWcsIE5HX1BST0dSRVNTX0hUVFBfQ09ORklHIH0gZnJvbSAnLi9uZy1wcm9ncmVzcy1odHRwLmludGVyZmFjZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBOZ1Byb2dyZXNzSW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xyXG5cclxuICBwcml2YXRlIF9pblByb2dyZXNzQ291bnQgPSAwO1xyXG4gIHByaXZhdGUgX3Byb2dyZXNzUmVmOiBOZ1Byb2dyZXNzUmVmO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgX2NvbmZpZzogTmdQcm9ncmVzc0h0dHBDb25maWcgPSB7XHJcbiAgICBpZDogJ3Jvb3QnLFxyXG4gICAgc2lsZW50QXBpczogW11cclxuICB9O1xyXG5cclxuICBjb25zdHJ1Y3RvcihuZ1Byb2dyZXNzOiBOZ1Byb2dyZXNzLCBAT3B0aW9uYWwoKSBASW5qZWN0KE5HX1BST0dSRVNTX0hUVFBfQ09ORklHKSBjb25maWc/OiBOZ1Byb2dyZXNzSHR0cENvbmZpZykge1xyXG4gICAgdGhpcy5fY29uZmlnID0gY29uZmlnID8gey4uLnRoaXMuX2NvbmZpZywgLi4uY29uZmlnfSA6IHRoaXMuX2NvbmZpZztcclxuICAgIHRoaXMuX3Byb2dyZXNzUmVmID0gbmdQcm9ncmVzcy5yZWYodGhpcy5fY29uZmlnLmlkKTtcclxuICB9XHJcblxyXG4gIGludGVyY2VwdChyZXE6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xyXG5cclxuICAgIC8vIElnbm9yZSBieSByZXF1ZXN0IGhlYWRlcnNcclxuICAgIGlmIChyZXEuaGVhZGVycy5oYXMoJ2lnbm9yZVByb2dyZXNzQmFyJykpIHtcclxuICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcS5jbG9uZSh7aGVhZGVyczogcmVxLmhlYWRlcnMuZGVsZXRlKCdpZ25vcmVQcm9ncmVzc0JhcicpfSkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIElnbm9yZSBzaWxlbnQgYXBpIHJlcXVlc3RzXHJcbiAgICBpZiAodGhpcy5jaGVja1VybChyZXEpKSB7XHJcbiAgICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2luUHJvZ3Jlc3NDb3VudCsrO1xyXG5cclxuICAgIGlmICghdGhpcy5fcHJvZ3Jlc3NSZWYuaXNTdGFydGVkKSB7XHJcbiAgICAgIHRoaXMuX3Byb2dyZXNzUmVmLnN0YXJ0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcSkucGlwZShcclxuICAgICAgZmluYWxpemUoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2luUHJvZ3Jlc3NDb3VudC0tO1xyXG4gICAgICAgIGlmICh0aGlzLl9pblByb2dyZXNzQ291bnQgPT09IDApIHtcclxuICAgICAgICAgIHRoaXMuX3Byb2dyZXNzUmVmLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENoZWNrIGlmIHJlcXVlc3QgaXMgc2lsZW50LlxyXG4gICAqIEBwYXJhbSByZXEgcmVxdWVzdFxyXG4gICAqL1xyXG4gIHByaXZhdGUgY2hlY2tVcmwocmVxOiBIdHRwUmVxdWVzdDxhbnk+KSB7XHJcbiAgICBjb25zdCB1cmwgPSByZXEudXJsLnRvTG93ZXJDYXNlKCk7XHJcbiAgICBjb25zdCBmb3VuZCA9IHRoaXMuX2NvbmZpZy5zaWxlbnRBcGlzLmZpbmQoKHUpID0+IHVybC5zdGFydHNXaXRoKHUpKTtcclxuICAgIHJldHVybiAhIWZvdW5kO1xyXG4gIH1cclxufVxyXG4iXX0=