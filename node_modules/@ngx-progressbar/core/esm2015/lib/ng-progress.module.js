/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NgProgressComponent } from './ng-progress.component';
import { NG_PROGRESS_CONFIG } from './ng-progress.interface';
import * as ɵngcc0 from '@angular/core';
export class NgProgressModule {
    /**
     * @param {?} config
     * @return {?}
     */
    static withConfig(config) {
        return {
            ngModule: NgProgressModule,
            providers: [
                { provide: NG_PROGRESS_CONFIG, useValue: config }
            ]
        };
    }
}
NgProgressModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgProgressModule });
NgProgressModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgProgressModule_Factory(t) { return new (t || NgProgressModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgProgressModule, { declarations: function () { return [NgProgressComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [NgProgressComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgProgressModule, [{
        type: NgModule,
        args: [{
                declarations: [NgProgressComponent],
                exports: [NgProgressComponent],
                imports: [CommonModule]
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcHJvZ3Jlc3MubW9kdWxlLmpzIiwic291cmNlcyI6WyJAbmd4LXByb2dyZXNzYmFyL2NvcmUvbGliL25nLXByb2dyZXNzLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBb0Isa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQzs7QUFPL0UsTUFBTSxPQUFPLGdCQUFnQjtBQUM3QjtBQUFRO0FBQXlCO0FBQW1CO0FBQVEsSUFBMUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUF3QjtBQUFJLFFBQzVDLE9BQU87QUFDWCxZQUFNLFFBQVEsRUFBRSxnQkFBZ0I7QUFDaEMsWUFBTSxTQUFTLEVBQUU7QUFDakIsZ0JBQVEsRUFBQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBQztBQUN2RCxhQUFPO0FBQ1AsU0FBSyxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0g7NENBZEMsUUFBUSxTQUFDO0VBQ1IsWUFBWSxFQUFFLENBQUMsbUJBQW1CLENBQUMsa0JBQ25DLE9BQU8sRUFBRSxDQUFDLG1CQUFtQixDQUFDLGtCQUM5QixPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUMsY0FDeEI7Ozs7Ozs7Ozs7QUFUQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBT0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFiQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IE5nUHJvZ3Jlc3NDb21wb25lbnQgfSBmcm9tICcuL25nLXByb2dyZXNzLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IE5nUHJvZ3Jlc3NDb25maWcsIE5HX1BST0dSRVNTX0NPTkZJRyB9IGZyb20gJy4vbmctcHJvZ3Jlc3MuaW50ZXJmYWNlJztcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbTmdQcm9ncmVzc0NvbXBvbmVudF0sXHJcbiAgZXhwb3J0czogW05nUHJvZ3Jlc3NDb21wb25lbnRdLFxyXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1Byb2dyZXNzTW9kdWxlIHtcclxuICBzdGF0aWMgd2l0aENvbmZpZyhjb25maWc6IE5nUHJvZ3Jlc3NDb25maWcpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5nTW9kdWxlOiBOZ1Byb2dyZXNzTW9kdWxlLFxyXG4gICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICB7cHJvdmlkZTogTkdfUFJPR1JFU1NfQ09ORklHLCB1c2VWYWx1ZTogY29uZmlnfVxyXG4gICAgICBdXHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG4iXX0=