/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NgProgressComponent } from './ng-progress.component';
import { NG_PROGRESS_CONFIG } from './ng-progress.interface';
import * as ɵngcc0 from '@angular/core';
var NgProgressModule = /** @class */ (function () {
    function NgProgressModule() {
    }
    /**
     * @param {?} config
     * @return {?}
     */
    NgProgressModule.withConfig = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: NgProgressModule,
            providers: [
                { provide: NG_PROGRESS_CONFIG, useValue: config }
            ]
        };
    };
NgProgressModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgProgressModule });
NgProgressModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgProgressModule_Factory(t) { return new (t || NgProgressModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgProgressModule, { declarations: function () { return [NgProgressComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [NgProgressComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgProgressModule, [{
        type: NgModule,
        args: [{
                declarations: [NgProgressComponent],
                exports: [NgProgressComponent],
                imports: [CommonModule]
            }]
    }], function () { return []; }, null); })();
    return NgProgressModule;
}());
export { NgProgressModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcHJvZ3Jlc3MubW9kdWxlLmpzIiwic291cmNlcyI6WyJAbmd4LXByb2dyZXNzYmFyL2NvcmUvbGliL25nLXByb2dyZXNzLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBb0Isa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQzs7QUFFL0U7QUFFQyxJQUZEO0FBQ2tCLElBYWxCLENBQUM7QUFDRDtBQUFRO0FBQXlCO0FBQW1CO0FBQVEsSUFUbkQsMkJBQVU7QUFBTztBQUF5QjtBQUNsRDtBQUFRLElBRFAsVUFBa0IsTUFBd0I7QUFBSSxRQUM1QyxPQUFPO0FBQ1gsWUFBTSxRQUFRLEVBQUUsZ0JBQWdCO0FBQ2hDLFlBQU0sU0FBUyxFQUFFO0FBQ2pCLGdCQUFRLEVBQUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUM7QUFDdkQsYUFBTztBQUNQLFNBQUssQ0FBQztBQUNOLElBQUUsQ0FBQztvREFiRixRQUFRLFNBQUM7Y0FDUixZQUFZLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxzQkFDbkMsT0FBTyxFQUFFLENBQUMsbUJBQW1CLENBQUMsc0JBQzlCLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQyxrQkFDeEI7Ozs7Ozs7OztnREFDUTtBQUFDLElBU1YsdUJBQUM7QUFDQSxDQURBLEFBZEQsSUFjQzs7QUFuQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFjQSxBQUFBLEFBUkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQWJBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBVUEsQUFBQSxBQUFBLEFBZEEsQUFjQSxBQVRBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBOZ1Byb2dyZXNzQ29tcG9uZW50IH0gZnJvbSAnLi9uZy1wcm9ncmVzcy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBOZ1Byb2dyZXNzQ29uZmlnLCBOR19QUk9HUkVTU19DT05GSUcgfSBmcm9tICcuL25nLXByb2dyZXNzLmludGVyZmFjZSc7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW05nUHJvZ3Jlc3NDb21wb25lbnRdLFxyXG4gIGV4cG9ydHM6IFtOZ1Byb2dyZXNzQ29tcG9uZW50XSxcclxuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdQcm9ncmVzc01vZHVsZSB7XHJcbiAgc3RhdGljIHdpdGhDb25maWcoY29uZmlnOiBOZ1Byb2dyZXNzQ29uZmlnKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBuZ01vZHVsZTogTmdQcm9ncmVzc01vZHVsZSxcclxuICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAge3Byb3ZpZGU6IE5HX1BST0dSRVNTX0NPTkZJRywgdXNlVmFsdWU6IGNvbmZpZ31cclxuICAgICAgXVxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIl19