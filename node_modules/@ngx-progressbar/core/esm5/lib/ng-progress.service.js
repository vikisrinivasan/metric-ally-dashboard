/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Inject, Optional } from '@angular/core';
import { NgProgressRef } from './ng-progress-ref';
import { NG_PROGRESS_CONFIG } from './ng-progress.interface';
import * as i0 from "@angular/core";
import * as i1 from "./ng-progress.interface";
import * as ɵngcc0 from '@angular/core';
var ɵ0 = /**
 * @param {?} n
 * @return {?}
 */
function (n) {
    if (n >= 0 && n < 20)
        return 10;
    if (n >= 20 && n < 50)
        return 4;
    if (n >= 50 && n < 80)
        return 2;
    if (n >= 80 && n < 99)
        return 0.5;
    return 0;
};
/** @type {?} */
var defaultConfig = {
    min: 8,
    max: 100,
    speed: 200,
    debounceTime: 0,
    trickleSpeed: 300,
    fixed: true,
    meteor: true,
    thick: false,
    spinner: true,
    ease: 'linear',
    color: '#1B95E0',
    direction: 'ltr+',
    spinnerPosition: 'right',
    trickleFunc: (ɵ0)
};
var NgProgress = /** @class */ (function () {
    function NgProgress(config) {
        /**
         * Store progress bar instances
         */
        this._instances = new Map();
        this.config = config ? tslib_1.__assign({}, defaultConfig, config) : defaultConfig;
    }
    /**
     * Get or Create progress bar by ID
     * @param id
     * @param config
     */
    /**
     * Get or Create progress bar by ID
     * @param {?=} id
     * @param {?=} config
     * @return {?}
     */
    NgProgress.prototype.ref = /**
     * Get or Create progress bar by ID
     * @param {?=} id
     * @param {?=} config
     * @return {?}
     */
    function (id, config) {
        if (id === void 0) { id = 'root'; }
        if (this._instances.has(id)) {
            // Get ProgressRef instance
            /** @type {?} */
            var progressRef = this._instances.get(id);
            if (config) {
                progressRef.setConfig(tslib_1.__assign({}, this.config, config));
            }
            return progressRef;
        }
        else {
            // Create new ProgressRef instance
            /** @type {?} */
            var progressRef = new NgProgressRef(tslib_1.__assign({}, this.config, config), this.deleteInstance(id));
            return this._instances.set(id, progressRef).get(id);
        }
    };
    /**
     * Destroy all progress bar instances
     */
    /**
     * Destroy all progress bar instances
     * @return {?}
     */
    NgProgress.prototype.destroyAll = /**
     * Destroy all progress bar instances
     * @return {?}
     */
    function () {
        this._instances.forEach((/**
         * @param {?} ref
         * @return {?}
         */
        function (ref) { return ref.destroy(); }));
    };
    /**
     * A destroyer function for each progress bar instance
     */
    /**
     * A destroyer function for each progress bar instance
     * @private
     * @param {?} id
     * @return {?}
     */
    NgProgress.prototype.deleteInstance = /**
     * A destroyer function for each progress bar instance
     * @private
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        return (/**
         * @return {?}
         */
        function () {
            _this._instances.delete(id);
        });
    };
    /** @nocollapse */
    NgProgress.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_PROGRESS_CONFIG,] }] }
    ]; };
    /** @nocollapse */ NgProgress.ngInjectableDef = i0.defineInjectable({ factory: function NgProgress_Factory() { return new NgProgress(i0.inject(i1.NG_PROGRESS_CONFIG, 8)); }, token: NgProgress, providedIn: "root" });
NgProgress.ɵfac = function NgProgress_Factory(t) { return new (t || NgProgress)(ɵngcc0.ɵɵinject(NG_PROGRESS_CONFIG, 8)); };
NgProgress.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgProgress, factory: function (t) { return NgProgress.ɵfac(t); }, providedIn: 'root' });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgProgress, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [NG_PROGRESS_CONFIG]
            }] }]; }, null); })();
    return NgProgress;
}());
export { NgProgress };
if (false) {
    /**
     * Store progress bar instances
     * @type {?}
     * @private
     */
    NgProgress.prototype._instances;
    /**
     * Global config
     * @type {?}
     */
    NgProgress.prototype.config;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,