{"version":3,"file":"ngx-progressbar-router.js","sources":["@ngx-progressbar/router/lib/ng-progress-router.interface.ts","@ngx-progressbar/router/lib/ng-progress-router.service.ts","@ngx-progressbar/router/lib/ng-progress-router.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken, Type } from '@angular/core';\r\nimport { RouterEvent } from '@angular/router';\r\n\r\nexport interface NgProgressRouterConfig {\r\n  id?: string;\r\n  delay?: number;\r\n  startEvents?: Type<RouterEvent>[];\r\n  completeEvents?: Type<RouterEvent>[];\r\n}\r\n\r\nexport const NG_PROGRESS_ROUTER_CONFIG = new InjectionToken<NgProgressRouterConfig>('ngProgressRouterConfig');\r\n","import { Injectable, Optional, Inject, Type } from '@angular/core';\r\nimport { Router, NavigationStart, NavigationEnd, NavigationCancel, NavigationError, RouterEvent } from '@angular/router';\r\nimport { of } from 'rxjs';\r\nimport { tap, delay, switchMap, filter } from 'rxjs/operators';\r\nimport { NgProgress } from '@ngx-progressbar/core';\r\nimport { NgProgressRouterConfig, NG_PROGRESS_ROUTER_CONFIG } from './ng-progress-router.interface';\r\n\r\n/**\r\n * Check if a router event type exists in an array of router event types\r\n * @param routerEvent\r\n * @param events\r\n */\r\nfunction eventExists(routerEvent: RouterEvent, events: Type<RouterEvent>[]) {\r\n  let res = false;\r\n  events.map((event: Type<RouterEvent>) => res = res || routerEvent instanceof event);\r\n  return res;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgProgressRouter {\r\n  private readonly _config: NgProgressRouterConfig = {\r\n    id: 'root',\r\n    delay: 0,\r\n    startEvents: [NavigationStart],\r\n    completeEvents: [NavigationEnd, NavigationCancel, NavigationError]\r\n  };\r\n\r\n  constructor(progress: NgProgress, router: Router, @Optional() @Inject(NG_PROGRESS_ROUTER_CONFIG) config: NgProgressRouterConfig) {\r\n    this._config = config ? {...this._config, ...config} : this._config;\r\n    const progressRef = progress.ref(this._config.id);\r\n\r\n    const startProgress = of({}).pipe(\r\n      tap(() => progressRef.start())\r\n    );\r\n\r\n    const completeProgress = of({}).pipe(\r\n      delay(this._config.delay),\r\n      tap(() => progressRef.complete())\r\n    );\r\n\r\n    const filterEvents = [...this._config.startEvents, ...this._config.completeEvents];\r\n\r\n    router.events.pipe(\r\n      filter((event: RouterEvent) => eventExists(event, filterEvents)),\r\n      switchMap((event: RouterEvent) => eventExists(event, this._config.startEvents) ? startProgress : completeProgress)\r\n    ).subscribe();\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { NgProgressRouterConfig, NG_PROGRESS_ROUTER_CONFIG } from './ng-progress-router.interface';\r\nimport { NgProgressRouter } from './ng-progress-router.service';\r\n\r\n@NgModule({})\r\nexport class NgProgressRouterModule {\r\n\r\n  // Inject the service to activate it\r\n  constructor(ngProgressRouter: NgProgressRouter) {\r\n  }\r\n\r\n  static withConfig(config: NgProgressRouterConfig): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgProgressRouterModule,\r\n      providers: [\r\n        { provide: NG_PROGRESS_ROUTER_CONFIG, useValue: config }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"]}