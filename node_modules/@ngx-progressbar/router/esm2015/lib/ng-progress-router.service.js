/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional, Inject } from '@angular/core';
import { Router, NavigationStart, NavigationEnd, NavigationCancel, NavigationError } from '@angular/router';
import { of } from 'rxjs';
import { tap, delay, switchMap, filter } from 'rxjs/operators';
import { NgProgress } from '@ngx-progressbar/core';
import { NG_PROGRESS_ROUTER_CONFIG } from './ng-progress-router.interface';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-progressbar/core";
import * as i2 from "@angular/router";
import * as i3 from "./ng-progress-router.interface";
/**
 * Check if a router event type exists in an array of router event types
 * @param {?} routerEvent
 * @param {?} events
 * @return {?}
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngx-progressbar/core';
import * as ɵngcc2 from '@angular/router';
function eventExists(routerEvent, events) {
    /** @type {?} */
    let res = false;
    events.map((/**
     * @param {?} event
     * @return {?}
     */
    (event) => res = res || routerEvent instanceof event));
    return res;
}
export class NgProgressRouter {
    /**
     * @param {?} progress
     * @param {?} router
     * @param {?} config
     */
    constructor(progress, router, config) {
        this._config = {
            id: 'root',
            delay: 0,
            startEvents: [NavigationStart],
            completeEvents: [NavigationEnd, NavigationCancel, NavigationError]
        };
        this._config = config ? Object.assign({}, this._config, config) : this._config;
        /** @type {?} */
        const progressRef = progress.ref(this._config.id);
        /** @type {?} */
        const startProgress = of({}).pipe(tap((/**
         * @return {?}
         */
        () => progressRef.start())));
        /** @type {?} */
        const completeProgress = of({}).pipe(delay(this._config.delay), tap((/**
         * @return {?}
         */
        () => progressRef.complete())));
        /** @type {?} */
        const filterEvents = [...this._config.startEvents, ...this._config.completeEvents];
        router.events.pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        (event) => eventExists(event, filterEvents))), switchMap((/**
         * @param {?} event
         * @return {?}
         */
        (event) => eventExists(event, this._config.startEvents) ? startProgress : completeProgress))).subscribe();
    }
}
NgProgressRouter.ɵfac = function NgProgressRouter_Factory(t) { return new (t || NgProgressRouter)(ɵngcc0.ɵɵinject(ɵngcc1.NgProgress), ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(NG_PROGRESS_ROUTER_CONFIG, 8)); };
NgProgressRouter.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgProgressRouter, factory: NgProgressRouter.ɵfac, providedIn: 'root' });
/** @nocollapse */
NgProgressRouter.ctorParameters = () => [
    { type: NgProgress },
    { type: Router },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_PROGRESS_ROUTER_CONFIG,] }] }
];
/** @nocollapse */ NgProgressRouter.ngInjectableDef = i0.defineInjectable({ factory: function NgProgressRouter_Factory() { return new NgProgressRouter(i0.inject(i1.NgProgress), i0.inject(i2.Router), i0.inject(i3.NG_PROGRESS_ROUTER_CONFIG, 8)); }, token: NgProgressRouter, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgProgressRouter, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.NgProgress }, { type: ɵngcc2.Router }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [NG_PROGRESS_ROUTER_CONFIG]
            }] }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgProgressRouter.prototype._config;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcHJvZ3Jlc3Mtcm91dGVyLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIkBuZ3gtcHJvZ3Jlc3NiYXIvcm91dGVyL2xpYi9uZy1wcm9ncmVzcy1yb3V0ZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFRLE1BQU0sZUFBZSxDQUFDO0FBQ25FLE9BQU8sRUFBRSxNQUFNLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxnQkFBZ0IsRUFBRSxlQUFlLEVBQWUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6SCxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzFCLE9BQU8sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbkQsT0FBTyxFQUEwQix5QkFBeUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ25HO0FBRWdDO0FBQzVCO0FBR0o7QUFBc0Q7QUFBSTtBQUV4QjtBQUEwQjtBQUFxQjtBQUN4RTs7OztBQUhULFNBQVMsV0FBVyxDQUFDLFdBQXdCLEVBQUUsTUFBMkI7QUFDMUU7QUFDRSxRQURJLEdBQUcsR0FBRyxLQUFLO0FBQ2pCLElBQUUsTUFBTSxDQUFDLEdBQUc7QUFBTTtBQUF3QjtBQUFtQjtBQUFRLElBQXhELENBQUMsS0FBd0IsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxXQUFXLFlBQVksS0FBSyxFQUFDLENBQUM7QUFDdEYsSUFBRSxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFLRCxNQUFNLE9BQU8sZ0JBQWdCO0FBQzdCO0FBQVE7QUFBMkI7QUFDOUI7QUFFTDtBQUFRLElBSU4sWUFBWSxRQUFvQixFQUFFLE1BQWMsRUFBaUQsTUFBOEI7QUFDakksUUFSbUIsWUFBTyxH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QUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFRQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVBBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBOUJBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFoQkEsQUFBQSxBQUhBLEFBQUEsQUE0QkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBUEEsQUFLQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsLCBJbmplY3QsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUm91dGVyLCBOYXZpZ2F0aW9uU3RhcnQsIE5hdmlnYXRpb25FbmQsIE5hdmlnYXRpb25DYW5jZWwsIE5hdmlnYXRpb25FcnJvciwgUm91dGVyRXZlbnQgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyB0YXAsIGRlbGF5LCBzd2l0Y2hNYXAsIGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgTmdQcm9ncmVzcyB9IGZyb20gJ0BuZ3gtcHJvZ3Jlc3NiYXIvY29yZSc7XHJcbmltcG9ydCB7IE5nUHJvZ3Jlc3NSb3V0ZXJDb25maWcsIE5HX1BST0dSRVNTX1JPVVRFUl9DT05GSUcgfSBmcm9tICcuL25nLXByb2dyZXNzLXJvdXRlci5pbnRlcmZhY2UnO1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIGEgcm91dGVyIGV2ZW50IHR5cGUgZXhpc3RzIGluIGFuIGFycmF5IG9mIHJvdXRlciBldmVudCB0eXBlc1xyXG4gKiBAcGFyYW0gcm91dGVyRXZlbnRcclxuICogQHBhcmFtIGV2ZW50c1xyXG4gKi9cclxuZnVuY3Rpb24gZXZlbnRFeGlzdHMocm91dGVyRXZlbnQ6IFJvdXRlckV2ZW50LCBldmVudHM6IFR5cGU8Um91dGVyRXZlbnQ+W10pIHtcclxuICBsZXQgcmVzID0gZmFsc2U7XHJcbiAgZXZlbnRzLm1hcCgoZXZlbnQ6IFR5cGU8Um91dGVyRXZlbnQ+KSA9PiByZXMgPSByZXMgfHwgcm91dGVyRXZlbnQgaW5zdGFuY2VvZiBldmVudCk7XHJcbiAgcmV0dXJuIHJlcztcclxufVxyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdQcm9ncmVzc1JvdXRlciB7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBfY29uZmlnOiBOZ1Byb2dyZXNzUm91dGVyQ29uZmlnID0ge1xyXG4gICAgaWQ6ICdyb290JyxcclxuICAgIGRlbGF5OiAwLFxyXG4gICAgc3RhcnRFdmVudHM6IFtOYXZpZ2F0aW9uU3RhcnRdLFxyXG4gICAgY29tcGxldGVFdmVudHM6IFtOYXZpZ2F0aW9uRW5kLCBOYXZpZ2F0aW9uQ2FuY2VsLCBOYXZpZ2F0aW9uRXJyb3JdXHJcbiAgfTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJvZ3Jlc3M6IE5nUHJvZ3Jlc3MsIHJvdXRlcjogUm91dGVyLCBAT3B0aW9uYWwoKSBASW5qZWN0KE5HX1BST0dSRVNTX1JPVVRFUl9DT05GSUcpIGNvbmZpZzogTmdQcm9ncmVzc1JvdXRlckNvbmZpZykge1xyXG4gICAgdGhpcy5fY29uZmlnID0gY29uZmlnID8gey4uLnRoaXMuX2NvbmZpZywgLi4uY29uZmlnfSA6IHRoaXMuX2NvbmZpZztcclxuICAgIGNvbnN0IHByb2dyZXNzUmVmID0gcHJvZ3Jlc3MucmVmKHRoaXMuX2NvbmZpZy5pZCk7XHJcblxyXG4gICAgY29uc3Qgc3RhcnRQcm9ncmVzcyA9IG9mKHt9KS5waXBlKFxyXG4gICAgICB0YXAoKCkgPT4gcHJvZ3Jlc3NSZWYuc3RhcnQoKSlcclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgY29tcGxldGVQcm9ncmVzcyA9IG9mKHt9KS5waXBlKFxyXG4gICAgICBkZWxheSh0aGlzLl9jb25maWcuZGVsYXkpLFxyXG4gICAgICB0YXAoKCkgPT4gcHJvZ3Jlc3NSZWYuY29tcGxldGUoKSlcclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgZmlsdGVyRXZlbnRzID0gWy4uLnRoaXMuX2NvbmZpZy5zdGFydEV2ZW50cywgLi4udGhpcy5fY29uZmlnLmNvbXBsZXRlRXZlbnRzXTtcclxuXHJcbiAgICByb3V0ZXIuZXZlbnRzLnBpcGUoXHJcbiAgICAgIGZpbHRlcigoZXZlbnQ6IFJvdXRlckV2ZW50KSA9PiBldmVudEV4aXN0cyhldmVudCwgZmlsdGVyRXZlbnRzKSksXHJcbiAgICAgIHN3aXRjaE1hcCgoZXZlbnQ6IFJvdXRlckV2ZW50KSA9PiBldmVudEV4aXN0cyhldmVudCwgdGhpcy5fY29uZmlnLnN0YXJ0RXZlbnRzKSA/IHN0YXJ0UHJvZ3Jlc3MgOiBjb21wbGV0ZVByb2dyZXNzKVxyXG4gICAgKS5zdWJzY3JpYmUoKTtcclxuICB9XHJcbn1cclxuIl19