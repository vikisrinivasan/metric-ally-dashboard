{"version":3,"file":"ngx-progressbar-router.js","sources":["@ngx-progressbar/router/lib/ng-progress-router.interface.ts","@ngx-progressbar/router/lib/ng-progress-router.service.ts","@ngx-progressbar/router/lib/ng-progress-router.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken, Type } from '@angular/core';\r\nimport { RouterEvent } from '@angular/router';\r\n\r\nexport interface NgProgressRouterConfig {\r\n  id?: string;\r\n  delay?: number;\r\n  startEvents?: Type<RouterEvent>[];\r\n  completeEvents?: Type<RouterEvent>[];\r\n}\r\n\r\nexport const NG_PROGRESS_ROUTER_CONFIG = new InjectionToken<NgProgressRouterConfig>('ngProgressRouterConfig');\r\n","import { Injectable, Optional, Inject, Type } from '@angular/core';\r\nimport { Router, NavigationStart, NavigationEnd, NavigationCancel, NavigationError, RouterEvent } from '@angular/router';\r\nimport { of } from 'rxjs';\r\nimport { tap, delay, switchMap, filter } from 'rxjs/operators';\r\nimport { NgProgress } from '@ngx-progressbar/core';\r\nimport { NgProgressRouterConfig, NG_PROGRESS_ROUTER_CONFIG } from './ng-progress-router.interface';\r\n\r\n/**\r\n * Check if a router event type exists in an array of router event types\r\n * @param routerEvent\r\n * @param events\r\n */\r\nfunction eventExists(routerEvent: RouterEvent, events: Type<RouterEvent>[]) {\r\n  let res = false;\r\n  events.map((event: Type<RouterEvent>) => res = res || routerEvent instanceof event);\r\n  return res;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgProgressRouter {\r\n  private readonly _config: NgProgressRouterConfig = {\r\n    id: 'root',\r\n    delay: 0,\r\n    startEvents: [NavigationStart],\r\n    completeEvents: [NavigationEnd, NavigationCancel, NavigationError]\r\n  };\r\n\r\n  constructor(progress: NgProgress, router: Router, @Optional() @Inject(NG_PROGRESS_ROUTER_CONFIG) config: NgProgressRouterConfig) {\r\n    this._config = config ? {...this._config, ...config} : this._config;\r\n    const progressRef = progress.ref(this._config.id);\r\n\r\n    const startProgress = of({}).pipe(\r\n      tap(() => progressRef.start())\r\n    );\r\n\r\n    const completeProgress = of({}).pipe(\r\n      delay(this._config.delay),\r\n      tap(() => progressRef.complete())\r\n    );\r\n\r\n    const filterEvents = [...this._config.startEvents, ...this._config.completeEvents];\r\n\r\n    router.events.pipe(\r\n      filter((event: RouterEvent) => eventExists(event, filterEvents)),\r\n      switchMap((event: RouterEvent) => eventExists(event, this._config.startEvents) ? startProgress : completeProgress)\r\n    ).subscribe();\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { NgProgressRouterConfig, NG_PROGRESS_ROUTER_CONFIG } from './ng-progress-router.interface';\r\nimport { NgProgressRouter } from './ng-progress-router.service';\r\n\r\n@NgModule({})\r\nexport class NgProgressRouterModule {\r\n\r\n  // Inject the service to activate it\r\n  constructor(ngProgressRouter: NgProgressRouter) {\r\n  }\r\n\r\n  static withConfig(config: NgProgressRouterConfig): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgProgressRouterModule,\r\n      providers: [\r\n        { provide: NG_PROGRESS_ROUTER_CONFIG, useValue: config }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"]}