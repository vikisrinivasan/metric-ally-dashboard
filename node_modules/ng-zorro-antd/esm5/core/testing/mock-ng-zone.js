/**
 * @fileoverview added by tsickle
 * Generated from: mock-ng-zone.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __extends } from "tslib";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { EventEmitter, Injectable, NgZone } from '@angular/core';
/**
 * Mock synchronous NgZone implementation that can be used
 * to flush out `onStable` subscriptions in tests.
 *
 * via: https://github.com/angular/angular/blob/master/packages/core/testing/src/ng_zone_mock.ts
 * \@docs-private
 */
import * as ɵngcc0 from '@angular/core';
var MockNgZone = /** @class */ (function (_super) {
    __extends(MockNgZone, _super);
    function MockNgZone() {
        var _this = _super.call(this, { enableLongStackTrace: false }) || this;
        // tslint:disable-next-line:no-any
        _this.onStable = new EventEmitter(false);
        return _this;
    }
    // tslint:disable-next-line:no-any ban-types
    // tslint:disable-next-line:no-any ban-types
    /**
     * @param {?} fn
     * @return {?}
     */
    MockNgZone.prototype.run = 
    // tslint:disable-next-line:no-any ban-types
    /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        return fn();
    };
    // tslint:disable-next-line:ban-types no-any
    // tslint:disable-next-line:ban-types no-any
    /**
     * @param {?} fn
     * @return {?}
     */
    MockNgZone.prototype.runOutsideAngular = 
    // tslint:disable-next-line:ban-types no-any
    /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        return fn();
    };
    /**
     * @return {?}
     */
    MockNgZone.prototype.simulateZoneExit = /**
     * @return {?}
     */
    function () {
        this.onStable.emit(null);
    };
    /** @nocollapse */
    MockNgZone.ctorParameters = function () { return []; };
MockNgZone.ɵfac = function MockNgZone_Factory(t) { return new (t || MockNgZone)(); };
MockNgZone.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MockNgZone, factory: function (t) { return MockNgZone.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MockNgZone, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return MockNgZone;
}(NgZone));
export { MockNgZone };
if (false) {
    /** @type {?} */
    MockNgZone.prototype.onStable;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1uZy16b25lLmpzIiwic291cmNlcyI6WyJuZy16b3Jyby1hbnRkL2NvcmUvdGVzdGluZy9tb2NrLW5nLXpvbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQVFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRTtBQUNHO0FBQ3VEO0FBQ1I7QUFDaEQ7QUFDOEY7QUFFaEc7O0FBQ0E7QUFDc0MsSUFBTiw4QkFBTTtBQUFDLElBSXJDO0FBQ00sUUFETixZQUNFLGtCQUFNLEVBQUUsb0JBQW9CLEVBQUUsS0FBSyxFQUFFLENBQUMsU0FDdkM7QUFDSDtBQUMwQyxRQU54QyxjQUFRLEdBQXNCLElBQUksWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3hEO0FBRUcsSUFDRCxDQUFDO0FBQ0gsSUFDRSw0Q0FBNEM7QUFDOUM7QUFJQTtBQUFRO0FBQXFCO0FBQzVCO0FBQVEsSUFMUCx3QkFBRztBQUFJO0FBSUE7QUFBUTtBQUFxQjtBQUM1QjtBQUFRLElBTGhCLFVBQUksRUFBWTtBQUFJLFFBQ2xCLE9BQU8sRUFBRSxFQUFFLENBQUM7QUFDaEIsSUFBRSxDQUFDO0FBRUgsSUFBRSw0Q0FBNEM7QUFDOUM7QUFDUTtBQUFRO0FBR0Q7QUFDVjtBQUFRLElBTFgsc0NBQWlCO0FBQUk7QUFJZDtBQUFRO0FBQ1I7QUFBbUI7QUFHNUIsSUFSRSxVQUFrQixFQUFZO0FBQUksUUFDaEMsT0FBTyxFQUFFLEVBQUUsQ0FBQztBQUNoQixJQUFFLENBQUM7QUFFSDtBQUFRO0FBQW1CO0FBQ3JCLElBREoscUNBQWdCO0FBQU87QUFDVjtBQUFRLElBRHJCO0FBQWMsUUFDWixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM3QixJQUFFLENBQUMsQ0FwQkc7QUFBQzt1QkFETixVQUFVLGpDQUNtQjs7Ozs7Z0RBRW5CO0FBQUMsSUFtQlosaUJBQUM7QUFDQSxDQURBLEFBdEJELENBQ2dDLE1BQU0sR0FxQnJDO0FBQ0QsU0F0QmEsVUFBVTtBQUFJO0FBQWE7QUFDcEIsSUFDbEIsOEJBQXNEO0FBQ3hEO0FBQ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJbmplY3RhYmxlLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBNb2NrIHN5bmNocm9ub3VzIE5nWm9uZSBpbXBsZW1lbnRhdGlvbiB0aGF0IGNhbiBiZSB1c2VkXG4gKiB0byBmbHVzaCBvdXQgYG9uU3RhYmxlYCBzdWJzY3JpcHRpb25zIGluIHRlc3RzLlxuICpcbiAqIHZpYTogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iL21hc3Rlci9wYWNrYWdlcy9jb3JlL3Rlc3Rpbmcvc3JjL25nX3pvbmVfbW9jay50c1xuICogQGRvY3MtcHJpdmF0ZVxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTW9ja05nWm9uZSBleHRlbmRzIE5nWm9uZSB7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgb25TdGFibGU6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcihmYWxzZSk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoeyBlbmFibGVMb25nU3RhY2tUcmFjZTogZmFsc2UgfSk7XG4gIH1cblxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55IGJhbi10eXBlc1xuICBydW4oZm46IEZ1bmN0aW9uKTogYW55IHtcbiAgICByZXR1cm4gZm4oKTtcbiAgfVxuXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpiYW4tdHlwZXMgbm8tYW55XG4gIHJ1bk91dHNpZGVBbmd1bGFyKGZuOiBGdW5jdGlvbik6IGFueSB7XG4gICAgcmV0dXJuIGZuKCk7XG4gIH1cblxuICBzaW11bGF0ZVpvbmVFeGl0KCk6IHZvaWQge1xuICAgIHRoaXMub25TdGFibGUuZW1pdChudWxsKTtcbiAgfVxufVxuIl19