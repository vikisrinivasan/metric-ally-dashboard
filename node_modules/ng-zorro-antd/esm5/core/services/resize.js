/**
 * @fileoverview added by tsickle
 * Generated from: resize.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { Injectable, NgZone, RendererFactory2 } from '@angular/core';
import { Subject } from 'rxjs';
import { auditTime, finalize } from 'rxjs/operators';
import * as i0 from "@angular/core";
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
var NOOP = (/**
 * @return {?}
 */
function () { });
var ɵ0 = NOOP;
var NzResizeService = /** @class */ (function () {
    function NzResizeService(ngZone, rendererFactory2) {
        var _this = this;
        this.ngZone = ngZone;
        this.rendererFactory2 = rendererFactory2;
        this.resizeSource$ = new Subject();
        this.listeners = 0;
        this.disposeHandle = NOOP;
        this.handler = (/**
         * @return {?}
         */
        function () {
            _this.ngZone.run((/**
             * @return {?}
             */
            function () {
                _this.resizeSource$.next();
            }));
        });
        this.renderer = this.rendererFactory2.createRenderer(null, null);
    }
    /**
     * @return {?}
     */
    NzResizeService.prototype.subscribe = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.registerListener();
        return this.resizeSource$.pipe(auditTime(16), finalize((/**
         * @return {?}
         */
        function () { return _this.unregisterListener(); })));
    };
    /**
     * @return {?}
     */
    NzResizeService.prototype.unsubscribe = /**
     * @return {?}
     */
    function () {
        this.unregisterListener();
    };
    /**
     * @private
     * @return {?}
     */
    NzResizeService.prototype.registerListener = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.listeners === 0) {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                _this.disposeHandle = _this.renderer.listen('window', 'resize', _this.handler);
            }));
        }
        this.listeners += 1;
    };
    /**
     * @private
     * @return {?}
     */
    NzResizeService.prototype.unregisterListener = /**
     * @private
     * @return {?}
     */
    function () {
        this.listeners -= 1;
        if (this.listeners === 0) {
            this.disposeHandle();
            this.disposeHandle = NOOP;
        }
    };
    /** @nocollapse */
    NzResizeService.ctorParameters = function () { return [
        { type: NgZone },
        { type: RendererFactory2 }
    ]; };
    /** @nocollapse */ NzResizeService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NzResizeService_Factory() { return new NzResizeService(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i0.RendererFactory2)); }, token: NzResizeService, providedIn: "root" });
NzResizeService.ɵfac = function NzResizeService_Factory(t) { return new (t || NzResizeService)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc0.RendererFactory2)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzResizeService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.RendererFactory2 }]; }, null); })();
    return NzResizeService;
}());
export { NzResizeService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NzResizeService.prototype.resizeSource$;
    /**
     * @type {?}
     * @private
     */
    NzResizeService.prototype.listeners;
    /**
     * @type {?}
     * @private
     */
    NzResizeService.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    NzResizeService.prototype.disposeHandle;
    /**
     * @type {?}
     * @private
     */
    NzResizeService.prototype.handler;
    /**
     * @type {?}
     * @private
     */
    NzResizeService.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    NzResizeService.prototype.rendererFactory2;
}
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLmpzIiwic291cmNlcyI6WyJuZy16b3Jyby1hbnRkL2NvcmUvc2VydmljZXMvcmVzaXplLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUtBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFhLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hGLE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyRDtBQUdNOztBQUNHLElBSEgsSUFBSTtBQUFRO0FBRWY7QUFGVSxjQUFhLENBQUMsQ0FBQTtBQUMzQjtBQUNBO0FBR2EsSUFlWCx5QkFBb0IsTUFBYyxFQUFVLGdCQUFrQztBQUNoRixRQURFLGlCQUVDO0FBQ0gsUUFIc0IsV0FBTSxHQUFOLE1BQU0sQ0FBUTtBQUFDLFFBQVMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtBQUFDLFFBZDlELGtCQUFhLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztBQUN2RCxRQUNVLGNBQVMsR0FBRyxDQUFDLENBQUM7QUFDeEIsUUFHVSxrQkFBYSxHQUFHLElBQUksQ0FBQztBQUMvQixRQUNVLFlBQU87QUFBUTtBQUNYO0FBQVksUUFETjtBQUNwQixZQUFJLEtBQUksQ0FBQyxNQUFNLENBQUMsR0FBRztBQUFNO0FBQ0Q7QUFDakIsWUFGYTtBQUNkLGdCQUFBLEtBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDaEMsWUFBSSxDQUFDLEVBQUMsQ0FBQztBQUNQLFFBQUUsQ0FBQyxFQUFDO0FBQ0osUUFFSSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3JFLElBQUUsQ0FBQztBQUNIO0FBQ087QUFBbUI7QUFDMUIsSUFERSxtQ0FBUztBQUFPO0FBQ2Y7QUFBUSxJQURUO0FBQWMsUUFBZCxpQkFPQztBQUNILFFBUEksSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7QUFDNUIsUUFDSSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUM1QixTQUFTLENBQUMsRUFBRSxDQUFDLEVBQ2IsUUFBUTtBQUFNO0FBQXVCO0FBRTNDLFFBRmUsY0FBTSxPQUFBLEtBQUksQ0FBQyxrQkFBa0IsRUFBRSxFQUF6QixDQUF5QixFQUFDLENBQzFDLENBQUM7QUFDTixJQUFFLENBQUM7QUFFSDtBQUFRO0FBQ0w7QUFBUSxJQURULHFDQUFXO0FBQU87QUFDTDtBQUFRLElBRHJCO0FBQWMsUUFDWixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztBQUM5QixJQUFFLENBQUM7QUFFSDtBQUFRO0FBQWdCO0FBQ2xCO0FBQVEsSUFESiwwQ0FBZ0I7QUFBTztBQUNyQjtBQUFtQjtBQUN4QixJQUZMO0FBQWMsUUFBZCxpQkFRQztBQUNILFFBUkksSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLENBQUMsRUFBRTtBQUM5QixZQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCO0FBQU07QUFDakI7QUFBZ0IsWUFESjtBQUM5QixnQkFBRSxLQUFJLENBQUMsYUFBYSxHQUFHLEtBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsS0FBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3BGLFlBQU0sQ0FBQyxFQUFDLENBQUM7QUFDVCxTQUFLO0FBQ0wsUUFDSSxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FBQztBQUN4QixJQUFFLENBQUM7QUFFSDtBQUFRO0FBQWdCO0FBQ3BCO0FBQVEsSUFERiw0Q0FBa0I7QUFBTztBQUN2QjtBQUVQO0FBQVEsSUFIWDtBQUFjLFFBQ1osSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUM7QUFDeEIsUUFDSSxJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssQ0FBQyxFQUFFO0FBQzlCLFlBQU0sSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQzNCLFlBQU0sSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7QUFDaEMsU0FBSztBQUNMLElBQUUsQ0FBQyxDQWpETTtBQUFDOzRCQUhULFVBQVUsU0FBQywvQ0FJVjtTQUhBLFVBQVUsRUFBRSxyQkFLVCxnQkFaZ0IsTUFBTTtDQU9QLGtCQUNuQixuQkFSOEIsZ0JBQVMsZ0JBQWdCO0FBQUc7QUFBVTs7Ozs7OzswR0FVM0I7QUFBQywwQkFmM0M7QUFBRSxDQWdFRCxBQXJERCxJQXFEQztBQUNELFNBbkRhLGVBQWU7QUFDM0I7QUFBYTtBQUFRO0FBQWlCO0FBQWdCO0FBRWpELElBRkosd0NBQXFEO0FBQ3ZEO0FBQ087QUFBaUI7QUFFVjtBQUFRLElBRnBCLG9DQUFzQjtBQUN4QjtBQUNPO0FBQWlCO0FBRWhCO0FBQVEsSUFGZCxtQ0FBNEI7QUFDOUI7QUFDTztBQUFpQjtBQUVqQjtBQUFRLElBRmIsd0NBQTZCO0FBQy9CO0FBQ087QUFBaUI7QUFDbEI7QUFBUSxJQURaLGtDQUlFO0FBQ0o7QUFDTztBQUFpQjtBQUFnQjtBQUFRLElBQWxDLGlDQUFzQjtBQUFDO0FBQVE7QUFBaUI7QUFBZ0I7QUFDNUUsSUFEb0MsMkNBQTBDO0FBQUM7QUFBRTtBQUNyRSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUsIE5nWm9uZSwgUmVuZGVyZXIyLCBSZW5kZXJlckZhY3RvcnkyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBhdWRpdFRpbWUsIGZpbmFsaXplIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5jb25zdCBOT09QID0gKCk6IHZvaWQgPT4ge307XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE56UmVzaXplU2VydmljZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgcmVzaXplU291cmNlJCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgcHJpdmF0ZSBsaXN0ZW5lcnMgPSAwO1xuXG4gIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMjtcblxuICBwcml2YXRlIGRpc3Bvc2VIYW5kbGUgPSBOT09QO1xuXG4gIHByaXZhdGUgaGFuZGxlciA9ICgpOiB2b2lkID0+IHtcbiAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4ge1xuICAgICAgdGhpcy5yZXNpemVTb3VyY2UkLm5leHQoKTtcbiAgICB9KTtcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5nWm9uZTogTmdab25lLCBwcml2YXRlIHJlbmRlcmVyRmFjdG9yeTI6IFJlbmRlcmVyRmFjdG9yeTIpIHtcbiAgICB0aGlzLnJlbmRlcmVyID0gdGhpcy5yZW5kZXJlckZhY3RvcnkyLmNyZWF0ZVJlbmRlcmVyKG51bGwsIG51bGwpO1xuICB9XG5cbiAgc3Vic2NyaWJlKCk6IE9ic2VydmFibGU8dm9pZD4ge1xuICAgIHRoaXMucmVnaXN0ZXJMaXN0ZW5lcigpO1xuXG4gICAgcmV0dXJuIHRoaXMucmVzaXplU291cmNlJC5waXBlKFxuICAgICAgYXVkaXRUaW1lKDE2KSxcbiAgICAgIGZpbmFsaXplKCgpID0+IHRoaXMudW5yZWdpc3Rlckxpc3RlbmVyKCkpXG4gICAgKTtcbiAgfVxuXG4gIHVuc3Vic2NyaWJlKCk6IHZvaWQge1xuICAgIHRoaXMudW5yZWdpc3Rlckxpc3RlbmVyKCk7XG4gIH1cblxuICBwcml2YXRlIHJlZ2lzdGVyTGlzdGVuZXIoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubGlzdGVuZXJzID09PSAwKSB7XG4gICAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICAgIHRoaXMuZGlzcG9zZUhhbmRsZSA9IHRoaXMucmVuZGVyZXIubGlzdGVuKCd3aW5kb3cnLCAncmVzaXplJywgdGhpcy5oYW5kbGVyKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMubGlzdGVuZXJzICs9IDE7XG4gIH1cblxuICBwcml2YXRlIHVucmVnaXN0ZXJMaXN0ZW5lcigpOiB2b2lkIHtcbiAgICB0aGlzLmxpc3RlbmVycyAtPSAxO1xuXG4gICAgaWYgKHRoaXMubGlzdGVuZXJzID09PSAwKSB7XG4gICAgICB0aGlzLmRpc3Bvc2VIYW5kbGUoKTtcbiAgICAgIHRoaXMuZGlzcG9zZUhhbmRsZSA9IE5PT1A7XG4gICAgfVxuICB9XG59XG4iXX0=