/**
 * @fileoverview added by tsickle
 * Generated from: breakpoint.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { MediaMatcher } from '@angular/cdk/layout';
import { Injectable } from '@angular/core';
import { distinctUntilChanged, map, startWith } from 'rxjs/operators';
import { NzResizeService } from './resize';
import * as i0 from "@angular/core";
import * as i1 from "./resize";
import * as i2 from "@angular/cdk/layout";
/** @enum {string} */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './resize';
import * as ɵngcc2 from '@angular/cdk/layout';
var NzBreakpointEnum = {
    xxl: "xxl",
    xl: "xl",
    lg: "lg",
    md: "md",
    sm: "sm",
    xs: "xs",
};
export { NzBreakpointEnum };
/** @type {?} */
export var gridResponsiveMap = {
    xs: '(max-width: 575px)',
    sm: '(min-width: 576px)',
    md: '(min-width: 768px)',
    lg: '(min-width: 992px)',
    xl: '(min-width: 1200px)',
    xxl: '(min-width: 1600px)'
};
/** @type {?} */
export var siderResponsiveMap = {
    xs: '(max-width: 479.98px)',
    sm: '(max-width: 575.98px)',
    md: '(max-width: 767.98px)',
    lg: '(max-width: 991.98px)',
    xl: '(max-width: 1199.98px)',
    xxl: '(max-width: 1599.98px)'
};
var NzBreakpointService = /** @class */ (function () {
    function NzBreakpointService(resizeService, mediaMatcher) {
        this.resizeService = resizeService;
        this.mediaMatcher = mediaMatcher;
        this.resizeService.subscribe().subscribe((/**
         * @return {?}
         */
        function () { }));
    }
    /**
     * @param {?} breakpointMap
     * @param {?=} fullMap
     * @return {?}
     */
    NzBreakpointService.prototype.subscribe = /**
     * @param {?} breakpointMap
     * @param {?=} fullMap
     * @return {?}
     */
    function (breakpointMap, fullMap) {
        var _this = this;
        if (fullMap) {
            /** @type {?} */
            var get = (/**
             * @return {?}
             */
            function () { return _this.matchMedia(breakpointMap, true); });
            return this.resizeService.subscribe().pipe(map(get), startWith(get()), distinctUntilChanged((/**
             * @param {?} x
             * @param {?} y
             * @return {?}
             */
            function (x, y) { return x[0] === y[0]; })), map((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x[1]; })));
        }
        else {
            /** @type {?} */
            var get = (/**
             * @return {?}
             */
            function () { return _this.matchMedia(breakpointMap); });
            return this.resizeService.subscribe().pipe(map(get), startWith(get()), distinctUntilChanged());
        }
    };
    /**
     * @private
     * @param {?} breakpointMap
     * @param {?=} fullMap
     * @return {?}
     */
    NzBreakpointService.prototype.matchMedia = /**
     * @private
     * @param {?} breakpointMap
     * @param {?=} fullMap
     * @return {?}
     */
    function (breakpointMap, fullMap) {
        var _this = this;
        /** @type {?} */
        var bp = NzBreakpointEnum.md;
        /** @type {?} */
        var breakpointBooleanMap = {};
        Object.keys(breakpointMap).map((/**
         * @param {?} breakpoint
         * @return {?}
         */
        function (breakpoint) {
            /** @type {?} */
            var castBP = (/** @type {?} */ (breakpoint));
            /** @type {?} */
            var matched = _this.mediaMatcher.matchMedia(gridResponsiveMap[castBP]).matches;
            breakpointBooleanMap[(/** @type {?} */ (breakpoint))] = matched;
            if (matched) {
                bp = castBP;
            }
        }));
        if (fullMap) {
            return [bp, (/** @type {?} */ (breakpointBooleanMap))];
        }
        else {
            return bp;
        }
    };
    /** @nocollapse */
    NzBreakpointService.ctorParameters = function () { return [
        { type: NzResizeService },
        { type: MediaMatcher }
    ]; };
    /** @nocollapse */ NzBreakpointService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NzBreakpointService_Factory() { return new NzBreakpointService(i0.ɵɵinject(i1.NzResizeService), i0.ɵɵinject(i2.MediaMatcher)); }, token: NzBreakpointService, providedIn: "root" });
NzBreakpointService.ɵfac = function NzBreakpointService_Factory(t) { return new (t || NzBreakpointService)(ɵngcc0.ɵɵinject(ɵngcc1.NzResizeService), ɵngcc0.ɵɵinject(ɵngcc2.MediaMatcher)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzBreakpointService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.NzResizeService }, { type: ɵngcc2.MediaMatcher }]; }, null); })();
    return NzBreakpointService;
}());
export { NzBreakpointService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NzBreakpointService.prototype.resizeService;
    /**
     * @type {?}
     * @private
     */
    NzBreakpointService.prototype.mediaMatcher;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,