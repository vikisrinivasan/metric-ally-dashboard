/**
 * @fileoverview added by tsickle
 * Generated from: tree-node-checkbox.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var NzTreeNodeCheckboxComponent = /** @class */ (function () {
    function NzTreeNodeCheckboxComponent() {
        this.nzSelectMode = false;
    }
    NzTreeNodeCheckboxComponent.propDecorators = {
        nzSelectMode: [{ type: Input }],
        isChecked: [{ type: Input }],
        isHalfChecked: [{ type: Input }],
        isDisabled: [{ type: Input }],
        isDisableCheckbox: [{ type: Input }]
    };
NzTreeNodeCheckboxComponent.ɵfac = function NzTreeNodeCheckboxComponent_Factory(t) { return new (t || NzTreeNodeCheckboxComponent)(); };
NzTreeNodeCheckboxComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NzTreeNodeCheckboxComponent, selectors: [["nz-tree-node-checkbox"]], hostVars: 16, hostBindings: function NzTreeNodeCheckboxComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("ant-select-tree-checkbox", ctx.nzSelectMode)("ant-select-tree-checkbox-checked", ctx.nzSelectMode && ctx.isChecked)("ant-select-tree-checkbox-indeterminate", ctx.nzSelectMode && ctx.isHalfChecked)("ant-select-tree-checkbox-disabled", ctx.nzSelectMode && (ctx.isDisabled || ctx.isDisableCheckbox))("ant-tree-checkbox", !ctx.nzSelectMode)("ant-tree-checkbox-checked", !ctx.nzSelectMode && ctx.isChecked)("ant-tree-checkbox-indeterminate", !ctx.nzSelectMode && ctx.isHalfChecked)("ant-tree-checkbox-disabled", !ctx.nzSelectMode && (ctx.isDisabled || ctx.isDisableCheckbox));
    } }, inputs: { nzSelectMode: "nzSelectMode", isChecked: "isChecked", isHalfChecked: "isHalfChecked", isDisabled: "isDisabled", isDisableCheckbox: "isDisableCheckbox" }, decls: 1, vars: 4, template: function NzTreeNodeCheckboxComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "span");
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("ant-tree-checkbox-inner", !ctx.nzSelectMode)("ant-select-tree-checkbox-inner", ctx.nzSelectMode);
    } }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzTreeNodeCheckboxComponent, [{
        type: Component,
        args: [{
                selector: 'nz-tree-node-checkbox',
                template: " <span [class.ant-tree-checkbox-inner]=\"!nzSelectMode\" [class.ant-select-tree-checkbox-inner]=\"nzSelectMode\"></span> ",
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                host: {
                    '[class.ant-select-tree-checkbox]': "nzSelectMode",
                    '[class.ant-select-tree-checkbox-checked]': "nzSelectMode && isChecked",
                    '[class.ant-select-tree-checkbox-indeterminate]': "nzSelectMode && isHalfChecked",
                    '[class.ant-select-tree-checkbox-disabled]': "nzSelectMode && (isDisabled || isDisableCheckbox)",
                    '[class.ant-tree-checkbox]': "!nzSelectMode",
                    '[class.ant-tree-checkbox-checked]': "!nzSelectMode && isChecked",
                    '[class.ant-tree-checkbox-indeterminate]': "!nzSelectMode && isHalfChecked",
                    '[class.ant-tree-checkbox-disabled]': "!nzSelectMode && (isDisabled || isDisableCheckbox)"
                }
            }]
    }], function () { return []; }, { nzSelectMode: [{
            type: Input
        }], isChecked: [{
            type: Input
        }], isHalfChecked: [{
            type: Input
        }], isDisabled: [{
            type: Input
        }], isDisableCheckbox: [{
            type: Input
        }] }); })();
    return NzTreeNodeCheckboxComponent;
}());
export { NzTreeNodeCheckboxComponent };
if (false) {
    /** @type {?} */
    NzTreeNodeCheckboxComponent.prototype.nzSelectMode;
    /** @type {?} */
    NzTreeNodeCheckboxComponent.prototype.isChecked;
    /** @type {?} */
    NzTreeNodeCheckboxComponent.prototype.isHalfChecked;
    /** @type {?} */
    NzTreeNodeCheckboxComponent.prototype.isDisabled;
    /** @type {?} */
    NzTreeNodeCheckboxComponent.prototype.isDisableCheckbox;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ub2RlLWNoZWNrYm94LmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsibmctem9ycm8tYW50ZC90cmVlL3RyZWUtbm9kZS1jaGVja2JveC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBS0EsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRTFFO0FBRWEsSUFGYjtBQUM0QixRQWdCakIsaUJBQVksR0FBRyxLQUFLLENBQUM7QUFDaEMsSUFJQSxDQUFDLEFBTk87QUFBQztZQWhCUixTQUFTLFNBQUMsOUJBaUJNLCtCQUFkLEtBQUs7V0FoQk4sUUFBUSxFQUFFLHJCQWdCQyw0QkFDVixLQUFLO01BakIyQixzQkFDakMsUUFBUSxFQUFFLHRDQWdCQyxnQ0FDVixLQUFLO0FBQUssNkJBQ1YsS0FBSztBQUFLLG9DQUNWLEtBQUs7QUFBSTs0QkFuQnVILHNCQUNqSSxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTSxzQkFDL0M7Q0FBbUIsRUFBRSxLQUFLLHNCQUMxQixJQUFJLEVBQUUsMEJBQ0osa0NBQWtDLEVBQUUsY0FBYywwQkFDbEQsMENBQTBDLEVBQUUsMkJBQTJCLDBCQUN2RTsyQ0FBZ0QsRUFBRSwrQkFBK0IsMEJBQ2pGLDJDQUEyQyxFQUFFLG1EQUFtRCwwQkFDaEcsMkJBQTJCLEVBQUUsZUFBZSwwQkFDNUMsbUNBQW1DLEVBQUUsNEJBQTRCLDBCQUNqRSx5Q0FBeUMsRUFBRSxnQ0FBZ0MsMEJBQzNFLG9DQUFvQyxFQUFFLG9EQUFvRCxzQkFDM0Y7Z0JBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFNaUI7QUFBQyxJQUNuQixrQ0FBQztBQUNBLENBREEsQUF0QkQsSUFzQkM7QUFDRCxTQVBhLDJCQUEyQjtBQUN2QztBQUFhO0FBQ1osSUFEQSxtREFBOEI7QUFDaEM7QUFBcUIsSUFBbkIsZ0RBQTZCO0FBQy9CO0FBQXFCLElBQW5CLG9EQUFpQztBQUNuQztBQUFxQixJQUFuQixpREFBOEI7QUFDaEM7QUFBcUIsSUFBbkIsd0RBQXFDO0FBQ3ZDO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9ORy1aT1JSTy9uZy16b3Jyby1hbnRkL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduei10cmVlLW5vZGUtY2hlY2tib3gnLFxuICB0ZW1wbGF0ZTogYCA8c3BhbiBbY2xhc3MuYW50LXRyZWUtY2hlY2tib3gtaW5uZXJdPVwiIW56U2VsZWN0TW9kZVwiIFtjbGFzcy5hbnQtc2VsZWN0LXRyZWUtY2hlY2tib3gtaW5uZXJdPVwibnpTZWxlY3RNb2RlXCI+PC9zcGFuPiBgLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLmFudC1zZWxlY3QtdHJlZS1jaGVja2JveF0nOiBgbnpTZWxlY3RNb2RlYCxcbiAgICAnW2NsYXNzLmFudC1zZWxlY3QtdHJlZS1jaGVja2JveC1jaGVja2VkXSc6IGBuelNlbGVjdE1vZGUgJiYgaXNDaGVja2VkYCxcbiAgICAnW2NsYXNzLmFudC1zZWxlY3QtdHJlZS1jaGVja2JveC1pbmRldGVybWluYXRlXSc6IGBuelNlbGVjdE1vZGUgJiYgaXNIYWxmQ2hlY2tlZGAsXG4gICAgJ1tjbGFzcy5hbnQtc2VsZWN0LXRyZWUtY2hlY2tib3gtZGlzYWJsZWRdJzogYG56U2VsZWN0TW9kZSAmJiAoaXNEaXNhYmxlZCB8fCBpc0Rpc2FibGVDaGVja2JveClgLFxuICAgICdbY2xhc3MuYW50LXRyZWUtY2hlY2tib3hdJzogYCFuelNlbGVjdE1vZGVgLFxuICAgICdbY2xhc3MuYW50LXRyZWUtY2hlY2tib3gtY2hlY2tlZF0nOiBgIW56U2VsZWN0TW9kZSAmJiBpc0NoZWNrZWRgLFxuICAgICdbY2xhc3MuYW50LXRyZWUtY2hlY2tib3gtaW5kZXRlcm1pbmF0ZV0nOiBgIW56U2VsZWN0TW9kZSAmJiBpc0hhbGZDaGVja2VkYCxcbiAgICAnW2NsYXNzLmFudC10cmVlLWNoZWNrYm94LWRpc2FibGVkXSc6IGAhbnpTZWxlY3RNb2RlICYmIChpc0Rpc2FibGVkIHx8IGlzRGlzYWJsZUNoZWNrYm94KWBcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBOelRyZWVOb2RlQ2hlY2tib3hDb21wb25lbnQge1xuICBASW5wdXQoKSBuelNlbGVjdE1vZGUgPSBmYWxzZTtcbiAgQElucHV0KCkgaXNDaGVja2VkPzogYm9vbGVhbjtcbiAgQElucHV0KCkgaXNIYWxmQ2hlY2tlZD86IGJvb2xlYW47XG4gIEBJbnB1dCgpIGlzRGlzYWJsZWQ/OiBib29sZWFuO1xuICBASW5wdXQoKSBpc0Rpc2FibGVDaGVja2JveD86IGJvb2xlYW47XG59XG4iXX0=