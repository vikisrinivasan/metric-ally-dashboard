/**
 * @fileoverview added by tsickle
 * Generated from: tree-indent.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __read, __spread } from "tslib";
/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function NzTreeIndentComponent_span_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 1);
} if (rf & 2) {
    var index_r2 = ctx.index;
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r0.unitMapOfClass(index_r2));
} }
var NzTreeIndentComponent = /** @class */ (function () {
    function NzTreeIndentComponent() {
        this.nzSelectMode = false;
        this.listOfUnit = [];
    }
    /**
     * @param {?} index
     * @return {?}
     */
    NzTreeIndentComponent.prototype.unitMapOfClass = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        var _a;
        return _a = {},
            _a["ant-tree-indent-unit"] = !this.nzSelectMode,
            _a["ant-tree-indent-unit-start"] = !this.nzSelectMode && (/** @type {?} */ (this.nzIsStart))[index + 1],
            _a["ant-tree-indent-unit-end"] = !this.nzSelectMode && (/** @type {?} */ (this.nzIsEnd))[index + 1],
            _a["ant-select-tree-indent-unit"] = this.nzSelectMode,
            _a["ant-select-tree-indent-unit-start"] = this.nzSelectMode && (/** @type {?} */ (this.nzIsStart))[index + 1],
            _a["ant-select-tree-indent-unit-end"] = this.nzSelectMode && (/** @type {?} */ (this.nzIsEnd))[index + 1],
            _a;
    };
    /**
     * @return {?}
     */
    NzTreeIndentComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} changes
     * @return {?}
     */
    NzTreeIndentComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var nzTreeLevel = changes.nzTreeLevel;
        if (nzTreeLevel) {
            this.listOfUnit = __spread(new Array(nzTreeLevel.currentValue || 0));
        }
    };
    NzTreeIndentComponent.propDecorators = {
        nzTreeLevel: [{ type: Input }],
        nzIsStart: [{ type: Input }],
        nzIsEnd: [{ type: Input }],
        nzSelectMode: [{ type: Input }]
    };
NzTreeIndentComponent.ɵfac = function NzTreeIndentComponent_Factory(t) { return new (t || NzTreeIndentComponent)(); };
NzTreeIndentComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NzTreeIndentComponent, selectors: [["nz-tree-indent"]], hostVars: 5, hostBindings: function NzTreeIndentComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-hidden", true);
        ɵngcc0.ɵɵclassProp("ant-tree-indent", !ctx.nzSelectMode)("ant-select-tree-indent", ctx.nzSelectMode);
    } }, inputs: { nzSelectMode: "nzSelectMode", nzTreeLevel: "nzTreeLevel", nzIsStart: "nzIsStart", nzIsEnd: "nzIsEnd" }, exportAs: ["nzTreeIndent"], features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[3, "ngClass", 4, "ngFor", "ngForOf"], [3, "ngClass"]], template: function NzTreeIndentComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, NzTreeIndentComponent_span_0_Template, 1, 1, "span", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ctx.listOfUnit);
    } }, directives: [ɵngcc1.NgForOf, ɵngcc1.NgClass], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzTreeIndentComponent, [{
        type: Component,
        args: [{
                selector: 'nz-tree-indent',
                exportAs: 'nzTreeIndent',
                template: " <span *ngFor=\"let i of listOfUnit; let index = index\" [ngClass]=\"unitMapOfClass(index)\"></span> ",
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                host: {
                    '[attr.aria-hidden]': 'true',
                    '[class.ant-tree-indent]': '!nzSelectMode',
                    '[class.ant-select-tree-indent]': 'nzSelectMode'
                }
            }]
    }], function () { return []; }, { nzSelectMode: [{
            type: Input
        }], nzTreeLevel: [{
            type: Input
        }], nzIsStart: [{
            type: Input
        }], nzIsEnd: [{
            type: Input
        }] }); })();
    return NzTreeIndentComponent;
}());
export { NzTreeIndentComponent };
if (false) {
    /** @type {?} */
    NzTreeIndentComponent.prototype.nzTreeLevel;
    /** @type {?} */
    NzTreeIndentComponent.prototype.nzIsStart;
    /** @type {?} */
    NzTreeIndentComponent.prototype.nzIsEnd;
    /** @type {?} */
    NzTreeIndentComponent.prototype.nzSelectMode;
    /** @type {?} */
    NzTreeIndentComponent.prototype.listOfUnit;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1pbmRlbnQuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyJuZy16b3Jyby1hbnRkL3RyZWUvdHJlZS1pbmRlbnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFLQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBb0MsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7Ozs7O0FBRTVHO0FBRWMsSUFGZDtBQUNzQixRQWVYLGlCQUFZLEdBQUcsS0FBSyxDQUFDO0FBQ2hDLFFBQ0UsZUFBVSxHQUFhLEVBQUUsQ0FBQztBQUM1QixJQW9CQSxDQUFDO0FBQ0Q7QUFBUTtBQUF3QjtBQUFtQjtBQUFRLElBcEJ6RCw4Q0FBYztBQUFPO0FBQXdCO0FBQzNDO0FBQVEsSUFEVixVQUFlLEtBQWE7QUFBSTtBQUFnQixRQUM5QztBQUNHLFlBQUQsR0FBQyxzQkFBc0IsSUFBRyxDQUFDLElBQUksQ0FBQyxZQUFZO0FBQ2xELFlBQU0sR0FBQyw0QkFBNEIsSUFBRyxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUksbUJBQUEsSUFBSSxDQUFDLFNBQVMsRUFBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDdEYsWUFBTSxHQUFDLDBCQUEwQixJQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksSUFBSSxtQkFBQSxJQUFJLENBQUMsT0FBTyxFQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztBQUNsRixZQUFNLEdBQUMsNkJBQTZCLElBQUcsSUFBSSxDQUFDLFlBQVk7QUFDeEQsWUFBTSxHQUFDLG1DQUFtQyxJQUFHLElBQUksQ0FBQyxZQUFZLElBQUksbUJBQUEsSUFBSSxDQUFDLFNBQVMsRUFBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDNUYsWUFBTSxHQUFDLGlDQUFpQyxJQUFHLElBQUksQ0FBQyxZQUFZLElBQUksbUJBQUEsSUFBSSxDQUFDLE9BQU8sRUFBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDdkYsZUFBSztBQUNOLElBQUUsQ0FBQztBQUVIO0FBQVE7QUFFSjtBQUFRLElBRlYsd0NBQVE7QUFBTztBQUVKO0FBQVEsSUFGbkIsY0FBa0IsQ0FBQztBQUVyQjtBQUFRO0FBQTBCO0FBQzNCO0FBQVEsSUFEYiwyQ0FBVztBQUFPO0FBQ3BCO0FBQW1CO0FBQVEsSUFEekIsVUFBWSxPQUFzQjtBQUFJLFFBQzVCLElBQUEsaUNBQVc7QUFBRSxRQUNyQixJQUFJLFdBQVcsRUFBRTtBQUNyQixZQUFNLElBQUksQ0FBQyxVQUFVLFlBQU8sSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDLFlBQVksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RFLFNBQUs7QUFDTCxJQUFFLENBQUMsQ0ExQks7QUFBQztZQVpSLFNBQVMsU0FBQyw5QkFZMkMsOEJBQ25ELEtBQUs7WUFaTixRQUFRLEVBQUUsdEJBWUMsNEJBQ1YsS0FBSztBQWJvQixzQkFDMUIsUUFBUSxFQUFFLGhDQVlDLDBCQUNWLEtBQUs7VUFia0Isc0JBQ3hCLGhDQVlXLCtCQUNWLEtBQUs7QUFiRSxFQUFFLEZBYUE7a0dBYm1HO0NBQzdHLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNLHNCQUMvQyxtQkFBbUIsRUFBRSxLQUFLLHNCQUMxQixJQUFJLEVBQUUsMEJBQ0osb0JBQW9CLEVBQUUsTUFBTSwwQkFDNUI7ZUFBeUIsRUFBRSxlQUFlO1NBQzFDLGdDQUFnQyxFQUFFLGNBQWMsc0JBQ2pELGtCQUNGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUtpQjtBQUFDLElBdUJuQiw0QkFBQztBQUNBLENBREEsQUF2Q0QsSUF1Q0M7QUFDRCxTQTVCYSxxQkFBcUI7QUFBSTtBQUFhO0FBQzdDLElBQUosNENBQThCO0FBQ2hDO0FBQXFCLElBQW5CLDBDQUErQjtBQUNqQztBQUFxQixJQUFuQix3Q0FBNkI7QUFDL0I7QUFBcUIsSUFBbkIsNkNBQThCO0FBQ2hDO0FBQ29CLElBQWxCLDJDQUEwQjtBQUM1QjtBQUNDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2dpdGh1Yi5jb20vTkctWk9SUk8vbmctem9ycm8tYW50ZC9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cblxuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5wdXQsIE9uQ2hhbmdlcywgT25Jbml0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ256LXRyZWUtaW5kZW50JyxcbiAgZXhwb3J0QXM6ICduelRyZWVJbmRlbnQnLFxuICB0ZW1wbGF0ZTogYCA8c3BhbiAqbmdGb3I9XCJsZXQgaSBvZiBsaXN0T2ZVbml0OyBsZXQgaW5kZXggPSBpbmRleFwiIFtuZ0NsYXNzXT1cInVuaXRNYXBPZkNsYXNzKGluZGV4KVwiPjwvc3Bhbj4gYCxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICBob3N0OiB7XG4gICAgJ1thdHRyLmFyaWEtaGlkZGVuXSc6ICd0cnVlJyxcbiAgICAnW2NsYXNzLmFudC10cmVlLWluZGVudF0nOiAnIW56U2VsZWN0TW9kZScsXG4gICAgJ1tjbGFzcy5hbnQtc2VsZWN0LXRyZWUtaW5kZW50XSc6ICduelNlbGVjdE1vZGUnXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnpUcmVlSW5kZW50Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuICBASW5wdXQoKSBuelRyZWVMZXZlbD86IG51bWJlcjtcbiAgQElucHV0KCkgbnpJc1N0YXJ0PzogYm9vbGVhbltdO1xuICBASW5wdXQoKSBueklzRW5kPzogYm9vbGVhbltdO1xuICBASW5wdXQoKSBuelNlbGVjdE1vZGUgPSBmYWxzZTtcblxuICBsaXN0T2ZVbml0OiBudW1iZXJbXSA9IFtdO1xuXG4gIHVuaXRNYXBPZkNsYXNzKGluZGV4OiBudW1iZXIpOiB7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFtgYW50LXRyZWUtaW5kZW50LXVuaXRgXTogIXRoaXMubnpTZWxlY3RNb2RlLFxuICAgICAgW2BhbnQtdHJlZS1pbmRlbnQtdW5pdC1zdGFydGBdOiAhdGhpcy5uelNlbGVjdE1vZGUgJiYgdGhpcy5ueklzU3RhcnQhW2luZGV4ICsgMV0sXG4gICAgICBbYGFudC10cmVlLWluZGVudC11bml0LWVuZGBdOiAhdGhpcy5uelNlbGVjdE1vZGUgJiYgdGhpcy5ueklzRW5kIVtpbmRleCArIDFdLFxuICAgICAgW2BhbnQtc2VsZWN0LXRyZWUtaW5kZW50LXVuaXRgXTogdGhpcy5uelNlbGVjdE1vZGUsXG4gICAgICBbYGFudC1zZWxlY3QtdHJlZS1pbmRlbnQtdW5pdC1zdGFydGBdOiB0aGlzLm56U2VsZWN0TW9kZSAmJiB0aGlzLm56SXNTdGFydCFbaW5kZXggKyAxXSxcbiAgICAgIFtgYW50LXNlbGVjdC10cmVlLWluZGVudC11bml0LWVuZGBdOiB0aGlzLm56U2VsZWN0TW9kZSAmJiB0aGlzLm56SXNFbmQhW2luZGV4ICsgMV1cbiAgICB9O1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7fVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBjb25zdCB7IG56VHJlZUxldmVsIH0gPSBjaGFuZ2VzO1xuICAgIGlmIChuelRyZWVMZXZlbCkge1xuICAgICAgdGhpcy5saXN0T2ZVbml0ID0gWy4uLm5ldyBBcnJheShuelRyZWVMZXZlbC5jdXJyZW50VmFsdWUgfHwgMCldO1xuICAgIH1cbiAgfVxufVxuIl19