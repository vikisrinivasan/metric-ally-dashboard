/**
 * @fileoverview added by tsickle
 * Generated from: form-item.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Input, Renderer2, ViewEncapsulation } from '@angular/core';
import { warnDeprecation } from 'ng-zorro-antd/core/logger';
import { Subject } from 'rxjs';
/**
 * should add nz-row directive to host, track https://github.com/angular/angular/issues/8785 *
 */
import * as ɵngcc0 from '@angular/core';

var _c0 = ["*"];
var NzFormItemComponent = /** @class */ (function () {
    function NzFormItemComponent(elementRef, renderer, cdr) {
        this.cdr = cdr;
        this.status = null;
        this.hasFeedback = false;
        this.withHelpClass = false;
        this.destroy$ = new Subject();
        renderer.addClass(elementRef.nativeElement, 'ant-form-item');
    }
    Object.defineProperty(NzFormItemComponent.prototype, "nzFlex", {
        /**
         * @deprecated 10.0.0. 'nzFlex' is deprecated and going to be removed in 10.0.0.
         */
        set: /**
         * @deprecated 10.0.0. 'nzFlex' is deprecated and going to be removed in 10.0.0.
         * @param {?} _
         * @return {?}
         */
        function (_) {
            warnDeprecation("'nzFlex' is deprecated and going to be removed in 10.0.0.");
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    NzFormItemComponent.prototype.setWithHelpViaTips = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.withHelpClass = value;
        this.cdr.markForCheck();
    };
    /**
     * @param {?} status
     * @return {?}
     */
    NzFormItemComponent.prototype.setStatus = /**
     * @param {?} status
     * @return {?}
     */
    function (status) {
        this.status = status;
        this.cdr.markForCheck();
    };
    /**
     * @param {?} hasFeedback
     * @return {?}
     */
    NzFormItemComponent.prototype.setHasFeedback = /**
     * @param {?} hasFeedback
     * @return {?}
     */
    function (hasFeedback) {
        this.hasFeedback = hasFeedback;
        this.cdr.markForCheck();
    };
    /**
     * @return {?}
     */
    NzFormItemComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    /** @nocollapse */
    NzFormItemComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ChangeDetectorRef }
    ]; };
    NzFormItemComponent.propDecorators = {
        nzFlex: [{ type: Input }]
    };
NzFormItemComponent.ɵfac = function NzFormItemComponent_Factory(t) { return new (t || NzFormItemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
NzFormItemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NzFormItemComponent, selectors: [["nz-form-item"]], hostVars: 12, hostBindings: function NzFormItemComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("ant-form-item-has-success", ctx.status === "success")("ant-form-item-has-warning", ctx.status === "warning")("ant-form-item-has-error", ctx.status === "error")("ant-form-item-is-validating", ctx.status === "validating")("ant-form-item-has-feedback", ctx.hasFeedback && ctx.status)("ant-form-item-with-help", ctx.withHelpClass);
    } }, inputs: { nzFlex: "nzFlex" }, exportAs: ["nzFormItem"], ngContentSelectors: _c0, decls: 1, vars: 0, template: function NzFormItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzFormItemComponent, [{
        type: Component,
        args: [{
                selector: 'nz-form-item',
                exportAs: 'nzFormItem',
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                host: {
                    '[class.ant-form-item-has-success]': 'status === "success"',
                    '[class.ant-form-item-has-warning]': 'status === "warning"',
                    '[class.ant-form-item-has-error]': 'status === "error"',
                    '[class.ant-form-item-is-validating]': 'status === "validating"',
                    '[class.ant-form-item-has-feedback]': 'hasFeedback && status',
                    '[class.ant-form-item-with-help]': 'withHelpClass'
                },
                template: " <ng-content></ng-content> "
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ChangeDetectorRef }]; }, { nzFlex: [{
            type: Input
        }] }); })();
    return NzFormItemComponent;
}());
export { NzFormItemComponent };
if (false) {
    /** @type {?} */
    NzFormItemComponent.prototype.status;
    /** @type {?} */
    NzFormItemComponent.prototype.hasFeedback;
    /** @type {?} */
    NzFormItemComponent.prototype.withHelpClass;
    /**
     * @type {?}
     * @private
     */
    NzFormItemComponent.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    NzFormItemComponent.prototype.cdr;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsibmctem9ycm8tYW50ZC9mb3JtL2Zvcm0taXRlbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBS0EsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBRUwsU0FBUyxFQUNULGlCQUFpQixFQUNsQixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDNUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQjtBQUNHO0FBRUM7Ozs7QUFDSjtBQUVjLElBMkNaLDZCQUFZLFVBQXNCLEVBQUUsUUFBbUIsRUFBVSxHQUFzQjtBQUN6RixRQURtRSxRQUFHLEdBQUgsR0FBRyxDQUFtQjtBQUFDLFFBckJ4RixXQUFNLEdBQTRCLElBQUksQ0FBQztBQUN6QyxRQUFFLGdCQUFXLEdBQUcsS0FBSyxDQUFDO0FBQ3RCLFFBQUUsa0JBQWEsR0FBRyxLQUFLLENBQUM7QUFDeEIsUUFDVSxhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztBQUNuQyxRQWlCSSxRQUFRLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsZUFBZSxDQUFDLENBQUM7QUFDakUsSUFBRSxDQUFDO0FBQ0gsSUE1QkUsc0JBQWEsdUNBQU07QUFBSSxRQUh2QjtBQUNGO0FBRUEsV0FESztBQUNMO0FBQWlCO0FBQ3FEO0FBRy9EO0FBQXVCO0FBQzlCLFFBTEUsVUFBb0IsQ0FBVTtBQUNoQyxZQUFJLGVBQWUsQ0FBQywyREFBMkQsQ0FBQyxDQUFDO0FBQ2pGLFFBQUUsQ0FBQztBQUVIO0FBQTBCO0FBQ2YsT0FIUjtBQUNIO0FBQ087QUFBd0I7QUFDdkI7QUFBUSxJQUtkLGdEQUFrQjtBQUFPO0FBQ3JCO0FBQW1CO0FBQ3hCLElBRkMsVUFBbUIsS0FBYztBQUFJLFFBQ25DLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO0FBQy9CLFFBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUM1QixJQUFFLENBQUM7QUFFSDtBQUFRO0FBQXlCO0FBQW1CO0FBQzdDLElBREwsdUNBQVM7QUFBTztBQUF5QjtBQUNsQztBQUFRLElBRGYsVUFBVSxNQUErQjtBQUFJLFFBQzNDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0FBQ3pCLFFBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUM1QixJQUFFLENBQUM7QUFFSDtBQUFRO0FBQThCO0FBQzVCO0FBQVEsSUFEaEIsNENBQWM7QUFBTztBQUNqQjtBQUFtQjtBQUFRLElBRC9CLFVBQWUsV0FBb0I7QUFBSSxRQUNyQyxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztBQUNuQyxRQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDNUIsSUFBRSxDQUFDO0FBRUg7QUFBUTtBQUFtQjtBQUFRLElBSWpDLHlDQUFXO0FBQU87QUFDTDtBQUFRLElBRHJCO0FBQWMsUUFDWixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ3pCLFFBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUM3QixJQUFFLENBQUMsQ0FwQ0s7QUFBQztnQ0FoQlIsU0FBUyxTQUFDLGxEQWdCcUI7UUFmOUIsUUFBUSxFQUFFLGxCQWlCVyxnQkEvQnJCLFVBQVU7RUFjYyxzQkFDeEIseEJBZEEsZ0JBRUEsU0FBUztHQVlELEVBQUUsWUFBWSxqQkFYdEIsZ0JBTkEsaUJBQWlCO0dBa0JqQixIQWpCRDtZQWlCb0IsRUFBRSxLQUFLLHNCQUMxQix6Q0FsQlM7YUFrQk0sRUFBRSxmQWRkLHlCQThCRixLQUFLO0lBaEJrQyxDQUFDLExBZ0IvQjtJQWhCcUMsc0JBQy9DLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJLHNCQUNyQyxJQUFJLEVBQUUsMEJBQ0osbUNBQW1DLEVBQUUsc0JBQXNCLDBCQUMzRCxtQ0FBbUMsRUFBRTtTQUFzQiwwQkFDM0QsaUNBQWlDLEVBQUUsb0JBQW9CLDBCQUN2RCxxQ0FBcUMsRUFBRSx5QkFBeUIsMEJBQ2hFO21DQUFvQyxFQUFFLHVCQUF1QiwwQkFDN0QsaUNBQWlDLEVBQUUsZUFBZSxzQkFDbkQsc0JBQ0QsUUFBUSxFQUFFLDZCQUE2QixrQkFDeEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBS2lCO0FBQUMsSUFpQ25CLDBCQUFDO0FBQ0EsQ0FEQSxBQXJERCxJQXFEQztBQUNELFNBdENhLG1CQUFtQjtBQUFJO0FBQWE7QUFDOUMsSUFPRCxxQ0FBdUM7QUFDekM7QUFBcUIsSUFBbkIsMENBQW9CO0FBQ3RCO0FBQXFCLElBQW5CLDRDQUFzQjtBQUN4QjtBQUNPO0FBQWlCO0FBRXJCO0FBQVEsSUFGVCx1Q0FBaUM7QUFDbkM7QUFDTztBQUFpQjtBQUFnQjtBQUNyQyxJQWN3RCxrQ0FBOEI7QUFBQztBQUFFIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2dpdGh1Yi5jb20vTkctWk9SUk8vbmctem9ycm8tYW50ZC9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cblxuaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIFJlbmRlcmVyMixcbiAgVmlld0VuY2Fwc3VsYXRpb25cbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IHdhcm5EZXByZWNhdGlvbiB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZS9sb2dnZXInO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgdHlwZSBOekZvcm1Db250cm9sU3RhdHVzVHlwZSA9ICdzdWNjZXNzJyB8ICdlcnJvcicgfCAnd2FybmluZycgfCAndmFsaWRhdGluZycgfCBudWxsO1xuXG4vKiogc2hvdWxkIGFkZCBuei1yb3cgZGlyZWN0aXZlIHRvIGhvc3QsIHRyYWNrIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvaXNzdWVzLzg3ODUgKiovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduei1mb3JtLWl0ZW0nLFxuICBleHBvcnRBczogJ256Rm9ybUl0ZW0nLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLmFudC1mb3JtLWl0ZW0taGFzLXN1Y2Nlc3NdJzogJ3N0YXR1cyA9PT0gXCJzdWNjZXNzXCInLFxuICAgICdbY2xhc3MuYW50LWZvcm0taXRlbS1oYXMtd2FybmluZ10nOiAnc3RhdHVzID09PSBcIndhcm5pbmdcIicsXG4gICAgJ1tjbGFzcy5hbnQtZm9ybS1pdGVtLWhhcy1lcnJvcl0nOiAnc3RhdHVzID09PSBcImVycm9yXCInLFxuICAgICdbY2xhc3MuYW50LWZvcm0taXRlbS1pcy12YWxpZGF0aW5nXSc6ICdzdGF0dXMgPT09IFwidmFsaWRhdGluZ1wiJyxcbiAgICAnW2NsYXNzLmFudC1mb3JtLWl0ZW0taGFzLWZlZWRiYWNrXSc6ICdoYXNGZWVkYmFjayAmJiBzdGF0dXMnLFxuICAgICdbY2xhc3MuYW50LWZvcm0taXRlbS13aXRoLWhlbHBdJzogJ3dpdGhIZWxwQ2xhc3MnXG4gIH0sXG4gIHRlbXBsYXRlOiBgIDxuZy1jb250ZW50PjwvbmctY29udGVudD4gYFxufSlcbmV4cG9ydCBjbGFzcyBOekZvcm1JdGVtQ29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95LCBPbkRlc3Ryb3kge1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgMTAuMC4wLiAnbnpGbGV4JyBpcyBkZXByZWNhdGVkIGFuZCBnb2luZyB0byBiZSByZW1vdmVkIGluIDEwLjAuMC5cbiAgICovXG4gIEBJbnB1dCgpIHNldCBuekZsZXgoXzogYm9vbGVhbikge1xuICAgIHdhcm5EZXByZWNhdGlvbihgJ256RmxleCcgaXMgZGVwcmVjYXRlZCBhbmQgZ29pbmcgdG8gYmUgcmVtb3ZlZCBpbiAxMC4wLjAuYCk7XG4gIH1cblxuICBzdGF0dXM6IE56Rm9ybUNvbnRyb2xTdGF0dXNUeXBlID0gbnVsbDtcbiAgaGFzRmVlZGJhY2sgPSBmYWxzZTtcbiAgd2l0aEhlbHBDbGFzcyA9IGZhbHNlO1xuXG4gIHByaXZhdGUgZGVzdHJveSQgPSBuZXcgU3ViamVjdCgpO1xuXG4gIHNldFdpdGhIZWxwVmlhVGlwcyh2YWx1ZTogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMud2l0aEhlbHBDbGFzcyA9IHZhbHVlO1xuICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xuICB9XG5cbiAgc2V0U3RhdHVzKHN0YXR1czogTnpGb3JtQ29udHJvbFN0YXR1c1R5cGUpOiB2b2lkIHtcbiAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuXG4gIHNldEhhc0ZlZWRiYWNrKGhhc0ZlZWRiYWNrOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5oYXNGZWVkYmFjayA9IGhhc0ZlZWRiYWNrO1xuICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSBjZHI6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgcmVuZGVyZXIuYWRkQ2xhc3MoZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnYW50LWZvcm0taXRlbScpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5kZXN0cm95JC5uZXh0KCk7XG4gICAgdGhpcy5kZXN0cm95JC5jb21wbGV0ZSgpO1xuICB9XG59XG4iXX0=