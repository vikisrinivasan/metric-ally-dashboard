/**
 * @fileoverview added by tsickle
 * Generated from: src/cell/th-measure.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';
import { isNil } from 'ng-zorro-antd/core/util';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
var NzThMeasureDirective = /** @class */ (function () {
    function NzThMeasureDirective(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.changes$ = new Subject();
        this.nzWidth = null;
        this.colspan = null;
        this.colSpan = null;
        this.rowspan = null;
        this.rowSpan = null;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    NzThMeasureDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var nzWidth = changes.nzWidth, colspan = changes.colspan, rowspan = changes.rowspan, colSpan = changes.colSpan, rowSpan = changes.rowSpan;
        if (colspan || colSpan) {
            /** @type {?} */
            var col = this.colspan || this.colSpan;
            if (!isNil(col)) {
                this.renderer.setAttribute(this.elementRef.nativeElement, 'colspan', "" + col);
            }
            else {
                this.renderer.removeAttribute(this.elementRef.nativeElement, 'colspan');
            }
        }
        if (rowspan || rowSpan) {
            /** @type {?} */
            var row = this.rowspan || this.rowSpan;
            if (!isNil(row)) {
                this.renderer.setAttribute(this.elementRef.nativeElement, 'rowspan', "" + row);
            }
            else {
                this.renderer.removeAttribute(this.elementRef.nativeElement, 'rowspan');
            }
        }
        if (nzWidth || colspan) {
            this.changes$.next();
        }
    };
    /** @nocollapse */
    NzThMeasureDirective.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    NzThMeasureDirective.propDecorators = {
        nzWidth: [{ type: Input }],
        colspan: [{ type: Input }],
        colSpan: [{ type: Input }],
        rowspan: [{ type: Input }],
        rowSpan: [{ type: Input }]
    };
NzThMeasureDirective.ɵfac = function NzThMeasureDirective_Factory(t) { return new (t || NzThMeasureDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
NzThMeasureDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NzThMeasureDirective, selectors: [["th"]], inputs: { nzWidth: "nzWidth", colspan: "colspan", colSpan: "colSpan", rowspan: "rowspan", rowSpan: "rowSpan" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzThMeasureDirective, [{
        type: Directive,
        args: [{
                selector: 'th'
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { nzWidth: [{
            type: Input
        }], colspan: [{
            type: Input
        }], colSpan: [{
            type: Input
        }], rowspan: [{
            type: Input
        }], rowSpan: [{
            type: Input
        }] }); })();
    return NzThMeasureDirective;
}());
export { NzThMeasureDirective };
if (false) {
    /** @type {?} */
    NzThMeasureDirective.prototype.changes$;
    /** @type {?} */
    NzThMeasureDirective.prototype.nzWidth;
    /** @type {?} */
    NzThMeasureDirective.prototype.colspan;
    /** @type {?} */
    NzThMeasureDirective.prototype.colSpan;
    /** @type {?} */
    NzThMeasureDirective.prototype.rowspan;
    /** @type {?} */
    NzThMeasureDirective.prototype.rowSpan;
    /**
     * @type {?}
     * @private
     */
    NzThMeasureDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    NzThMeasureDirective.prototype.elementRef;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGgtbWVhc3VyZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIm5nLXpvcnJvLWFudGQvdGFibGUvc3JjL2NlbGwvdGgtbWVhc3VyZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBSUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFhLFNBQVMsRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDbEcsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ2hELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7O0FBRS9CO0FBR3VCLElBT3JCLDhCQUFvQixRQUFtQixFQUFVLFVBQXNCO0FBQUksUUFBdkQsYUFBUSxHQUFSLFFBQVEsQ0FBVztBQUFDLFFBQVMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtBQUFDLFFBTnhFLGFBQVEsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO0FBQzNCLFFBQVcsWUFBTyxHQUFrQixJQUFJLENBQUM7QUFDekMsUUFBVyxZQUFPLEdBQTJCLElBQUksQ0FBQztBQUNsRCxRQUFXLFlBQU8sR0FBMkIsSUFBSSxDQUFDO0FBQ2xELFFBQVcsWUFBTyxHQUEyQixJQUFJLENBQUM7QUFDbEQsUUFBVyxZQUFPLEdBQTJCLElBQUksQ0FBQztBQUNsRCxJQUE0RSxDQUFDO0FBQzdFO0FBQVE7QUFBMEI7QUFDM0I7QUFBUSxJQURiLDBDQUFXO0FBQU87QUFDcEI7QUFBbUI7QUFBUSxJQUR6QixVQUFZLE9BQXNCO0FBQUksUUFDNUIsSUFBQSx5QkFBTyxFQUFFLHlCQUFPLEVBQUUseUJBQU8sRUFBRSx5QkFBTyxFQUFFLHlCQUFPO0FBQUUsUUFDckQsSUFBSSxPQUFPLElBQUksT0FBTyxFQUFFO0FBQzVCO0FBQTZCLGdCQUFqQixHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTztBQUM5QyxZQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDdkIsZ0JBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsU0FBUyxFQUFFLEtBQUcsR0FBSyxDQUFDLENBQUM7QUFDdkYsYUFBTztBQUFDLGlCQUFLO0FBQ2IsZ0JBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDaEYsYUFBTztBQUNQLFNBQUs7QUFDTCxRQUFJLElBQUksT0FBTyxJQUFJLE9BQU8sRUFBRTtBQUM1QjtBQUE2QixnQkFBakIsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU87QUFDOUMsWUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQ3ZCLGdCQUFRLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLFNBQVMsRUFBRSxLQUFHLEdBQUssQ0FBQyxDQUFDO0FBQ3ZGLGFBQU87QUFBQyxpQkFBSztBQUNiLGdCQUFRLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ2hGLGFBQU87QUFDUCxTQUFLO0FBQ0wsUUFBSSxJQUFJLE9BQU8sSUFBSSxPQUFPLEVBQUU7QUFDNUIsWUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzNCLFNBQUs7QUFDTCxJQUFFLENBQUMsQ0E3Qk07QUFBQztpQ0FIVCxTQUFTLFNBQUMsbkRBR3NCO1FBRi9CLFFBQVEsRUFBRSxJQUFJLHRCQUlILGdCQVRxQyxTQUFTO1dBTTFELFhBTjhELGdCQUEzQyxVQUFVO0FBQUc7QUFBVTtBQUE0QywwQkFTcEYsS0FBSztBQUFLLDBCQUNWLEtBQUs7QUFBSywwQkFDVixLQUFLO0FBQUssMEJBQ1YsS0FBSztBQUFLLDBCQUNWLEtBQUs7QUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFNO0FBQUMsSUF3Qm5CLDJCQUFDO0FBQ0EsQ0FEQSxBQWpDRCxJQWlDQztBQUNELFNBL0JhLG9CQUFvQjtBQUFJO0FBQWE7QUFDcEMsSUFBWix3Q0FBeUI7QUFDM0I7QUFBcUIsSUFBbkIsdUNBQXVDO0FBQ3pDO0FBQXFCLElBQW5CLHVDQUFnRDtBQUNsRDtBQUFxQixJQUFuQix1Q0FBZ0Q7QUFDbEQ7QUFBcUIsSUFBbkIsdUNBQWdEO0FBQ2xEO0FBQXFCLElBQW5CLHVDQUFnRDtBQUNsRDtBQUFRO0FBQWlCO0FBQWdCO0FBQVEsSUFBbkMsd0NBQTJCO0FBQUM7QUFBUTtBQUFpQjtBQUM5RDtBQUFRLElBRDhCLDBDQUE4QjtBQUFDO0FBQUUiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9ORy1aT1JSTy9uZy16b3Jyby1hbnRkL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgT25DaGFuZ2VzLCBSZW5kZXJlcjIsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzTmlsIH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlL3V0aWwnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICd0aCdcbn0pXG5leHBvcnQgY2xhc3MgTnpUaE1lYXN1cmVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICBjaGFuZ2VzJCA9IG5ldyBTdWJqZWN0KCk7XG4gIEBJbnB1dCgpIG56V2lkdGg6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICBASW5wdXQoKSBjb2xzcGFuOiBzdHJpbmcgfCBudW1iZXIgfCBudWxsID0gbnVsbDtcbiAgQElucHV0KCkgY29sU3Bhbjogc3RyaW5nIHwgbnVtYmVyIHwgbnVsbCA9IG51bGw7XG4gIEBJbnB1dCgpIHJvd3NwYW46IHN0cmluZyB8IG51bWJlciB8IG51bGwgPSBudWxsO1xuICBASW5wdXQoKSByb3dTcGFuOiBzdHJpbmcgfCBudW1iZXIgfCBudWxsID0gbnVsbDtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLCBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHt9XG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBjb25zdCB7IG56V2lkdGgsIGNvbHNwYW4sIHJvd3NwYW4sIGNvbFNwYW4sIHJvd1NwYW4gfSA9IGNoYW5nZXM7XG4gICAgaWYgKGNvbHNwYW4gfHwgY29sU3Bhbikge1xuICAgICAgY29uc3QgY29sID0gdGhpcy5jb2xzcGFuIHx8IHRoaXMuY29sU3BhbjtcbiAgICAgIGlmICghaXNOaWwoY29sKSkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2NvbHNwYW4nLCBgJHtjb2x9YCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2NvbHNwYW4nKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHJvd3NwYW4gfHwgcm93U3Bhbikge1xuICAgICAgY29uc3Qgcm93ID0gdGhpcy5yb3dzcGFuIHx8IHRoaXMucm93U3BhbjtcbiAgICAgIGlmICghaXNOaWwocm93KSkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ3Jvd3NwYW4nLCBgJHtyb3d9YCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ3Jvd3NwYW4nKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG56V2lkdGggfHwgY29sc3Bhbikge1xuICAgICAgdGhpcy5jaGFuZ2VzJC5uZXh0KCk7XG4gICAgfVxuICB9XG59XG4iXX0=