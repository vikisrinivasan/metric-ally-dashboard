/**
 * @fileoverview added by tsickle
 * Generated from: src/cell/th-selection.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __decorate, __metadata } from "tslib";
/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
/* tslint:disable:component-selector */
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { InputBoolean } from 'ng-zorro-antd/core/util';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../addon/selection.component';

var _c0 = ["nzSelections", ""];
var _c1 = ["*"];
var NzThSelectionComponent = /** @class */ (function () {
    function NzThSelectionComponent() {
        this.nzSelections = [];
        this.nzChecked = false;
        this.nzDisabled = false;
        this.nzIndeterminate = false;
        this.nzShowCheckbox = false;
        this.nzShowRowSelection = false;
        this.nzCheckedChange = new EventEmitter();
        this.nzSortChangeWithKey = new EventEmitter();
        this.isNzShowExpandChanged = false;
        this.isNzShowCheckboxChanged = false;
    }
    /**
     * @param {?} checked
     * @return {?}
     */
    NzThSelectionComponent.prototype.onCheckedChange = /**
     * @param {?} checked
     * @return {?}
     */
    function (checked) {
        this.nzChecked = checked;
        this.nzCheckedChange.emit(checked);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NzThSelectionComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var isFirstChange = (/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return value && value.firstChange && value.currentValue !== undefined; });
        var nzChecked = changes.nzChecked, nzSelections = changes.nzSelections, nzShowExpand = changes.nzShowExpand, nzShowCheckbox = changes.nzShowCheckbox;
        if (nzShowExpand) {
            this.isNzShowExpandChanged = true;
        }
        if (nzShowCheckbox) {
            this.isNzShowCheckboxChanged = true;
        }
        if (isFirstChange(nzSelections) && !this.isNzShowExpandChanged) {
            this.nzShowRowSelection = true;
        }
        if (isFirstChange(nzChecked) && !this.isNzShowCheckboxChanged) {
            this.nzShowCheckbox = true;
        }
    };
    NzThSelectionComponent.propDecorators = {
        nzSelections: [{ type: Input }],
        nzChecked: [{ type: Input }],
        nzDisabled: [{ type: Input }],
        nzIndeterminate: [{ type: Input }],
        nzShowCheckbox: [{ type: Input }],
        nzShowRowSelection: [{ type: Input }],
        nzCheckedChange: [{ type: Output }],
        nzSortChangeWithKey: [{ type: Output }]
    };
    __decorate([
        InputBoolean(),
        __metadata("design:type", Object)
    ], NzThSelectionComponent.prototype, "nzShowCheckbox", void 0);
    __decorate([
        InputBoolean(),
        __metadata("design:type", Object)
    ], NzThSelectionComponent.prototype, "nzShowRowSelection", void 0);
NzThSelectionComponent.ɵfac = function NzThSelectionComponent_Factory(t) { return new (t || NzThSelectionComponent)(); };
NzThSelectionComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NzThSelectionComponent, selectors: [["th", "nzSelections", ""], ["th", "nzChecked", ""], ["th", "nzShowCheckbox", ""], ["th", "nzShowRowSelection", ""]], hostVars: 2, hostBindings: function NzThSelectionComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("ant-table-selection-column", true);
    } }, inputs: { nzSelections: "nzSelections", nzChecked: "nzChecked", nzDisabled: "nzDisabled", nzIndeterminate: "nzIndeterminate", nzShowCheckbox: "nzShowCheckbox", nzShowRowSelection: "nzShowRowSelection" }, outputs: { nzCheckedChange: "nzCheckedChange", nzSortChangeWithKey: "nzSortChangeWithKey" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c0, ngContentSelectors: _c1, decls: 2, vars: 6, consts: [[3, "checked", "disabled", "indeterminate", "listOfSelections", "showCheckbox", "showRowSelection", "checkedChange"]], template: function NzThSelectionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "nz-table-selection", 0);
        ɵngcc0.ɵɵlistener("checkedChange", function NzThSelectionComponent_Template_nz_table_selection_checkedChange_0_listener($event) { return ctx.onCheckedChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵprojection(1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("checked", ctx.nzChecked)("disabled", ctx.nzDisabled)("indeterminate", ctx.nzIndeterminate)("listOfSelections", ctx.nzSelections)("showCheckbox", ctx.nzShowCheckbox)("showRowSelection", ctx.nzShowRowSelection);
    } }, directives: [ɵngcc1.NzTableSelectionComponent], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzThSelectionComponent, [{
        type: Component,
        args: [{
                selector: 'th[nzSelections],th[nzChecked],th[nzShowCheckbox],th[nzShowRowSelection]',
                preserveWhitespaces: false,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: "\n    <nz-table-selection\n      [checked]=\"nzChecked\"\n      [disabled]=\"nzDisabled\"\n      [indeterminate]=\"nzIndeterminate\"\n      [listOfSelections]=\"nzSelections\"\n      [showCheckbox]=\"nzShowCheckbox\"\n      [showRowSelection]=\"nzShowRowSelection\"\n      (checkedChange)=\"onCheckedChange($event)\"\n    ></nz-table-selection>\n    <ng-content></ng-content>\n  ",
                host: {
                    '[class.ant-table-selection-column]': 'true'
                }
            }]
    }], function () { return []; }, { nzSelections: [{
            type: Input
        }], nzChecked: [{
            type: Input
        }], nzDisabled: [{
            type: Input
        }], nzIndeterminate: [{
            type: Input
        }], nzShowCheckbox: [{
            type: Input
        }], nzShowRowSelection: [{
            type: Input
        }], nzCheckedChange: [{
            type: Output
        }], nzSortChangeWithKey: [{
            type: Output
        }] }); })();
    return NzThSelectionComponent;
}());
export { NzThSelectionComponent };
if (false) {
    /** @type {?} */
    NzThSelectionComponent.ngAcceptInputType_nzShowCheckbox;
    /** @type {?} */
    NzThSelectionComponent.ngAcceptInputType_nzShowRowSelection;
    /** @type {?} */
    NzThSelectionComponent.prototype.nzSelections;
    /** @type {?} */
    NzThSelectionComponent.prototype.nzChecked;
    /** @type {?} */
    NzThSelectionComponent.prototype.nzDisabled;
    /** @type {?} */
    NzThSelectionComponent.prototype.nzIndeterminate;
    /** @type {?} */
    NzThSelectionComponent.prototype.nzShowCheckbox;
    /** @type {?} */
    NzThSelectionComponent.prototype.nzShowRowSelection;
    /** @type {?} */
    NzThSelectionComponent.prototype.nzCheckedChange;
    /** @type {?} */
    NzThSelectionComponent.prototype.nzSortChangeWithKey;
    /**
     * @type {?}
     * @private
     */
    NzThSelectionComponent.prototype.isNzShowExpandChanged;
    /**
     * @type {?}
     * @private
     */
    NzThSelectionComponent.prototype.isNzShowCheckboxChanged;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGgtc2VsZWN0aW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsibmctem9ycm8tYW50ZC90YWJsZS9zcmMvY2VsbC90aC1zZWxlY3Rpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBS0EsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsWUFBWSxFQUNaLEtBQUssRUFFTCxNQUFNLEVBR04saUJBQWlCLEVBQ2xCLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQzs7Ozs7O0FBRXZEO0FBQzZDLElBRDdDO0FBQ3VCLFFBd0JaLGlCQUFZLEdBQXVFLEVBQUUsQ0FBQztBQUNqRyxRQUFXLGNBQVMsR0FBRyxLQUFLLENBQUM7QUFDN0IsUUFBVyxlQUFVLEdBQUcsS0FBSyxDQUFDO0FBQzlCLFFBQVcsb0JBQWUsR0FBRyxLQUFLLENBQUM7QUFDbkMsUUFBMkIsbUJBQWMsR0FBRyxLQUFLLENBQUM7QUFDbEQsUUFBMkIsdUJBQWtCLEdBQUcsS0FBSyxDQUFDO0FBQ3RELFFBQXFCLG9CQUFlLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztBQUNuRSxRQUFxQix3QkFBbUIsR0FBRyxJQUFJLFlBQVksRUFBeUMsQ0FBQztBQUNyRyxRQUNVLDBCQUFxQixHQUFHLEtBQUssQ0FBQztBQUN4QyxRQUFVLDRCQUF1QixHQUFHLEtBQUssQ0FBQztBQUMxQyxJQXNCQSxDQUFDO0FBQ0Q7QUFBUTtBQUEwQjtBQUFtQjtBQUFRLElBdEIzRCxnREFBZTtBQUFPO0FBQ2xCO0FBQW1CO0FBQ3RCLElBRkQsVUFBZ0IsT0FBZ0I7QUFBSSxRQUNsQyxJQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQztBQUM3QixRQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3ZDLElBQUUsQ0FBQztBQUVIO0FBQVE7QUFBMEI7QUFDM0I7QUFBUSxJQURiLDRDQUFXO0FBQU87QUFDcEI7QUFBbUI7QUFBUSxJQUR6QixVQUFZLE9BQXNCO0FBQUk7QUFDckIsWUFBVCxhQUFhO0FBQVE7QUFBNEI7QUFBdUI7QUFBWSxRQUFwRSxVQUFDLEtBQW1CLElBQUssT0FBQSxLQUFLLElBQUksS0FBSyxDQUFDLFdBQVcsSUFBSSxLQUFLLENBQUMsWUFBWSxLQUFLLFNBQVMsRUFBOUQsQ0FBOEQsQ0FBQTtBQUNqSCxRQUFZLElBQUEsNkJBQVMsRUFBRSxtQ0FBWSxFQUFFLG1DQUFZLEVBQUUsdUNBQWM7QUFBRSxRQUMvRCxJQUFJLFlBQVksRUFBRTtBQUN0QixZQUFNLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUM7QUFDeEMsU0FBSztBQUNMLFFBQUksSUFBSSxjQUFjLEVBQUU7QUFDeEIsWUFBTSxJQUFJLENBQUMsdUJBQXVCLEdBQUcsSUFBSSxDQUFDO0FBQzFDLFNBQUs7QUFDTCxRQUFJLElBQUksYUFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFO0FBQ3BFLFlBQU0sSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQztBQUNyQyxTQUFLO0FBQ0wsUUFBSSxJQUFJLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsRUFBRTtBQUNuRSxZQUFNLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO0FBQ2pDLFNBQUs7QUFDTCxJQUFFLENBQUMsQ0FwQ0s7QUFBQztZQXJCUixTQUFTLFNBQUMsOUJBcUI0QywrQkFJcEQsS0FBSztXQXhCTixRQUFRLEVBQUUsckJBd0JDLDRCQUNWLEtBQUs7QUFBSyw2QkFDVixLQUFLO2tCQTFCOEUsc0JBQ3BGLHhDQXlCVyxrQ0FDVixLQUFLO2VBMUJhLEVBQUUsS0FBSyx0QkEwQmYsaUNBQ1YsS0FBSztDQTFCTixhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSSx0Q0EwQjFCLHFDQUNWLEtBQUs7YUExQk4sZUFBZSxFQUFFLDlCQTBCTixrQ0FDVixNQUFNO1FBM0JpQyxDQUFDLE1BQU0sc0JBQy9DLFFBQVEsRUFBRSwvQ0EwQkUsc0NBQ1gsTUFBTTtBQUFJO0FBQU8sSUFITztBQUFhLFFBQTVCLFlBQVksRUFBRTtBQUFFO0FBQ1Qsa0VBRCtCO0FBQ2pELElBQTBCO0FBQWEsUUFBNUIsWUFBWSxFQUFFO0FBQUU7QUFDYixzRUFEdUM7bUVBZG5ELHNCQUNELElBQUksRUFBRSwwQkFDSjttQ0FBb0MsRUFBRSxNQUFNLHNCQUM3QyxrQkFDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQVdEO0FBQUMsSUEyQkQsNkJBQUM7QUFDQSxDQURBLEFBMURELElBMERDO0FBQ0QsU0F0Q2Esc0JBQXNCO0FBQUk7QUFBYTtBQUN0QyxJQUFaLHdEQUFzRDtBQUN4RDtBQUFxQixJQUFuQiw0REFBMEQ7QUFDNUQ7QUFDb0IsSUFBbEIsOENBQStGO0FBQ2pHO0FBQXFCLElBQW5CLDJDQUEyQjtBQUM3QjtBQUFxQixJQUFuQiw0Q0FBNEI7QUFDOUI7QUFBcUIsSUFBbkIsaURBQWlDO0FBQ25DO0FBQXFCLElBQW5CLGdEQUFnRDtBQUNsRDtBQUFxQixJQUFuQixvREFBb0Q7QUFDdEQ7QUFBcUIsSUFBbkIsaURBQWlFO0FBQ25FO0FBQXFCLElBQW5CLHFEQUFtRztBQUNyRztBQUNPO0FBQWlCO0FBQWdCO0FBQ2pDLElBREwsdURBQXNDO0FBQ3hDO0FBQVE7QUFBaUI7QUFBZ0I7QUFFcEMsSUFGSCx5REFBd0M7QUFDMUM7QUFDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG4vKiB0c2xpbnQ6ZGlzYWJsZTpjb21wb25lbnQtc2VsZWN0b3IgKi9cbmltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgT3V0cHV0LFxuICBTaW1wbGVDaGFuZ2UsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIFZpZXdFbmNhcHN1bGF0aW9uXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQm9vbGVhbklucHV0LCBOelNhZmVBbnkgfSBmcm9tICduZy16b3Jyby1hbnRkL2NvcmUvdHlwZXMnO1xuaW1wb3J0IHsgSW5wdXRCb29sZWFuIH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlL3V0aWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0aFtuelNlbGVjdGlvbnNdLHRoW256Q2hlY2tlZF0sdGhbbnpTaG93Q2hlY2tib3hdLHRoW256U2hvd1Jvd1NlbGVjdGlvbl0nLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiBgXG4gICAgPG56LXRhYmxlLXNlbGVjdGlvblxuICAgICAgW2NoZWNrZWRdPVwibnpDaGVja2VkXCJcbiAgICAgIFtkaXNhYmxlZF09XCJuekRpc2FibGVkXCJcbiAgICAgIFtpbmRldGVybWluYXRlXT1cIm56SW5kZXRlcm1pbmF0ZVwiXG4gICAgICBbbGlzdE9mU2VsZWN0aW9uc109XCJuelNlbGVjdGlvbnNcIlxuICAgICAgW3Nob3dDaGVja2JveF09XCJuelNob3dDaGVja2JveFwiXG4gICAgICBbc2hvd1Jvd1NlbGVjdGlvbl09XCJuelNob3dSb3dTZWxlY3Rpb25cIlxuICAgICAgKGNoZWNrZWRDaGFuZ2UpPVwib25DaGVja2VkQ2hhbmdlKCRldmVudClcIlxuICAgID48L256LXRhYmxlLXNlbGVjdGlvbj5cbiAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gIGAsXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLmFudC10YWJsZS1zZWxlY3Rpb24tY29sdW1uXSc6ICd0cnVlJ1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIE56VGhTZWxlY3Rpb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfbnpTaG93Q2hlY2tib3g6IEJvb2xlYW5JbnB1dDtcbiAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256U2hvd1Jvd1NlbGVjdGlvbjogQm9vbGVhbklucHV0O1xuXG4gIEBJbnB1dCgpIG56U2VsZWN0aW9uczogQXJyYXk8eyB0ZXh0OiBzdHJpbmc7IG9uU2VsZWN0KC4uLmFyZ3M6IE56U2FmZUFueVtdKTogTnpTYWZlQW55IH0+ID0gW107XG4gIEBJbnB1dCgpIG56Q2hlY2tlZCA9IGZhbHNlO1xuICBASW5wdXQoKSBuekRpc2FibGVkID0gZmFsc2U7XG4gIEBJbnB1dCgpIG56SW5kZXRlcm1pbmF0ZSA9IGZhbHNlO1xuICBASW5wdXQoKSBASW5wdXRCb29sZWFuKCkgbnpTaG93Q2hlY2tib3ggPSBmYWxzZTtcbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIG56U2hvd1Jvd1NlbGVjdGlvbiA9IGZhbHNlO1xuICBAT3V0cHV0KCkgcmVhZG9ubHkgbnpDaGVja2VkQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuICBAT3V0cHV0KCkgcmVhZG9ubHkgbnpTb3J0Q2hhbmdlV2l0aEtleSA9IG5ldyBFdmVudEVtaXR0ZXI8eyBrZXk6IHN0cmluZzsgdmFsdWU6IHN0cmluZyB8IG51bGwgfT4oKTtcblxuICBwcml2YXRlIGlzTnpTaG93RXhwYW5kQ2hhbmdlZCA9IGZhbHNlO1xuICBwcml2YXRlIGlzTnpTaG93Q2hlY2tib3hDaGFuZ2VkID0gZmFsc2U7XG5cbiAgb25DaGVja2VkQ2hhbmdlKGNoZWNrZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLm56Q2hlY2tlZCA9IGNoZWNrZWQ7XG4gICAgdGhpcy5uekNoZWNrZWRDaGFuZ2UuZW1pdChjaGVja2VkKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBjb25zdCBpc0ZpcnN0Q2hhbmdlID0gKHZhbHVlOiBTaW1wbGVDaGFuZ2UpID0+IHZhbHVlICYmIHZhbHVlLmZpcnN0Q2hhbmdlICYmIHZhbHVlLmN1cnJlbnRWYWx1ZSAhPT0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IHsgbnpDaGVja2VkLCBuelNlbGVjdGlvbnMsIG56U2hvd0V4cGFuZCwgbnpTaG93Q2hlY2tib3ggfSA9IGNoYW5nZXM7XG4gICAgaWYgKG56U2hvd0V4cGFuZCkge1xuICAgICAgdGhpcy5pc056U2hvd0V4cGFuZENoYW5nZWQgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAobnpTaG93Q2hlY2tib3gpIHtcbiAgICAgIHRoaXMuaXNOelNob3dDaGVja2JveENoYW5nZWQgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoaXNGaXJzdENoYW5nZShuelNlbGVjdGlvbnMpICYmICF0aGlzLmlzTnpTaG93RXhwYW5kQ2hhbmdlZCkge1xuICAgICAgdGhpcy5uelNob3dSb3dTZWxlY3Rpb24gPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoaXNGaXJzdENoYW5nZShuekNoZWNrZWQpICYmICF0aGlzLmlzTnpTaG93Q2hlY2tib3hDaGFuZ2VkKSB7XG4gICAgICB0aGlzLm56U2hvd0NoZWNrYm94ID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==