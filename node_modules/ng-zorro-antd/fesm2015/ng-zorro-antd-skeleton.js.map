{"version":3,"file":"ng-zorro-antd-skeleton.js","sources":["ng-zorro-antd/skeleton/skeleton.component.ts","ng-zorro-antd/skeleton/skeleton-element.component.ts","ng-zorro-antd/skeleton/skeleton.module.ts","ng-zorro-antd/skeleton/skeleton.type.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Renderer2,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { toCssPixel } from 'ng-zorro-antd/core/util';\nimport { NzSkeletonAvatar, NzSkeletonAvatarShape, NzSkeletonAvatarSize, NzSkeletonParagraph, NzSkeletonTitle } from './skeleton.type';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  selector: 'nz-skeleton',\n  exportAs: 'nzSkeleton',\n  host: {\n    '[class.ant-skeleton-with-avatar]': '!!nzAvatar',\n    '[class.ant-skeleton-active]': 'nzActive'\n  },\n  template: `\n    <ng-container *ngIf=\"nzLoading\">\n      <div class=\"ant-skeleton-header\" *ngIf=\"!!nzAvatar\">\n        <nz-skeleton-element nzType=\"avatar\" [nzSize]=\"avatar.size\" [nzShape]=\"avatar.shape\"></nz-skeleton-element>\n      </div>\n      <div class=\"ant-skeleton-content\">\n        <h3 *ngIf=\"!!nzTitle\" class=\"ant-skeleton-title\" [style.width]=\"toCSSUnit(title.width)\"></h3>\n        <ul *ngIf=\"!!nzParagraph\" class=\"ant-skeleton-paragraph\">\n          <li *ngFor=\"let row of rowsList; let i = index\" [style.width]=\"toCSSUnit(widthList[i])\"></li>\n        </ul>\n      </div>\n    </ng-container>\n    <ng-container *ngIf=\"!nzLoading\">\n      <ng-content></ng-content>\n    </ng-container>\n  `\n})\nexport class NzSkeletonComponent implements OnInit, OnChanges {\n  @Input() nzActive = false;\n  @Input() nzLoading = true;\n  @Input() nzTitle: NzSkeletonTitle | boolean = true;\n  @Input() nzAvatar: NzSkeletonAvatar | boolean = false;\n  @Input() nzParagraph: NzSkeletonParagraph | boolean = true;\n\n  title!: NzSkeletonTitle;\n  avatar!: NzSkeletonAvatar;\n  paragraph!: NzSkeletonParagraph;\n  rowsList: number[] = [];\n  widthList: Array<number | string> = [];\n\n  constructor(private cdr: ChangeDetectorRef, renderer: Renderer2, elementRef: ElementRef) {\n    renderer.addClass(elementRef.nativeElement, 'ant-skeleton');\n  }\n\n  toCSSUnit(value: number | string = ''): string {\n    return toCssPixel(value);\n  }\n\n  private getTitleProps(): NzSkeletonTitle {\n    const hasAvatar: boolean = !!this.nzAvatar;\n    const hasParagraph: boolean = !!this.nzParagraph;\n    let width = '';\n    if (!hasAvatar && hasParagraph) {\n      width = '38%';\n    } else if (hasAvatar && hasParagraph) {\n      width = '50%';\n    }\n    return { width, ...this.getProps(this.nzTitle) };\n  }\n\n  private getAvatarProps(): NzSkeletonAvatar {\n    const shape: NzSkeletonAvatarShape = !!this.nzTitle && !this.nzParagraph ? 'square' : 'circle';\n    const size: NzSkeletonAvatarSize = 'large';\n    return { shape, size, ...this.getProps(this.nzAvatar) };\n  }\n\n  private getParagraphProps(): NzSkeletonParagraph {\n    const hasAvatar: boolean = !!this.nzAvatar;\n    const hasTitle: boolean = !!this.nzTitle;\n    const basicProps: NzSkeletonParagraph = {};\n    // Width\n    if (!hasAvatar || !hasTitle) {\n      basicProps.width = '61%';\n    }\n    // Rows\n    if (!hasAvatar && hasTitle) {\n      basicProps.rows = 3;\n    } else {\n      basicProps.rows = 2;\n    }\n    return { ...basicProps, ...this.getProps(this.nzParagraph) };\n  }\n\n  private getProps<T>(prop: T | boolean | undefined): T | {} {\n    return prop && typeof prop === 'object' ? prop : {};\n  }\n\n  private getWidthList(): Array<number | string> {\n    const { width, rows } = this.paragraph;\n    let widthList: Array<string | number> = [];\n    if (width && Array.isArray(width)) {\n      widthList = width;\n    } else if (width && !Array.isArray(width)) {\n      widthList = [];\n      widthList[rows! - 1] = width;\n    }\n    return widthList;\n  }\n\n  private updateProps(): void {\n    this.title = this.getTitleProps();\n    this.avatar = this.getAvatarProps();\n    this.paragraph = this.getParagraphProps();\n    this.rowsList = [...Array(this.paragraph.rows)];\n    this.widthList = this.getWidthList();\n    this.cdr.markForCheck();\n  }\n\n  ngOnInit(): void {\n    this.updateProps();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.nzTitle || changes.nzAvatar || changes.nzParagraph) {\n      this.updateProps();\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { ChangeDetectionStrategy, Component, Directive, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport {\n  NzSkeletonAvatarShape,\n  NzSkeletonAvatarSize,\n  NzSkeletonButtonShape,\n  NzSkeletonButtonSize,\n  NzSkeletonInputSize\n} from './skeleton.type';\n\n@Directive({\n  selector: 'nz-skeleton-element',\n  host: {\n    '[class.ant-skeleton]': 'true',\n    '[class.ant-skeleton-element]': 'true',\n    '[class.ant-skeleton-active]': 'nzActive'\n  }\n})\nexport class NzSkeletonElementDirective {\n  @Input() nzActive: boolean = false;\n  @Input() nzType!: 'button' | 'input' | 'avatar';\n}\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'nz-skeleton-element[nzType=\"button\"]',\n  template: `\n    <span\n      [class.ant-skeleton-button]=\"true\"\n      [class.ant-skeleton-button-round]=\"nzShape === 'round'\"\n      [class.ant-skeleton-button-circle]=\"nzShape === 'circle'\"\n      [class.ant-skeleton-button-lg]=\"nzSize === 'large'\"\n      [class.ant-skeleton-button-sm]=\"nzSize === 'small'\"\n    >\n    </span>\n  `\n})\nexport class NzSkeletonElementButtonComponent {\n  @Input() nzShape: NzSkeletonButtonShape = 'default';\n  @Input() nzSize: NzSkeletonButtonSize = 'default';\n}\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'nz-skeleton-element[nzType=\"avatar\"]',\n  template: `\n    <span\n      [class.ant-skeleton-avatar]=\"true\"\n      [class.ant-skeleton-avatar-square]=\"nzShape === 'square'\"\n      [class.ant-skeleton-avatar-circle]=\"nzShape === 'circle'\"\n      [class.ant-skeleton-avatar-lg]=\"nzSize === 'large'\"\n      [class.ant-skeleton-avatar-sm]=\"nzSize === 'small'\"\n      [ngStyle]=\"styleMap\"\n    >\n    </span>\n  `\n})\nexport class NzSkeletonElementAvatarComponent implements OnChanges {\n  static ngAcceptInputType_nzShape: NzSkeletonAvatarShape | undefined | null;\n  static ngAcceptInputType_AvatarSize: NzSkeletonAvatarSize | undefined | null;\n\n  @Input() nzShape: NzSkeletonAvatarShape = 'circle';\n  @Input() nzSize: NzSkeletonAvatarSize = 'default';\n\n  styleMap = {};\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.nzSize && typeof this.nzSize === 'number') {\n      const sideLength = `${this.nzSize}px`;\n      this.styleMap = { width: sideLength, height: sideLength, 'line-height': sideLength };\n    } else {\n      this.styleMap = {};\n    }\n  }\n}\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'nz-skeleton-element[nzType=\"input\"]',\n  template: `\n    <span\n      [class.ant-skeleton-input]=\"true\"\n      [class.ant-skeleton-input-lg]=\"nzSize === 'large'\"\n      [class.ant-skeleton-input-sm]=\"nzSize === 'small'\"\n    >\n    </span>\n  `\n})\nexport class NzSkeletonElementInputComponent {\n  @Input() nzSize: NzSkeletonInputSize = 'default';\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  NzSkeletonElementAvatarComponent,\n  NzSkeletonElementButtonComponent,\n  NzSkeletonElementDirective,\n  NzSkeletonElementInputComponent\n} from './skeleton-element.component';\nimport { NzSkeletonComponent } from './skeleton.component';\n\n@NgModule({\n  declarations: [\n    NzSkeletonComponent,\n    NzSkeletonElementDirective,\n    NzSkeletonElementButtonComponent,\n    NzSkeletonElementAvatarComponent,\n    NzSkeletonElementInputComponent\n  ],\n  imports: [CommonModule],\n  exports: [\n    NzSkeletonComponent,\n    NzSkeletonElementDirective,\n    NzSkeletonElementButtonComponent,\n    NzSkeletonElementAvatarComponent,\n    NzSkeletonElementInputComponent\n  ]\n})\nexport class NzSkeletonModule {}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nexport type NzSkeletonParagraphWidth = number | string | Array<number | string>;\nexport type NzSkeletonButtonShape = 'circle' | 'round' | 'default';\nexport type NzSkeletonAvatarShape = 'square' | 'circle';\nexport type NzSkeletonInputSize = 'large' | 'small' | 'default';\nexport type NzSkeletonButtonSize = NzSkeletonInputSize;\nexport type NzSkeletonAvatarSize = NzSkeletonInputSize | number;\n\nexport interface NzSkeletonAvatar {\n  size?: NzSkeletonAvatarSize;\n  shape?: NzSkeletonAvatarShape;\n}\n\nexport interface NzSkeletonTitle {\n  width?: number | string;\n}\n\nexport interface NzSkeletonParagraph {\n  rows?: number;\n  width?: NzSkeletonParagraphWidth;\n}\n"]}