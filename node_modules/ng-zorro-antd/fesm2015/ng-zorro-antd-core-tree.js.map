{"version":3,"file":"ng-zorro-antd-core-tree.js","sources":["ng-zorro-antd/core/tree/nz-tree-base-node.ts","ng-zorro-antd/core/tree/nz-tree-base.definitions.ts","ng-zorro-antd/core/tree/nz-tree-base-util.ts","ng-zorro-antd/core/tree/nz-tree-base.service.ts","ng-zorro-antd/core/tree/nz-tree-service.resolver.ts","ng-zorro-antd/core/tree/nz-tree-base.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { warnDeprecation } from 'ng-zorro-antd/core/logger';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { NzTreeNodeBaseComponent } from './nz-tree-base.definitions';\nimport { NzTreeBaseService } from './nz-tree-base.service';\n\nexport type NzTreeNodeKey = string | number;\n\nexport interface FlattenNode {\n  parent: FlattenNode | null;\n  children: FlattenNode[];\n  pos: string;\n  data: NzTreeNode;\n  isStart: boolean[];\n  isEnd: boolean[];\n}\n\nexport interface NzTreeNodeOptions {\n  title: string;\n  key: string;\n  icon?: string;\n  isLeaf?: boolean;\n  checked?: boolean;\n  selected?: boolean;\n  selectable?: boolean;\n  disabled?: boolean;\n  disableCheckbox?: boolean;\n  expanded?: boolean;\n  children?: NzTreeNodeOptions[];\n\n  [key: string]: NzSafeAny;\n}\n\nexport class NzTreeNode {\n  private _title: string = '';\n  key!: string;\n  level: number = 0;\n  origin!: NzTreeNodeOptions;\n  // Parent Node\n  parentNode: NzTreeNode | null = null;\n  private _icon: string = '';\n  private _children: NzTreeNode[] = [];\n  private _isLeaf: boolean = false;\n  private _isChecked: boolean = false;\n  /**\n   * @deprecated Maybe removed in next major version, use isChecked instead\n   */\n  private _isAllChecked: boolean = false;\n  private _isSelectable: boolean = false;\n  private _isDisabled: boolean = false;\n  private _isDisableCheckbox: boolean = false;\n  private _isExpanded: boolean = false;\n  private _isHalfChecked: boolean = false;\n  private _isSelected: boolean = false;\n  private _isLoading: boolean = false;\n  canHide: boolean = false;\n  isMatched: boolean = false;\n\n  service: NzTreeBaseService | null = null;\n  component!: NzTreeNodeBaseComponent;\n\n  /** New added in Tree for easy data access */\n  isStart?: boolean[];\n  isEnd?: boolean[];\n\n  get treeService(): NzTreeBaseService | null {\n    return this.service || (this.parentNode && this.parentNode.treeService);\n  }\n\n  /**\n   * Init nzTreeNode\n   * @param option: user's input\n   * @param parent\n   * @param service: base nzTreeService\n   */\n  constructor(option: NzTreeNodeOptions | NzTreeNode, parent: NzTreeNode | null = null, service: NzTreeBaseService | null = null) {\n    if (option instanceof NzTreeNode) {\n      return option;\n    }\n    this.service = service || null;\n    this.origin = option;\n    this.key = option.key;\n    this.parentNode = parent;\n    this._title = option.title || '---';\n    this._icon = option.icon || '';\n    this._isLeaf = option.isLeaf || false;\n    this._children = [];\n    // option params\n    this._isChecked = option.checked || false;\n    this._isSelectable = option.disabled || option.selectable !== false;\n    this._isDisabled = option.disabled || false;\n    this._isDisableCheckbox = option.disableCheckbox || false;\n    this._isExpanded = option.isLeaf ? false : option.expanded || false;\n    this._isHalfChecked = false;\n    this._isSelected = (!option.disabled && option.selected) || false;\n    this._isLoading = false;\n    this.isMatched = false;\n\n    /**\n     * parent's checked status will affect children while initializing\n     */\n    if (parent) {\n      this.level = parent.level + 1;\n    } else {\n      this.level = 0;\n    }\n    if (typeof option.children !== 'undefined' && option.children !== null) {\n      option.children.forEach(nodeOptions => {\n        const s = this.treeService;\n        if (s && !s.isCheckStrictly && option.checked && !option.disabled && !nodeOptions.disabled && !nodeOptions.disableCheckbox) {\n          nodeOptions.checked = option.checked;\n        }\n        this._children.push(new NzTreeNode(nodeOptions, this));\n      });\n    }\n  }\n\n  /**\n   * auto generate\n   * get\n   * set\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  set title(value: string) {\n    this._title = value;\n    this.update();\n  }\n\n  get icon(): string {\n    return this._icon;\n  }\n\n  set icon(value: string) {\n    this._icon = value;\n    this.update();\n  }\n\n  get children(): NzTreeNode[] {\n    return this._children;\n  }\n\n  set children(value: NzTreeNode[]) {\n    this._children = value;\n    this.update();\n  }\n\n  get isLeaf(): boolean {\n    return this._isLeaf;\n  }\n\n  set isLeaf(value: boolean) {\n    this._isLeaf = value;\n    this.update();\n  }\n\n  get isChecked(): boolean {\n    return this._isChecked;\n  }\n\n  set isChecked(value: boolean) {\n    this._isChecked = value;\n    this._isAllChecked = value;\n    this.origin.checked = value;\n    this.afterValueChange('isChecked');\n  }\n\n  get isAllChecked(): boolean {\n    return this._isAllChecked;\n  }\n\n  /**\n   * @deprecated Maybe removed in next major version, use `isChecked` instead.\n   */\n  set isAllChecked(value: boolean) {\n    warnDeprecation(`'isAllChecked' is going to be removed in 9.0.0. Please use 'isChecked' instead.`);\n    this._isAllChecked = value;\n  }\n\n  get isHalfChecked(): boolean {\n    return this._isHalfChecked;\n  }\n\n  set isHalfChecked(value: boolean) {\n    this._isHalfChecked = value;\n    this.afterValueChange('isHalfChecked');\n  }\n\n  get isSelectable(): boolean {\n    return this._isSelectable;\n  }\n\n  set isSelectable(value: boolean) {\n    this._isSelectable = value;\n    this.update();\n  }\n\n  get isDisabled(): boolean {\n    return this._isDisabled;\n  }\n\n  set isDisabled(value: boolean) {\n    this._isDisabled = value;\n    this.update();\n  }\n\n  get isDisableCheckbox(): boolean {\n    return this._isDisableCheckbox;\n  }\n\n  set isDisableCheckbox(value: boolean) {\n    this._isDisableCheckbox = value;\n    this.update();\n  }\n\n  get isExpanded(): boolean {\n    return this._isExpanded;\n  }\n\n  set isExpanded(value: boolean) {\n    this._isExpanded = value;\n    this.origin.expanded = value;\n    this.afterValueChange('isExpanded');\n    this.afterValueChange('reRender');\n  }\n\n  get isSelected(): boolean {\n    return this._isSelected;\n  }\n\n  set isSelected(value: boolean) {\n    this._isSelected = value;\n    this.origin.selected = value;\n    this.afterValueChange('isSelected');\n  }\n\n  get isLoading(): boolean {\n    return this._isLoading;\n  }\n\n  set isLoading(value: boolean) {\n    this._isLoading = value;\n    this.update();\n  }\n\n  public setSyncChecked(checked: boolean = false, halfChecked: boolean = false): void {\n    this.setChecked(checked, halfChecked);\n    if (this.treeService && !this.treeService.isCheckStrictly) {\n      this.treeService.conduct(this);\n    }\n  }\n\n  /**\n   * @deprecated Maybe removed in next major version, use `isChecked` instead.\n   */\n  public setChecked(checked: boolean = false, halfChecked: boolean = false): void {\n    warnDeprecation(`'setChecked' is going to be removed in 9.0.0. Please use 'isChecked' instead.`);\n    this.origin.checked = checked;\n    this.isChecked = checked;\n    this.isAllChecked = checked;\n    this.isHalfChecked = halfChecked;\n  }\n\n  /**\n   * @not-deprecated Maybe removed in next major version, use `isExpanded` instead.\n   * We need it until tree refactoring is finished\n   */\n  public setExpanded(value: boolean): void {\n    this._isExpanded = value;\n    this.origin.expanded = value;\n    this.afterValueChange('isExpanded');\n  }\n\n  /**\n   * @deprecated Maybe removed in next major version, use `isSelected` instead.\n   */\n  public setSelected(value: boolean): void {\n    warnDeprecation(`'setSelected' is going to be removed in 9.0.0. Please use 'isExpanded' isSelected.`);\n    if (this.isDisabled) {\n      return;\n    }\n    this.isSelected = value;\n  }\n\n  public getParentNode(): NzTreeNode | null {\n    return this.parentNode;\n  }\n\n  public getChildren(): NzTreeNode[] {\n    return this.children;\n  }\n\n  /**\n   * Support appending child nodes by position. Leaf node cannot be appended.\n   */\n  public addChildren(children: NzSafeAny[], childPos: number = -1): void {\n    if (!this.isLeaf) {\n      children.forEach(node => {\n        const refreshLevel = (n: NzTreeNode) => {\n          n.getChildren().forEach(c => {\n            c.level = c.getParentNode()!.level + 1;\n            // flush origin\n            c.origin.level = c.level;\n            refreshLevel(c);\n          });\n        };\n        let child = node;\n        if (child instanceof NzTreeNode) {\n          child.parentNode = this;\n        } else {\n          child = new NzTreeNode(node, this);\n        }\n        child.level = this.level + 1;\n        child.origin.level = child.level;\n        refreshLevel(child);\n        try {\n          childPos === -1 ? this.children.push(child) : this.children.splice(childPos, 0, child);\n          // flush origin\n        } catch (e) {}\n      });\n      this.origin.children = this.getChildren().map(v => v.origin);\n      // remove loading state\n      this.isLoading = false;\n    }\n    this.afterValueChange('addChildren');\n    this.afterValueChange('reRender');\n  }\n\n  public clearChildren(): void {\n    // refresh checked state\n    this.afterValueChange('clearChildren');\n    this.children = [];\n    this.origin.children = [];\n    this.afterValueChange('reRender');\n  }\n\n  public remove(): void {\n    const parentNode = this.getParentNode();\n    if (parentNode) {\n      parentNode.children = parentNode.getChildren().filter(v => v.key !== this.key);\n      parentNode.origin.children = parentNode.origin.children!.filter(v => v.key !== this.key);\n      this.afterValueChange('remove');\n      this.afterValueChange('reRender');\n    }\n  }\n\n  public afterValueChange(key: string): void {\n    if (this.treeService) {\n      switch (key) {\n        case 'isChecked':\n          this.treeService.setCheckedNodeList(this);\n          break;\n        case 'isHalfChecked':\n          this.treeService.setHalfCheckedNodeList(this);\n          break;\n        case 'isExpanded':\n          this.treeService.setExpandedNodeList(this);\n          break;\n        case 'isSelected':\n          this.treeService.setNodeActive(this);\n          break;\n        case 'clearChildren':\n          this.treeService.afterRemove(this.getChildren());\n          break;\n        case 'remove':\n          this.treeService.afterRemove([this]);\n          break;\n        case 'reRender':\n          this.treeService.flattenTreeData(\n            this.treeService.rootNodes,\n            this.treeService.getExpandedNodeList().map(v => v.key!)\n          );\n          break;\n      }\n    }\n    this.update();\n  }\n\n  public update(): void {\n    if (this.component) {\n      this.component.markForCheck();\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { NzTreeNode } from './nz-tree-base-node';\n\nexport interface NzFormatEmitEvent {\n  eventName: string;\n  node?: NzTreeNode | null;\n  event?: MouseEvent | DragEvent | null;\n  dragNode?: NzTreeNode;\n  selectedKeys?: NzTreeNode[];\n  checkedKeys?: NzTreeNode[];\n  matchedKeys?: NzTreeNode[];\n  nodes?: NzTreeNode[];\n  keys?: string[];\n}\n\nexport interface NzFormatBeforeDropEvent {\n  dragNode: NzTreeNode;\n  node: NzTreeNode;\n  pos: number;\n}\n\nexport interface NzTreeNodeBaseComponent {\n  markForCheck(): void;\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { FlattenNode, NzTreeNode, NzTreeNodeKey } from './nz-tree-base-node';\n\nexport function isCheckDisabled(node: NzTreeNode): boolean {\n  const { isDisabled, isDisableCheckbox } = node;\n  return !!(isDisabled || isDisableCheckbox);\n}\n\nexport function isInArray(needle: NzSafeAny, haystack: NzSafeAny[]): boolean {\n  return haystack.length > 0 && haystack.indexOf(needle) > -1;\n}\n\nexport function getPosition(level: string | number, index: number): string {\n  return `${level}-${index}`;\n}\n\nexport function getKey(key: NzTreeNodeKey, pos: string): NzTreeNodeKey {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n  return pos;\n}\n\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\nexport function flattenTreeData(treeNodeList: NzTreeNode[] = [], expandedKeys: NzTreeNodeKey[] | true = []): FlattenNode[] {\n  const expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  const flattenList: FlattenNode[] = [];\n\n  function dig(list: NzTreeNode[], parent: FlattenNode | null = null): FlattenNode[] {\n    return list.map((treeNode, index) => {\n      const pos: string = getPosition(parent ? parent.pos : '0', index);\n      const mergedKey = getKey(treeNode.key, pos);\n      treeNode.isStart = [...(parent ? parent.isStart : []), index === 0];\n      treeNode.isEnd = [...(parent ? parent.isEnd : []), index === list.length - 1];\n      // Add FlattenDataNode into list\n      // TODO: only need data here.\n      const flattenNode: FlattenNode = {\n        parent,\n        pos,\n        children: [],\n        data: treeNode,\n        isStart: [...(parent ? parent.isStart : []), index === 0],\n        isEnd: [...(parent ? parent.isEnd : []), index === list.length - 1]\n      };\n\n      flattenList.push(flattenNode);\n\n      // Loop treeNode children\n      if (expandedKeys === true || expandedKeySet.has(mergedKey) || treeNode.isExpanded) {\n        flattenNode.children = dig(treeNode.children || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n\n      return flattenNode;\n    });\n  }\n\n  dig(treeNodeList);\n  return flattenList;\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Injectable } from '@angular/core';\n\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { BehaviorSubject } from 'rxjs';\nimport { NzTreeNode, NzTreeNodeKey } from './nz-tree-base-node';\nimport { flattenTreeData, isCheckDisabled, isInArray } from './nz-tree-base-util';\nimport { NzFormatEmitEvent } from './nz-tree-base.definitions';\n\n@Injectable()\nexport class NzTreeBaseService {\n  DRAG_SIDE_RANGE = 0.25;\n  DRAG_MIN_GAP = 2;\n\n  isCheckStrictly: boolean = false;\n  isMultiple: boolean = false;\n  selectedNode!: NzTreeNode;\n  rootNodes: NzTreeNode[] = [];\n  flattenNodes$ = new BehaviorSubject<NzTreeNode[]>([]);\n  selectedNodeList: NzTreeNode[] = [];\n  expandedNodeList: NzTreeNode[] = [];\n  checkedNodeList: NzTreeNode[] = [];\n  halfCheckedNodeList: NzTreeNode[] = [];\n  matchedNodeList: NzTreeNode[] = [];\n\n  /**\n   * reset tree nodes will clear default node list\n   */\n  initTree(nzNodes: NzTreeNode[]): void {\n    this.rootNodes = nzNodes;\n    this.expandedNodeList = [];\n    this.selectedNodeList = [];\n    this.halfCheckedNodeList = [];\n    this.checkedNodeList = [];\n    this.matchedNodeList = [];\n  }\n\n  flattenTreeData(nzNodes: NzTreeNode[], expandedKeys: NzTreeNodeKey[] | true = []): void {\n    this.flattenNodes$.next(flattenTreeData(nzNodes, expandedKeys).map(item => item.data));\n  }\n\n  getSelectedNode(): NzTreeNode | null {\n    return this.selectedNode;\n  }\n\n  /**\n   * get some list\n   */\n  getSelectedNodeList(): NzTreeNode[] {\n    return this.conductNodeState('select');\n  }\n\n  /**\n   * return checked nodes\n   */\n  getCheckedNodeList(): NzTreeNode[] {\n    return this.conductNodeState('check');\n  }\n\n  getHalfCheckedNodeList(): NzTreeNode[] {\n    return this.conductNodeState('halfCheck');\n  }\n\n  /**\n   * return expanded nodes\n   */\n  getExpandedNodeList(): NzTreeNode[] {\n    return this.conductNodeState('expand');\n  }\n\n  /**\n   * return search matched nodes\n   */\n  getMatchedNodeList(): NzTreeNode[] {\n    return this.conductNodeState('match');\n  }\n\n  isArrayOfNzTreeNode(value: NzSafeAny[]): boolean {\n    return value.every(item => item instanceof NzTreeNode);\n  }\n\n  /**\n   * set drag node\n   */\n  setSelectedNode(node: NzTreeNode): void {\n    this.selectedNode = node;\n  }\n\n  /**\n   * set node selected status\n   */\n  setNodeActive(node: NzTreeNode): void {\n    if (!this.isMultiple && node.isSelected) {\n      this.selectedNodeList.forEach(n => {\n        if (node.key !== n.key) {\n          // reset other nodes\n          n.isSelected = false;\n        }\n      });\n      // single mode: remove pre node\n      this.selectedNodeList = [];\n    }\n    this.setSelectedNodeList(node, this.isMultiple);\n  }\n\n  /**\n   * add or remove node to selectedNodeList\n   */\n  setSelectedNodeList(node: NzTreeNode, isMultiple: boolean = false): void {\n    const index = this.getIndexOfArray(this.selectedNodeList, node.key);\n    if (isMultiple) {\n      if (node.isSelected && index === -1) {\n        this.selectedNodeList.push(node);\n      }\n    } else {\n      if (node.isSelected && index === -1) {\n        this.selectedNodeList = [node];\n      }\n    }\n    if (!node.isSelected) {\n      this.selectedNodeList = this.selectedNodeList.filter(n => n.key !== node.key);\n    }\n  }\n\n  /**\n   * merge checked nodes\n   */\n  setHalfCheckedNodeList(node: NzTreeNode): void {\n    const index = this.getIndexOfArray(this.halfCheckedNodeList, node.key);\n    if (node.isHalfChecked && index === -1) {\n      this.halfCheckedNodeList.push(node);\n    } else if (!node.isHalfChecked && index > -1) {\n      this.halfCheckedNodeList = this.halfCheckedNodeList.filter(n => node.key !== n.key);\n    }\n  }\n\n  setCheckedNodeList(node: NzTreeNode): void {\n    const index = this.getIndexOfArray(this.checkedNodeList, node.key);\n    if (node.isChecked && index === -1) {\n      this.checkedNodeList.push(node);\n    } else if (!node.isChecked && index > -1) {\n      this.checkedNodeList = this.checkedNodeList.filter(n => node.key !== n.key);\n    }\n  }\n\n  /**\n   * conduct checked/selected/expanded keys\n   */\n  conductNodeState(type: string = 'check'): NzTreeNode[] {\n    let resultNodesList: NzTreeNode[] = [];\n    switch (type) {\n      case 'select':\n        resultNodesList = this.selectedNodeList;\n        break;\n      case 'expand':\n        resultNodesList = this.expandedNodeList;\n        break;\n      case 'match':\n        resultNodesList = this.matchedNodeList;\n        break;\n      case 'check':\n        resultNodesList = this.checkedNodeList;\n        const isIgnore = (node: NzTreeNode): boolean => {\n          const parentNode = node.getParentNode();\n          if (parentNode) {\n            if (this.checkedNodeList.findIndex(n => n.key === parentNode.key) > -1) {\n              return true;\n            } else {\n              return isIgnore(parentNode);\n            }\n          }\n          return false;\n        };\n        // merge checked\n        if (!this.isCheckStrictly) {\n          resultNodesList = this.checkedNodeList.filter(n => !isIgnore(n));\n        }\n        break;\n      case 'halfCheck':\n        if (!this.isCheckStrictly) {\n          resultNodesList = this.halfCheckedNodeList;\n        }\n        break;\n    }\n    return resultNodesList;\n  }\n\n  /**\n   * set expanded nodes\n   */\n  setExpandedNodeList(node: NzTreeNode): void {\n    if (node.isLeaf) {\n      return;\n    }\n    const index = this.getIndexOfArray(this.expandedNodeList, node.key);\n    if (node.isExpanded && index === -1) {\n      this.expandedNodeList.push(node);\n    } else if (!node.isExpanded && index > -1) {\n      this.expandedNodeList.splice(index, 1);\n    }\n  }\n\n  setMatchedNodeList(node: NzTreeNode): void {\n    const index = this.getIndexOfArray(this.matchedNodeList, node.key);\n    if (node.isMatched && index === -1) {\n      this.matchedNodeList.push(node);\n    } else if (!node.isMatched && index > -1) {\n      this.matchedNodeList.splice(index, 1);\n    }\n  }\n\n  /**\n   * check state\n   * @param isCheckStrictly\n   */\n  refreshCheckState(isCheckStrictly: boolean = false): void {\n    if (isCheckStrictly) {\n      return;\n    }\n    this.checkedNodeList.forEach(node => {\n      this.conduct(node, isCheckStrictly);\n    });\n  }\n\n  // reset other node checked state based current node\n  conduct(node: NzTreeNode, isCheckStrictly: boolean = false): void {\n    const isChecked = node.isChecked;\n    if (node && !isCheckStrictly) {\n      this.conductUp(node);\n      this.conductDown(node, isChecked);\n    }\n  }\n\n  /**\n   * 1、children half checked\n   * 2、children all checked, parent checked\n   * 3、no children checked\n   */\n  conductUp(node: NzTreeNode): void {\n    const parentNode = node.getParentNode();\n    if (parentNode) {\n      if (!isCheckDisabled(parentNode)) {\n        if (parentNode.children.every(child => isCheckDisabled(child) || (!child.isHalfChecked && child.isChecked))) {\n          parentNode.isChecked = true;\n          parentNode.isHalfChecked = false;\n        } else if (parentNode.children.some(child => child.isHalfChecked || child.isChecked)) {\n          parentNode.isChecked = false;\n          parentNode.isHalfChecked = true;\n        } else {\n          parentNode.isChecked = false;\n          parentNode.isHalfChecked = false;\n        }\n      }\n      this.setCheckedNodeList(parentNode);\n      this.setHalfCheckedNodeList(parentNode);\n      this.conductUp(parentNode);\n    }\n  }\n\n  /**\n   * reset child check state\n   */\n  conductDown(node: NzTreeNode, value: boolean): void {\n    if (!isCheckDisabled(node)) {\n      node.isChecked = value;\n      node.isHalfChecked = false;\n      this.setCheckedNodeList(node);\n      this.setHalfCheckedNodeList(node);\n      node.children.forEach(n => {\n        this.conductDown(n, value);\n      });\n    }\n  }\n\n  /**\n   * flush after delete node\n   */\n  afterRemove(nodes: NzTreeNode[]): void {\n    // to reset selectedNodeList & expandedNodeList\n    const loopNode = (node: NzTreeNode) => {\n      // remove selected node\n      this.selectedNodeList = this.selectedNodeList.filter(n => n.key !== node.key);\n      // remove expanded node\n      this.expandedNodeList = this.expandedNodeList.filter(n => n.key !== node.key);\n      // remove checked node\n      this.checkedNodeList = this.checkedNodeList.filter(n => n.key !== node.key);\n      if (node.children) {\n        node.children.forEach(child => {\n          loopNode(child);\n        });\n      }\n    };\n    nodes.forEach(n => {\n      loopNode(n);\n    });\n    this.refreshCheckState(this.isCheckStrictly);\n  }\n\n  /**\n   * drag event\n   */\n  refreshDragNode(node: NzTreeNode): void {\n    if (node.children.length === 0) {\n      // until root\n      this.conductUp(node);\n    } else {\n      node.children.forEach(child => {\n        this.refreshDragNode(child);\n      });\n    }\n  }\n\n  // reset node level\n  resetNodeLevel(node: NzTreeNode): void {\n    const parentNode = node.getParentNode();\n    if (parentNode) {\n      node.level = parentNode.level + 1;\n    } else {\n      node.level = 0;\n    }\n    for (const child of node.children) {\n      this.resetNodeLevel(child);\n    }\n  }\n\n  calcDropPosition(event: DragEvent): number {\n    const { clientY } = event;\n    // to fix firefox undefined\n    const { top, bottom, height } = event.srcElement\n      ? (event.srcElement as Element).getBoundingClientRect()\n      : (event.target as Element).getBoundingClientRect();\n    const des = Math.max(height * this.DRAG_SIDE_RANGE, this.DRAG_MIN_GAP);\n\n    if (clientY <= top + des) {\n      return -1;\n    } else if (clientY >= bottom - des) {\n      return 1;\n    }\n\n    return 0;\n  }\n\n  /**\n   * drop\n   * 0: inner -1: pre 1: next\n   */\n  dropAndApply(targetNode: NzTreeNode, dragPos: number = -1): void {\n    if (!targetNode || dragPos > 1) {\n      return;\n    }\n    const treeService = targetNode.treeService;\n    const targetParent = targetNode.getParentNode();\n    const isSelectedRootNode = this.selectedNode.getParentNode();\n    // remove the dragNode\n    if (isSelectedRootNode) {\n      isSelectedRootNode.children = isSelectedRootNode.children.filter(n => n.key !== this.selectedNode.key);\n    } else {\n      this.rootNodes = this.rootNodes.filter(n => n.key !== this.selectedNode.key);\n    }\n    switch (dragPos) {\n      case 0:\n        targetNode.addChildren([this.selectedNode]);\n        this.resetNodeLevel(targetNode);\n        break;\n      case -1:\n      case 1:\n        const tIndex = dragPos === 1 ? 1 : 0;\n        if (targetParent) {\n          targetParent.addChildren([this.selectedNode], targetParent.children.indexOf(targetNode) + tIndex);\n          const parentNode = this.selectedNode.getParentNode();\n          if (parentNode) {\n            this.resetNodeLevel(parentNode);\n          }\n        } else {\n          const targetIndex = this.rootNodes.indexOf(targetNode) + tIndex;\n          // Insert root node.\n          this.rootNodes.splice(targetIndex, 0, this.selectedNode);\n          this.rootNodes[targetIndex].parentNode = null;\n          this.resetNodeLevel(this.rootNodes[targetIndex]);\n        }\n        break;\n    }\n    // flush all nodes\n    this.rootNodes.forEach(child => {\n      if (!child.treeService) {\n        child.service = treeService;\n      }\n      this.refreshDragNode(child);\n    });\n  }\n\n  /**\n   * emit Structure\n   * eventName\n   * node\n   * event: MouseEvent / DragEvent\n   * dragNode\n   */\n  formatEvent(eventName: string, node: NzTreeNode | null, event: MouseEvent | DragEvent | null): NzFormatEmitEvent {\n    const emitStructure: NzFormatEmitEvent = {\n      eventName: eventName,\n      node: node,\n      event: event\n    };\n    switch (eventName) {\n      case 'dragstart':\n      case 'dragenter':\n      case 'dragover':\n      case 'dragleave':\n      case 'drop':\n      case 'dragend':\n        Object.assign(emitStructure, { dragNode: this.getSelectedNode() });\n        break;\n      case 'click':\n      case 'dblclick':\n        Object.assign(emitStructure, { selectedKeys: this.selectedNodeList });\n        Object.assign(emitStructure, { nodes: this.selectedNodeList });\n        Object.assign(emitStructure, { keys: this.selectedNodeList.map(n => n.key) });\n        break;\n      case 'check':\n        const checkedNodeList = this.getCheckedNodeList();\n        Object.assign(emitStructure, { checkedKeys: checkedNodeList });\n        Object.assign(emitStructure, { nodes: checkedNodeList });\n        Object.assign(emitStructure, { keys: checkedNodeList.map(n => n.key) });\n        break;\n      case 'search':\n        Object.assign(emitStructure, { matchedKeys: this.getMatchedNodeList() });\n        Object.assign(emitStructure, { nodes: this.getMatchedNodeList() });\n        Object.assign(emitStructure, { keys: this.getMatchedNodeList().map(n => n.key) });\n        break;\n      case 'expand':\n        Object.assign(emitStructure, { nodes: this.expandedNodeList });\n        Object.assign(emitStructure, { keys: this.expandedNodeList.map(n => n.key) });\n        break;\n    }\n    return emitStructure;\n  }\n\n  /**\n   * New functions for flatten nodes\n   */\n\n  getIndexOfArray(list: NzTreeNode[], key: string): number {\n    return list.findIndex(v => v.key === key);\n  }\n\n  /**\n   * Render by nzCheckedKeys\n   * When keys equals null, just render with checkStrictly\n   * @param keys\n   * @param checkStrictly\n   */\n  conductCheck(keys: NzTreeNodeKey[] | null, checkStrictly: boolean): void {\n    this.checkedNodeList = [];\n    this.halfCheckedNodeList = [];\n    const calc = (nodes: NzTreeNode[]) => {\n      nodes.forEach(node => {\n        if (keys === null) {\n          // render tree if no default checked keys found\n          node.isChecked = !!node.origin.checked;\n        } else {\n          if (isInArray(node.key, keys || [])) {\n            node.isChecked = true;\n            node.isHalfChecked = false;\n          } else {\n            node.isChecked = false;\n            node.isHalfChecked = false;\n          }\n        }\n        if (node.children.length > 0) {\n          calc(node.children);\n        }\n      });\n    };\n    calc(this.rootNodes);\n    this.refreshCheckState(checkStrictly);\n  }\n\n  conductExpandedKeys(keys: NzTreeNodeKey[] | true = []): void {\n    const expandedKeySet = new Set(keys === true ? [] : keys);\n    this.expandedNodeList = [];\n    const calc = (nodes: NzTreeNode[]) => {\n      nodes.forEach(node => {\n        node.setExpanded(keys === true || expandedKeySet.has(node.key) || node.isExpanded === true);\n        if (node.isExpanded) {\n          this.setExpandedNodeList(node);\n        }\n        if (node.children.length > 0) {\n          calc(node.children);\n        }\n      });\n    };\n    calc(this.rootNodes);\n  }\n\n  conductSelectedKeys(keys: NzTreeNodeKey[], isMulti: boolean): void {\n    this.selectedNodeList.forEach(node => (node.isSelected = false));\n    this.selectedNodeList = [];\n    const calc = (nodes: NzTreeNode[]): boolean => {\n      return nodes.every(node => {\n        if (isInArray(node.key, keys)) {\n          node.isSelected = true;\n          this.setSelectedNodeList(node);\n          if (!isMulti) {\n            // if not support multi select\n            return false;\n          }\n        } else {\n          node.isSelected = false;\n        }\n        if (node.children.length > 0) {\n          // Recursion\n          return calc(node.children);\n        }\n        return true;\n      });\n    };\n    calc(this.rootNodes);\n  }\n\n  /**\n   * Expand parent nodes by child node\n   * @param node\n   */\n  expandNodeAllParentBySearch(node: NzTreeNode): void {\n    const calc = (n: NzTreeNode | null): void => {\n      if (n) {\n        n.canHide = false;\n        n.setExpanded(true);\n        this.setExpandedNodeList(n);\n        if (n.getParentNode()) {\n          return calc(n.getParentNode());\n        }\n      }\n    };\n    calc(node.getParentNode());\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { InjectionToken } from '@angular/core';\n\nimport { NzTreeBaseService } from './nz-tree-base.service';\n\nexport const NzTreeHigherOrderServiceToken = new InjectionToken<NzTreeBaseService>('NzTreeHigherOrder');\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { NzTreeNode } from './nz-tree-base-node';\nimport { NzTreeBaseService } from './nz-tree-base.service';\n\nexport class NzTreeBase {\n  constructor(public nzTreeService: NzTreeBaseService) {}\n\n  /**\n   * Coerces a value({@link any[]}) to a TreeNodes({@link NzTreeNode[]})\n   */\n  coerceTreeNodes(value: NzSafeAny[]): NzTreeNode[] {\n    let nodes: NzTreeNode[] = [];\n    if (!this.nzTreeService.isArrayOfNzTreeNode(value)) {\n      // has not been new NzTreeNode\n      nodes = value.map(item => new NzTreeNode(item, null, this.nzTreeService));\n    } else {\n      nodes = value.map((item: NzTreeNode) => {\n        item.service = this.nzTreeService;\n        return item;\n      });\n    }\n    return nodes;\n  }\n\n  /**\n   * Get all nodes({@link NzTreeNode})\n   */\n  getTreeNodes(): NzTreeNode[] {\n    return this.nzTreeService.rootNodes;\n  }\n\n  /**\n   * Get {@link NzTreeNode} with key\n   */\n  getTreeNodeByKey(key: string): NzTreeNode | null {\n    // flat tree nodes\n    const nodes: NzTreeNode[] = [];\n    const getNode = (node: NzTreeNode): void => {\n      nodes.push(node);\n      node.getChildren().forEach(n => {\n        getNode(n);\n      });\n    };\n    this.getTreeNodes().forEach(n => {\n      getNode(n);\n    });\n    return nodes.find(n => n.key === key) || null;\n  }\n\n  /**\n   * Get checked nodes(merged)\n   */\n  getCheckedNodeList(): NzTreeNode[] {\n    return this.nzTreeService.getCheckedNodeList();\n  }\n\n  /**\n   * Get selected nodes\n   */\n  getSelectedNodeList(): NzTreeNode[] {\n    return this.nzTreeService.getSelectedNodeList();\n  }\n\n  /**\n   * Get half checked nodes\n   */\n  getHalfCheckedNodeList(): NzTreeNode[] {\n    return this.nzTreeService.getHalfCheckedNodeList();\n  }\n\n  /**\n   * Get expanded nodes\n   */\n  getExpandedNodeList(): NzTreeNode[] {\n    return this.nzTreeService.getExpandedNodeList();\n  }\n\n  /**\n   * Get matched nodes(if nzSearchValue is not null)\n   */\n  getMatchedNodeList(): NzTreeNode[] {\n    return this.nzTreeService.getMatchedNodeList();\n  }\n}\n"]}