{"version":3,"file":"ng-zorro-antd-core-resize-observers.js","sources":["ng-zorro-antd/core/resize-observers/resize-observers.service.ts","ng-zorro-antd/core/resize-observers/resize-observers.module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { coerceElement } from '@angular/cdk/coercion';\nimport { ElementRef, Injectable, OnDestroy } from '@angular/core';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { Observable, Observer, Subject } from 'rxjs';\n\n/**\n * Factory that creates a new ResizeObserver and allows us to stub it out in unit tests.\n */\n@Injectable({ providedIn: 'root' })\nexport class NzResizeObserverFactory {\n  create(callback: ResizeObserverCallback): ResizeObserver | null {\n    return typeof ResizeObserver === 'undefined' ? null : new ResizeObserver(callback);\n  }\n}\n\n/** An injectable service that allows watching elements for changes to their content. */\n@Injectable({ providedIn: 'root' })\nexport class NzResizeObserver implements OnDestroy {\n  /** Keeps track of the existing ResizeObservers so they can be reused. */\n  private observedElements = new Map<\n    Element,\n    {\n      observer: ResizeObserver | null;\n      stream: Subject<ResizeObserverEntry[]>;\n      count: number;\n    }\n  >();\n\n  constructor(private nzResizeObserverFactory: NzResizeObserverFactory) {}\n\n  ngOnDestroy(): void {\n    this.observedElements.forEach((_, element) => this.cleanupObserver(element));\n  }\n\n  observe(elementOrRef: Element | ElementRef<Element>): Observable<ResizeObserverEntry[]> {\n    const element = coerceElement(elementOrRef);\n\n    return new Observable((observer: Observer<ResizeObserverEntry[]>) => {\n      const stream = this.observeElement(element);\n      const subscription = stream.subscribe(observer);\n\n      return () => {\n        subscription.unsubscribe();\n        this.unobserveElement(element);\n      };\n    });\n  }\n\n  /**\n   * Observes the given element by using the existing ResizeObserver if available, or creating a\n   * new one if not.\n   */\n  private observeElement(element: Element): Subject<ResizeObserverEntry[]> {\n    if (!this.observedElements.has(element)) {\n      const stream = new Subject<ResizeObserverEntry[]>();\n      const observer = this.nzResizeObserverFactory.create(mutations => stream.next(mutations));\n      if (observer) {\n        observer.observe(element);\n      }\n      this.observedElements.set(element, { observer, stream, count: 1 });\n    } else {\n      this.observedElements.get(element)!.count++;\n    }\n    return this.observedElements.get(element)!.stream;\n  }\n\n  /**\n   * Un-observes the given element and cleans up the underlying ResizeObserver if nobody else is\n   * observing this element.\n   */\n  private unobserveElement(element: Element): void {\n    if (this.observedElements.has(element)) {\n      this.observedElements.get(element)!.count--;\n      if (!this.observedElements.get(element)!.count) {\n        this.cleanupObserver(element);\n      }\n    }\n  }\n\n  /** Clean up the underlying ResizeObserver for the specified element. */\n  private cleanupObserver(element: Element): void {\n    if (this.observedElements.has(element)) {\n      const { observer, stream } = this.observedElements.get(element)!;\n      if (observer) {\n        observer.disconnect();\n      }\n      stream.complete();\n      this.observedElements.delete(element);\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { NgModule } from '@angular/core';\nimport { NzResizeObserverFactory } from './resize-observers.service';\n\n@NgModule({\n  providers: [NzResizeObserverFactory]\n})\nexport class NzResizeObserversModule {}\n"]}