/**
 * @fileoverview added by tsickle
 * Generated from: src/table-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject, combineLatest, Subject } from 'rxjs';
import { debounceTime, distinctUntilChanged, filter, map, skip, switchMap, takeUntil } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
export class NzTableDataService {
    constructor() {
        this.destroy$ = new Subject();
        this.pageIndex$ = new BehaviorSubject(1);
        this.frontPagination$ = new BehaviorSubject(true);
        this.pageSize$ = new BehaviorSubject(10);
        this.listOfData$ = new BehaviorSubject([]);
        this.pageIndexDistinct$ = this.pageIndex$.pipe(distinctUntilChanged());
        this.pageSizeDistinct$ = this.pageSize$.pipe(distinctUntilChanged());
        this.listOfCalcOperator$ = new BehaviorSubject([]);
        this.queryParams$ = combineLatest([
            this.pageIndexDistinct$,
            this.pageSizeDistinct$,
            this.listOfCalcOperator$
        ]).pipe(debounceTime(0), skip(1), map((/**
         * @param {?} __0
         * @return {?}
         */
        ([pageIndex, pageSize, listOfCalc]) => {
            return {
                pageIndex,
                pageSize,
                sort: listOfCalc
                    .filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.sortFn))
                    .map((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    return {
                        key: (/** @type {?} */ (item.key)),
                        value: item.sortOrder
                    };
                })),
                filter: listOfCalc
                    .filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.filterFn))
                    .map((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    return {
                        key: (/** @type {?} */ (item.key)),
                        value: item.filterValue
                    };
                }))
            };
        })));
        this.listOfDataAfterCalc$ = combineLatest([this.listOfData$, this.listOfCalcOperator$]).pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        ([listOfData, listOfCalcOperator]) => {
            /** @type {?} */
            let listOfDataAfterCalc = [...listOfData];
            /** @type {?} */
            const listOfFilterOperator = listOfCalcOperator.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                const { filterValue, filterFn } = item;
                /** @type {?} */
                const isReset = filterValue === null || filterValue === undefined || (Array.isArray(filterValue) && (/** @type {?} */ (filterValue)).length === 0);
                return !isReset && typeof filterFn === 'function';
            }));
            for (const item of listOfFilterOperator) {
                const { filterFn, filterValue } = item;
                listOfDataAfterCalc = listOfDataAfterCalc.filter((/**
                 * @param {?} data
                 * @return {?}
                 */
                data => ((/** @type {?} */ (filterFn)))(filterValue, data)));
            }
            /** @type {?} */
            const listOfSortOperator = listOfCalcOperator
                .filter((/**
             * @param {?} item
             * @return {?}
             */
            item => item.sortOrder !== null && typeof item.sortFn === 'function'))
                .sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => +b.sortPriority - +a.sortPriority));
            if (listOfCalcOperator.length) {
                listOfDataAfterCalc.sort((/**
                 * @param {?} record1
                 * @param {?} record2
                 * @return {?}
                 */
                (record1, record2) => {
                    for (const item of listOfSortOperator) {
                        const { sortFn, sortOrder } = item;
                        if (sortFn && sortOrder) {
                            /** @type {?} */
                            const compareResult = ((/** @type {?} */ (sortFn)))(record1, record2, sortOrder);
                            if (compareResult !== 0) {
                                return sortOrder === 'ascend' ? compareResult : -compareResult;
                            }
                        }
                    }
                    return 0;
                }));
            }
            return listOfDataAfterCalc;
        })));
        this.listOfFrontEndCurrentPageData$ = combineLatest([this.pageIndexDistinct$, this.pageSizeDistinct$, this.listOfDataAfterCalc$]).pipe(takeUntil(this.destroy$), filter((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            const [pageIndex, pageSize, listOfData] = value;
            /** @type {?} */
            const maxPageIndex = Math.ceil(listOfData.length / pageSize) || 1;
            return pageIndex <= maxPageIndex;
        })), map((/**
         * @param {?} __0
         * @return {?}
         */
        ([pageIndex, pageSize, listOfData]) => {
            return listOfData.slice((pageIndex - 1) * pageSize, pageIndex * pageSize);
        })));
        this.listOfCurrentPageData$ = this.frontPagination$.pipe(switchMap((/**
         * @param {?} pagination
         * @return {?}
         */
        pagination => (pagination ? this.listOfFrontEndCurrentPageData$ : this.listOfData$))));
        this.total$ = this.frontPagination$.pipe(switchMap((/**
         * @param {?} pagination
         * @return {?}
         */
        pagination => (pagination ? this.listOfDataAfterCalc$ : this.listOfData$))), map((/**
         * @param {?} list
         * @return {?}
         */
        list => list.length)), distinctUntilChanged());
    }
    /**
     * @param {?} size
     * @return {?}
     */
    updatePageSize(size) {
        this.pageSize$.next(size);
    }
    /**
     * @param {?} pagination
     * @return {?}
     */
    updateFrontPagination(pagination) {
        this.frontPagination$.next(pagination);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    updatePageIndex(index) {
        this.pageIndex$.next(index);
    }
    /**
     * @param {?} list
     * @return {?}
     */
    updateListOfData(list) {
        this.listOfData$.next(list);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
NzTableDataService.ɵfac = function NzTableDataService_Factory(t) { return new (t || NzTableDataService)(); };
NzTableDataService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NzTableDataService, factory: NzTableDataService.ɵfac });
/** @nocollapse */
NzTableDataService.ctorParameters = () => [];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzTableDataService, [{
        type: Injectable
    }], function () { return []; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    NzTableDataService.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    NzTableDataService.prototype.pageIndex$;
    /**
     * @type {?}
     * @private
     */
    NzTableDataService.prototype.frontPagination$;
    /**
     * @type {?}
     * @private
     */
    NzTableDataService.prototype.pageSize$;
    /**
     * @type {?}
     * @private
     */
    NzTableDataService.prototype.listOfData$;
    /** @type {?} */
    NzTableDataService.prototype.pageIndexDistinct$;
    /** @type {?} */
    NzTableDataService.prototype.pageSizeDistinct$;
    /** @type {?} */
    NzTableDataService.prototype.listOfCalcOperator$;
    /** @type {?} */
    NzTableDataService.prototype.queryParams$;
    /**
     * @type {?}
     * @private
     */
    NzTableDataService.prototype.listOfDataAfterCalc$;
    /**
     * @type {?}
     * @private
     */
    NzTableDataService.prototype.listOfFrontEndCurrentPageData$;
    /** @type {?} */
    NzTableDataService.prototype.listOfCurrentPageData$;
    /** @type {?} */
    NzTableDataService.prototype.total$;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtZGF0YS5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyJuZy16b3Jyby1hbnRkL3RhYmxlL3NyYy90YWJsZS1kYXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBS0EsT0FBTyxFQUFFLFVBQVUsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDM0UsT0FBTyxFQUFFLFlBQVksRUFBRSxvQkFBb0IsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBSTdHLE1BQU0sT0FBTyxrQkFBa0I7QUFBRyxJQWdIaEM7QUFBZ0IsUUEvR1IsYUFBUSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7QUFDbkMsUUFBVSxlQUFVLEdBQUcsSUFBSSxlQUFlLENBQVMsQ0FBQyxDQUFDLENBQUM7QUFDdEQsUUFBVSxxQkFBZ0IsR0FBRyxJQUFJLGVBQWUsQ0FBVSxJQUFJLENBQUMsQ0FBQztBQUNoRSxRQUFVLGNBQVMsR0FBRyxJQUFJLGVBQWUsQ0FBUyxFQUFFLENBQUMsQ0FBQztBQUN0RCxRQUFVLGdCQUFXLEdBQUcsSUFBSSxlQUFlLENBQWdCLEVBQUUsQ0FBQyxDQUFDO0FBQy9ELFFBQUUsdUJBQWtCLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDO0FBQ3BFLFFBQUUsc0JBQWlCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDO0FBQ2xFLFFBQUUsd0JBQW1CLEdBQUcsSUFBSSxlQUFlLENBU3ZDLEVBQUUsQ0FBQyxDQUFDO0FBQ1IsUUFBRSxpQkFBWSxHQUFtQyxhQUFhLENBQUM7QUFDL0QsWUFBSSxJQUFJLENBQUMsa0JBQWtCO0FBQzNCLFlB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VjtBQUFDO0FBQWE7QUFBUTtBQUNuQjtBQUFnQjtBQUFRLElBRHJDLHNDQUFpQztBQUNuQztBQUFRO0FBQWlCO0FBQWdCO0FBQVEsSUFBL0Msd0NBQW9EO0FBQ3REO0FBQVE7QUFBaUI7QUFBZ0I7QUFBUSxJQUEvQyw4Q0FBOEQ7QUFDaEU7QUFBUTtBQUFpQjtBQUFnQjtBQUFRLElBQS9DLHVDQUFvRDtBQUN0RDtBQUFRO0FBQWlCO0FBQWdCO0FBQVEsSUFBL0MseUNBQTZEO0FBQy9EO0FBQXFCLElBQW5CLGdEQUFrRTtBQUNwRTtBQUFxQixJQUFuQiwrQ0FBZ0U7QUFDbEU7QUFBcUIsSUFBbkIsaURBU007QUFDUjtBQUFxQixJQUFuQiwwQ0E2QkU7QUFDSjtBQUFRO0FBQWlCO0FBQWdCO0FBQVEsSUFBL0Msa0RBK0JFO0FBQ0o7QUFBUTtBQUFpQjtBQUFnQjtBQUFRLElBQS9DLDREQVVFO0FBQ0o7QUFBcUIsSUFBbkIsb0RBRUU7QUFDSjtBQUFxQixJQUFuQixvQ0FJRTtBQUNKO0FBQ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9ORy1aT1JSTy9uZy16b3Jyby1hbnRkL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgY29tYmluZUxhdGVzdCwgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGVib3VuY2VUaW1lLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgZmlsdGVyLCBtYXAsIHNraXAsIHN3aXRjaE1hcCwgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgTnpUYWJsZURhdGEsIE56VGFibGVGaWx0ZXJGbiwgTnpUYWJsZUZpbHRlclZhbHVlLCBOelRhYmxlUXVlcnlQYXJhbXMsIE56VGFibGVTb3J0Rm4sIE56VGFibGVTb3J0T3JkZXIgfSBmcm9tICcuL3RhYmxlLnR5cGVzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE56VGFibGVEYXRhU2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgZGVzdHJveSQgPSBuZXcgU3ViamVjdCgpO1xuICBwcml2YXRlIHBhZ2VJbmRleCQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PG51bWJlcj4oMSk7XG4gIHByaXZhdGUgZnJvbnRQYWdpbmF0aW9uJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4odHJ1ZSk7XG4gIHByaXZhdGUgcGFnZVNpemUkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxudW1iZXI+KDEwKTtcbiAgcHJpdmF0ZSBsaXN0T2ZEYXRhJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8TnpUYWJsZURhdGFbXT4oW10pO1xuICBwYWdlSW5kZXhEaXN0aW5jdCQgPSB0aGlzLnBhZ2VJbmRleCQucGlwZShkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKTtcbiAgcGFnZVNpemVEaXN0aW5jdCQgPSB0aGlzLnBhZ2VTaXplJC5waXBlKGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpO1xuICBsaXN0T2ZDYWxjT3BlcmF0b3IkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxcbiAgICBBcnJheTx7XG4gICAgICBrZXk/OiBzdHJpbmc7XG4gICAgICBzb3J0Rm46IE56VGFibGVTb3J0Rm4gfCBudWxsIHwgYm9vbGVhbjtcbiAgICAgIHNvcnRPcmRlcjogTnpUYWJsZVNvcnRPcmRlcjtcbiAgICAgIGZpbHRlckZuOiBOelRhYmxlRmlsdGVyRm4gfCBudWxsIHwgYm9vbGVhbjtcbiAgICAgIGZpbHRlclZhbHVlOiBOelRhYmxlRmlsdGVyVmFsdWU7XG4gICAgICBzb3J0UHJpb3JpdHk6IG51bWJlciB8IGJvb2xlYW47XG4gICAgfT5cbiAgPihbXSk7XG4gIHF1ZXJ5UGFyYW1zJDogT2JzZXJ2YWJsZTxOelRhYmxlUXVlcnlQYXJhbXM+ID0gY29tYmluZUxhdGVzdChbXG4gICAgdGhpcy5wYWdlSW5kZXhEaXN0aW5jdCQsXG4gICAgdGhpcy5wYWdlU2l6ZURpc3RpbmN0JCxcbiAgICB0aGlzLmxpc3RPZkNhbGNPcGVyYXRvciRcbiAgXSkucGlwZShcbiAgICBkZWJvdW5jZVRpbWUoMCksXG4gICAgc2tpcCgxKSxcbiAgICBtYXAoKFtwYWdlSW5kZXgsIHBhZ2VTaXplLCBsaXN0T2ZDYWxjXSkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFnZUluZGV4LFxuICAgICAgICBwYWdlU2l6ZSxcbiAgICAgICAgc29ydDogbGlzdE9mQ2FsY1xuICAgICAgICAgIC5maWx0ZXIoaXRlbSA9PiBpdGVtLnNvcnRGbilcbiAgICAgICAgICAubWFwKGl0ZW0gPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAga2V5OiBpdGVtLmtleSEsXG4gICAgICAgICAgICAgIHZhbHVlOiBpdGVtLnNvcnRPcmRlclxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KSxcbiAgICAgICAgZmlsdGVyOiBsaXN0T2ZDYWxjXG4gICAgICAgICAgLmZpbHRlcihpdGVtID0+IGl0ZW0uZmlsdGVyRm4pXG4gICAgICAgICAgLm1hcChpdGVtID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGtleTogaXRlbS5rZXkhLFxuICAgICAgICAgICAgICB2YWx1ZTogaXRlbS5maWx0ZXJWYWx1ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KVxuICAgICAgfTtcbiAgICB9KVxuICApO1xuICBwcml2YXRlIGxpc3RPZkRhdGFBZnRlckNhbGMkID0gY29tYmluZUxhdGVzdChbdGhpcy5saXN0T2ZEYXRhJCwgdGhpcy5saXN0T2ZDYWxjT3BlcmF0b3IkXSkucGlwZShcbiAgICBtYXAoKFtsaXN0T2ZEYXRhLCBsaXN0T2ZDYWxjT3BlcmF0b3JdKSA9PiB7XG4gICAgICBsZXQgbGlzdE9mRGF0YUFmdGVyQ2FsYyA9IFsuLi5saXN0T2ZEYXRhXTtcbiAgICAgIGNvbnN0IGxpc3RPZkZpbHRlck9wZXJhdG9yID0gbGlzdE9mQ2FsY09wZXJhdG9yLmZpbHRlcihpdGVtID0+IHtcbiAgICAgICAgY29uc3QgeyBmaWx0ZXJWYWx1ZSwgZmlsdGVyRm4gfSA9IGl0ZW07XG4gICAgICAgIGNvbnN0IGlzUmVzZXQgPSBmaWx0ZXJWYWx1ZSA9PT0gbnVsbCB8fCBmaWx0ZXJWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8IChBcnJheS5pc0FycmF5KGZpbHRlclZhbHVlKSAmJiBmaWx0ZXJWYWx1ZSEubGVuZ3RoID09PSAwKTtcbiAgICAgICAgcmV0dXJuICFpc1Jlc2V0ICYmIHR5cGVvZiBmaWx0ZXJGbiA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgIH0pO1xuICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGxpc3RPZkZpbHRlck9wZXJhdG9yKSB7XG4gICAgICAgIGNvbnN0IHsgZmlsdGVyRm4sIGZpbHRlclZhbHVlIH0gPSBpdGVtO1xuICAgICAgICBsaXN0T2ZEYXRhQWZ0ZXJDYWxjID0gbGlzdE9mRGF0YUFmdGVyQ2FsYy5maWx0ZXIoZGF0YSA9PiAoZmlsdGVyRm4gYXMgTnpUYWJsZUZpbHRlckZuKShmaWx0ZXJWYWx1ZSwgZGF0YSkpO1xuICAgICAgfVxuICAgICAgY29uc3QgbGlzdE9mU29ydE9wZXJhdG9yID0gbGlzdE9mQ2FsY09wZXJhdG9yXG4gICAgICAgIC5maWx0ZXIoaXRlbSA9PiBpdGVtLnNvcnRPcmRlciAhPT0gbnVsbCAmJiB0eXBlb2YgaXRlbS5zb3J0Rm4gPT09ICdmdW5jdGlvbicpXG4gICAgICAgIC5zb3J0KChhLCBiKSA9PiArYi5zb3J0UHJpb3JpdHkgLSArYS5zb3J0UHJpb3JpdHkpO1xuICAgICAgaWYgKGxpc3RPZkNhbGNPcGVyYXRvci5sZW5ndGgpIHtcbiAgICAgICAgbGlzdE9mRGF0YUFmdGVyQ2FsYy5zb3J0KChyZWNvcmQxLCByZWNvcmQyKSA9PiB7XG4gICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGxpc3RPZlNvcnRPcGVyYXRvcikge1xuICAgICAgICAgICAgY29uc3QgeyBzb3J0Rm4sIHNvcnRPcmRlciB9ID0gaXRlbTtcbiAgICAgICAgICAgIGlmIChzb3J0Rm4gJiYgc29ydE9yZGVyKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGNvbXBhcmVSZXN1bHQgPSAoc29ydEZuIGFzIE56VGFibGVTb3J0Rm4pKHJlY29yZDEsIHJlY29yZDIsIHNvcnRPcmRlcik7XG4gICAgICAgICAgICAgIGlmIChjb21wYXJlUmVzdWx0ICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNvcnRPcmRlciA9PT0gJ2FzY2VuZCcgPyBjb21wYXJlUmVzdWx0IDogLWNvbXBhcmVSZXN1bHQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxpc3RPZkRhdGFBZnRlckNhbGM7XG4gICAgfSlcbiAgKTtcbiAgcHJpdmF0ZSBsaXN0T2ZGcm9udEVuZEN1cnJlbnRQYWdlRGF0YSQgPSBjb21iaW5lTGF0ZXN0KFt0aGlzLnBhZ2VJbmRleERpc3RpbmN0JCwgdGhpcy5wYWdlU2l6ZURpc3RpbmN0JCwgdGhpcy5saXN0T2ZEYXRhQWZ0ZXJDYWxjJF0pLnBpcGUoXG4gICAgdGFrZVVudGlsKHRoaXMuZGVzdHJveSQpLFxuICAgIGZpbHRlcih2YWx1ZSA9PiB7XG4gICAgICBjb25zdCBbcGFnZUluZGV4LCBwYWdlU2l6ZSwgbGlzdE9mRGF0YV0gPSB2YWx1ZTtcbiAgICAgIGNvbnN0IG1heFBhZ2VJbmRleCA9IE1hdGguY2VpbChsaXN0T2ZEYXRhLmxlbmd0aCAvIHBhZ2VTaXplKSB8fCAxO1xuICAgICAgcmV0dXJuIHBhZ2VJbmRleCA8PSBtYXhQYWdlSW5kZXg7XG4gICAgfSksXG4gICAgbWFwKChbcGFnZUluZGV4LCBwYWdlU2l6ZSwgbGlzdE9mRGF0YV0pID0+IHtcbiAgICAgIHJldHVybiBsaXN0T2ZEYXRhLnNsaWNlKChwYWdlSW5kZXggLSAxKSAqIHBhZ2VTaXplLCBwYWdlSW5kZXggKiBwYWdlU2l6ZSk7XG4gICAgfSlcbiAgKTtcbiAgbGlzdE9mQ3VycmVudFBhZ2VEYXRhJCA9IHRoaXMuZnJvbnRQYWdpbmF0aW9uJC5waXBlKFxuICAgIHN3aXRjaE1hcChwYWdpbmF0aW9uID0+IChwYWdpbmF0aW9uID8gdGhpcy5saXN0T2ZGcm9udEVuZEN1cnJlbnRQYWdlRGF0YSQgOiB0aGlzLmxpc3RPZkRhdGEkKSlcbiAgKTtcbiAgdG90YWwkID0gdGhpcy5mcm9udFBhZ2luYXRpb24kLnBpcGUoXG4gICAgc3dpdGNoTWFwKHBhZ2luYXRpb24gPT4gKHBhZ2luYXRpb24gPyB0aGlzLmxpc3RPZkRhdGFBZnRlckNhbGMkIDogdGhpcy5saXN0T2ZEYXRhJCkpLFxuICAgIG1hcChsaXN0ID0+IGxpc3QubGVuZ3RoKSxcbiAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXG4gICk7XG5cbiAgdXBkYXRlUGFnZVNpemUoc2l6ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5wYWdlU2l6ZSQubmV4dChzaXplKTtcbiAgfVxuICB1cGRhdGVGcm9udFBhZ2luYXRpb24ocGFnaW5hdGlvbjogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuZnJvbnRQYWdpbmF0aW9uJC5uZXh0KHBhZ2luYXRpb24pO1xuICB9XG4gIHVwZGF0ZVBhZ2VJbmRleChpbmRleDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5wYWdlSW5kZXgkLm5leHQoaW5kZXgpO1xuICB9XG4gIHVwZGF0ZUxpc3RPZkRhdGEobGlzdDogTnpUYWJsZURhdGFbXSk6IHZvaWQge1xuICAgIHRoaXMubGlzdE9mRGF0YSQubmV4dChsaXN0KTtcbiAgfVxuICBjb25zdHJ1Y3RvcigpIHt9XG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuZGVzdHJveSQubmV4dCgpO1xuICAgIHRoaXMuZGVzdHJveSQuY29tcGxldGUoKTtcbiAgfVxufVxuIl19