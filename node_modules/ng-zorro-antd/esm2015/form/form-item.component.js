/**
 * @fileoverview added by tsickle
 * Generated from: form-item.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Input, Renderer2, ViewEncapsulation } from '@angular/core';
import { warnDeprecation } from 'ng-zorro-antd/core/logger';
import { Subject } from 'rxjs';
/**
 * should add nz-row directive to host, track https://github.com/angular/angular/issues/8785 *
 */
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
export class NzFormItemComponent {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} cdr
     */
    constructor(elementRef, renderer, cdr) {
        this.cdr = cdr;
        this.status = null;
        this.hasFeedback = false;
        this.withHelpClass = false;
        this.destroy$ = new Subject();
        renderer.addClass(elementRef.nativeElement, 'ant-form-item');
    }
    /**
     * @deprecated 10.0.0. 'nzFlex' is deprecated and going to be removed in 10.0.0.
     * @param {?} _
     * @return {?}
     */
    set nzFlex(_) {
        warnDeprecation(`'nzFlex' is deprecated and going to be removed in 10.0.0.`);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setWithHelpViaTips(value) {
        this.withHelpClass = value;
        this.cdr.markForCheck();
    }
    /**
     * @param {?} status
     * @return {?}
     */
    setStatus(status) {
        this.status = status;
        this.cdr.markForCheck();
    }
    /**
     * @param {?} hasFeedback
     * @return {?}
     */
    setHasFeedback(hasFeedback) {
        this.hasFeedback = hasFeedback;
        this.cdr.markForCheck();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
NzFormItemComponent.ɵfac = function NzFormItemComponent_Factory(t) { return new (t || NzFormItemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
NzFormItemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NzFormItemComponent, selectors: [["nz-form-item"]], hostVars: 12, hostBindings: function NzFormItemComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("ant-form-item-has-success", ctx.status === "success")("ant-form-item-has-warning", ctx.status === "warning")("ant-form-item-has-error", ctx.status === "error")("ant-form-item-is-validating", ctx.status === "validating")("ant-form-item-has-feedback", ctx.hasFeedback && ctx.status)("ant-form-item-with-help", ctx.withHelpClass);
    } }, inputs: { nzFlex: "nzFlex" }, exportAs: ["nzFormItem"], ngContentSelectors: _c0, decls: 1, vars: 0, template: function NzFormItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
/** @nocollapse */
NzFormItemComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ChangeDetectorRef }
];
NzFormItemComponent.propDecorators = {
    nzFlex: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzFormItemComponent, [{
        type: Component,
        args: [{
                selector: 'nz-form-item',
                exportAs: 'nzFormItem',
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                host: {
                    '[class.ant-form-item-has-success]': 'status === "success"',
                    '[class.ant-form-item-has-warning]': 'status === "warning"',
                    '[class.ant-form-item-has-error]': 'status === "error"',
                    '[class.ant-form-item-is-validating]': 'status === "validating"',
                    '[class.ant-form-item-has-feedback]': 'hasFeedback && status',
                    '[class.ant-form-item-with-help]': 'withHelpClass'
                },
                template: ` <ng-content></ng-content> `
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ChangeDetectorRef }]; }, { nzFlex: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    NzFormItemComponent.prototype.status;
    /** @type {?} */
    NzFormItemComponent.prototype.hasFeedback;
    /** @type {?} */
    NzFormItemComponent.prototype.withHelpClass;
    /**
     * @type {?}
     * @private
     */
    NzFormItemComponent.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    NzFormItemComponent.prototype.cdr;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsibmctem9ycm8tYW50ZC9mb3JtL2Zvcm0taXRlbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBS0EsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBRUwsU0FBUyxFQUNULGlCQUFpQixFQUNsQixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDNUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQjtBQUNHO0FBRUM7Ozs7QUFpQkosTUFBTSxPQUFPLG1CQUFtQjtBQUFHO0FBQVE7QUFDdEM7QUFDcUI7QUFBc0I7QUFBUSxJQTJCdEQsWUFBWSxVQUFzQixFQUFFLFFBQW1CLEVBQVUsR0FBc0I7QUFDekYsUUFEbUUsUUFBRyxHQUFILEdBQUcsQ0FBbUI7QUFBQyxRQXJCeEYsV0FBTSxHQUE0QixJQUFJLENBQUM7QUFDekMsUUFBRSxnQkFBVyxHQUFHLEtBQUssQ0FBQztBQUN0QixRQUFFLGtCQUFhLEdBQUcsS0FBSyxDQUFDO0FBQ3hCLFFBQ1UsYUFBUSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7QUFDbkMsUUFpQkksUUFBUSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQ2pFLElBQUUsQ0FBQztBQUNIO0FBQ087QUFLRDtBQUFvQjtBQUFtQjtBQUFRLElBbENuRCxJQUFhLE1BQU0sQ0FBQyxDQUFVO0FBQ2hDLFFBQUksZUFBZSxDQUFDLDJEQUEyRCxDQUFDLENBQUM7QUFDakYsSUFBRSxDQUFDO0FBQ0g7QUFDTztBQUF3QjtBQUN2QjtBQUFRLElBS2Qsa0JBQWtCLENBQUMsS0FBYztBQUFJLFFBQ25DLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO0FBQy9CLFFBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUM1QixJQUFFLENBQUM7QUFDSDtBQUNPO0FBQXlCO0FBQW1CO0FBQzdDLElBREosU0FBUyxDQUFDLE1BQStCO0FBQUksUUFDM0MsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDekIsUUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQzVCLElBQUUsQ0FBQztBQUNIO0FBQ087QUFBOEI7QUFDNUI7QUFBUSxJQURmLGNBQWMsQ0FBQyxXQUFvQjtBQUFJLFFBQ3JDLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0FBQ25DLFFBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUM1QixJQUFFLENBQUM7QUFDSDtBQUNPO0FBQW1CO0FBQVEsSUFJaEMsV0FBVztBQUFLLFFBQ2QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUN6QixRQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDN0IsSUFBRSxDQUFDO0FBQ0g7K0NBckRDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsY0FBYyxrQkFDeEIsUUFBUSxFQUFFLFlBQVksa0JBQ3RCLG1CQUFtQixFQUFFLEtBQUssa0JBQzFCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQztJQUFNLGtCQUMvQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSSxrQkFDckMsSUFBSSxFQUFFLHNCQUNKLG1DQUFtQyxFQUFFLHNCQUFzQixzQkFDM0Q7Y0FBbUMsRUFBRSxzQkFBc0Isc0JBQzNELGlDQUFpQyxFQUFFLG9CQUFvQixzQkFDdkQscUNBQXFDLEVBQUUseUJBQXlCLHNCQUNoRSxvQ0FBb0MsRUFBRSx1QkFBdUIsc0JBQzdELGlDQUFpQyxFQUFFO0FBQWUsa0JBQ25ELGtCQUNELFFBQVEsRUFBRSw2QkFBNkIsY0FDeEM7OztpREFDRztBQUFDO0FBQW1CO0FBQ3RCLFlBOUJBLFVBQVU7QUFDVixZQUVBLFNBQVM7QUFDVCxZQU5BLGlCQUFpQjtBQUNsQjtBQUFHO0FBR0cscUJBK0JKLEtBQUs7QUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUM7QUFBYTtBQUNmLElBR1gscUNBQXVDO0FBQ3pDO0FBQXFCLElBQW5CLDBDQUFvQjtBQUN0QjtBQUFxQixJQUFuQiw0Q0FBc0I7QUFDeEI7QUFDTztBQUFpQjtBQUVyQjtBQUFRLElBRlQsdUNBQWlDO0FBQ25DO0FBQ087QUFBaUI7QUFBZ0I7QUFDckMsSUFjd0Qsa0NBQThCO0FBQUM7QUFBRSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5cbmltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBJbnB1dCxcbiAgT25EZXN0cm95LFxuICBSZW5kZXJlcjIsXG4gIFZpZXdFbmNhcHN1bGF0aW9uXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyB3YXJuRGVwcmVjYXRpb24gfSBmcm9tICduZy16b3Jyby1hbnRkL2NvcmUvbG9nZ2VyJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IHR5cGUgTnpGb3JtQ29udHJvbFN0YXR1c1R5cGUgPSAnc3VjY2VzcycgfCAnZXJyb3InIHwgJ3dhcm5pbmcnIHwgJ3ZhbGlkYXRpbmcnIHwgbnVsbDtcblxuLyoqIHNob3VsZCBhZGQgbnotcm93IGRpcmVjdGl2ZSB0byBob3N0LCB0cmFjayBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy84Nzg1ICoqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbnotZm9ybS1pdGVtJyxcbiAgZXhwb3J0QXM6ICduekZvcm1JdGVtJyxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5hbnQtZm9ybS1pdGVtLWhhcy1zdWNjZXNzXSc6ICdzdGF0dXMgPT09IFwic3VjY2Vzc1wiJyxcbiAgICAnW2NsYXNzLmFudC1mb3JtLWl0ZW0taGFzLXdhcm5pbmddJzogJ3N0YXR1cyA9PT0gXCJ3YXJuaW5nXCInLFxuICAgICdbY2xhc3MuYW50LWZvcm0taXRlbS1oYXMtZXJyb3JdJzogJ3N0YXR1cyA9PT0gXCJlcnJvclwiJyxcbiAgICAnW2NsYXNzLmFudC1mb3JtLWl0ZW0taXMtdmFsaWRhdGluZ10nOiAnc3RhdHVzID09PSBcInZhbGlkYXRpbmdcIicsXG4gICAgJ1tjbGFzcy5hbnQtZm9ybS1pdGVtLWhhcy1mZWVkYmFja10nOiAnaGFzRmVlZGJhY2sgJiYgc3RhdHVzJyxcbiAgICAnW2NsYXNzLmFudC1mb3JtLWl0ZW0td2l0aC1oZWxwXSc6ICd3aXRoSGVscENsYXNzJ1xuICB9LFxuICB0ZW1wbGF0ZTogYCA8bmctY29udGVudD48L25nLWNvbnRlbnQ+IGBcbn0pXG5leHBvcnQgY2xhc3MgTnpGb3JtSXRlbUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSwgT25EZXN0cm95IHtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIDEwLjAuMC4gJ256RmxleCcgaXMgZGVwcmVjYXRlZCBhbmQgZ29pbmcgdG8gYmUgcmVtb3ZlZCBpbiAxMC4wLjAuXG4gICAqL1xuICBASW5wdXQoKSBzZXQgbnpGbGV4KF86IGJvb2xlYW4pIHtcbiAgICB3YXJuRGVwcmVjYXRpb24oYCduekZsZXgnIGlzIGRlcHJlY2F0ZWQgYW5kIGdvaW5nIHRvIGJlIHJlbW92ZWQgaW4gMTAuMC4wLmApO1xuICB9XG5cbiAgc3RhdHVzOiBOekZvcm1Db250cm9sU3RhdHVzVHlwZSA9IG51bGw7XG4gIGhhc0ZlZWRiYWNrID0gZmFsc2U7XG4gIHdpdGhIZWxwQ2xhc3MgPSBmYWxzZTtcblxuICBwcml2YXRlIGRlc3Ryb3kkID0gbmV3IFN1YmplY3QoKTtcblxuICBzZXRXaXRoSGVscFZpYVRpcHModmFsdWU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLndpdGhIZWxwQ2xhc3MgPSB2YWx1ZTtcbiAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuXG4gIHNldFN0YXR1cyhzdGF0dXM6IE56Rm9ybUNvbnRyb2xTdGF0dXNUeXBlKTogdm9pZCB7XG4gICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gIH1cblxuICBzZXRIYXNGZWVkYmFjayhoYXNGZWVkYmFjazogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuaGFzRmVlZGJhY2sgPSBoYXNGZWVkYmFjaztcbiAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICAgIHJlbmRlcmVyLmFkZENsYXNzKGVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2FudC1mb3JtLWl0ZW0nKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuZGVzdHJveSQubmV4dCgpO1xuICAgIHRoaXMuZGVzdHJveSQuY29tcGxldGUoKTtcbiAgfVxufVxuIl19