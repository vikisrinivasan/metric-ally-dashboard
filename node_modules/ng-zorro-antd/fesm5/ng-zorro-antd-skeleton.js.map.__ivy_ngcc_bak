{"version":3,"file":"ng-zorro-antd-skeleton.js","sources":["ng://ng-zorro-antd/skeleton/skeleton.component.ts","ng://ng-zorro-antd/skeleton/skeleton-element.component.ts","ng://ng-zorro-antd/skeleton/skeleton.module.ts","ng://ng-zorro-antd/skeleton/skeleton.type.ts"],"sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Renderer2,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { toCssPixel } from 'ng-zorro-antd/core/util';\nimport { NzSkeletonAvatar, NzSkeletonAvatarShape, NzSkeletonAvatarSize, NzSkeletonParagraph, NzSkeletonTitle } from './skeleton.type';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  selector: 'nz-skeleton',\n  exportAs: 'nzSkeleton',\n  host: {\n    '[class.ant-skeleton-with-avatar]': '!!nzAvatar',\n    '[class.ant-skeleton-active]': 'nzActive'\n  },\n  template: `\n    <ng-container *ngIf=\"nzLoading\">\n      <div class=\"ant-skeleton-header\" *ngIf=\"!!nzAvatar\">\n        <nz-skeleton-element nzType=\"avatar\" [nzSize]=\"avatar.size\" [nzShape]=\"avatar.shape\"></nz-skeleton-element>\n      </div>\n      <div class=\"ant-skeleton-content\">\n        <h3 *ngIf=\"!!nzTitle\" class=\"ant-skeleton-title\" [style.width]=\"toCSSUnit(title.width)\"></h3>\n        <ul *ngIf=\"!!nzParagraph\" class=\"ant-skeleton-paragraph\">\n          <li *ngFor=\"let row of rowsList; let i = index\" [style.width]=\"toCSSUnit(widthList[i])\"></li>\n        </ul>\n      </div>\n    </ng-container>\n    <ng-container *ngIf=\"!nzLoading\">\n      <ng-content></ng-content>\n    </ng-container>\n  `\n})\nexport class NzSkeletonComponent implements OnInit, OnChanges {\n  @Input() nzActive = false;\n  @Input() nzLoading = true;\n  @Input() nzTitle: NzSkeletonTitle | boolean = true;\n  @Input() nzAvatar: NzSkeletonAvatar | boolean = false;\n  @Input() nzParagraph: NzSkeletonParagraph | boolean = true;\n\n  title!: NzSkeletonTitle;\n  avatar!: NzSkeletonAvatar;\n  paragraph!: NzSkeletonParagraph;\n  rowsList: number[] = [];\n  widthList: Array<number | string> = [];\n\n  constructor(private cdr: ChangeDetectorRef, renderer: Renderer2, elementRef: ElementRef) {\n    renderer.addClass(elementRef.nativeElement, 'ant-skeleton');\n  }\n\n  toCSSUnit(value: number | string = ''): string {\n    return toCssPixel(value);\n  }\n\n  private getTitleProps(): NzSkeletonTitle {\n    const hasAvatar: boolean = !!this.nzAvatar;\n    const hasParagraph: boolean = !!this.nzParagraph;\n    let width = '';\n    if (!hasAvatar && hasParagraph) {\n      width = '38%';\n    } else if (hasAvatar && hasParagraph) {\n      width = '50%';\n    }\n    return { width, ...this.getProps(this.nzTitle) };\n  }\n\n  private getAvatarProps(): NzSkeletonAvatar {\n    const shape: NzSkeletonAvatarShape = !!this.nzTitle && !this.nzParagraph ? 'square' : 'circle';\n    const size: NzSkeletonAvatarSize = 'large';\n    return { shape, size, ...this.getProps(this.nzAvatar) };\n  }\n\n  private getParagraphProps(): NzSkeletonParagraph {\n    const hasAvatar: boolean = !!this.nzAvatar;\n    const hasTitle: boolean = !!this.nzTitle;\n    const basicProps: NzSkeletonParagraph = {};\n    // Width\n    if (!hasAvatar || !hasTitle) {\n      basicProps.width = '61%';\n    }\n    // Rows\n    if (!hasAvatar && hasTitle) {\n      basicProps.rows = 3;\n    } else {\n      basicProps.rows = 2;\n    }\n    return { ...basicProps, ...this.getProps(this.nzParagraph) };\n  }\n\n  private getProps<T>(prop: T | boolean | undefined): T | {} {\n    return prop && typeof prop === 'object' ? prop : {};\n  }\n\n  private getWidthList(): Array<number | string> {\n    const { width, rows } = this.paragraph;\n    let widthList: Array<string | number> = [];\n    if (width && Array.isArray(width)) {\n      widthList = width;\n    } else if (width && !Array.isArray(width)) {\n      widthList = [];\n      widthList[rows! - 1] = width;\n    }\n    return widthList;\n  }\n\n  private updateProps(): void {\n    this.title = this.getTitleProps();\n    this.avatar = this.getAvatarProps();\n    this.paragraph = this.getParagraphProps();\n    this.rowsList = [...Array(this.paragraph.rows)];\n    this.widthList = this.getWidthList();\n    this.cdr.markForCheck();\n  }\n\n  ngOnInit(): void {\n    this.updateProps();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.nzTitle || changes.nzAvatar || changes.nzParagraph) {\n      this.updateProps();\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { ChangeDetectionStrategy, Component, Directive, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport {\n  NzSkeletonAvatarShape,\n  NzSkeletonAvatarSize,\n  NzSkeletonButtonShape,\n  NzSkeletonButtonSize,\n  NzSkeletonInputSize\n} from './skeleton.type';\n\n@Directive({\n  selector: 'nz-skeleton-element',\n  host: {\n    '[class.ant-skeleton]': 'true',\n    '[class.ant-skeleton-element]': 'true',\n    '[class.ant-skeleton-active]': 'nzActive'\n  }\n})\nexport class NzSkeletonElementDirective {\n  @Input() nzActive: boolean = false;\n  @Input() nzType!: 'button' | 'input' | 'avatar';\n}\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'nz-skeleton-element[nzType=\"button\"]',\n  template: `\n    <span\n      [class.ant-skeleton-button]=\"true\"\n      [class.ant-skeleton-button-round]=\"nzShape === 'round'\"\n      [class.ant-skeleton-button-circle]=\"nzShape === 'circle'\"\n      [class.ant-skeleton-button-lg]=\"nzSize === 'large'\"\n      [class.ant-skeleton-button-sm]=\"nzSize === 'small'\"\n    >\n    </span>\n  `\n})\nexport class NzSkeletonElementButtonComponent {\n  @Input() nzShape: NzSkeletonButtonShape = 'default';\n  @Input() nzSize: NzSkeletonButtonSize = 'default';\n}\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'nz-skeleton-element[nzType=\"avatar\"]',\n  template: `\n    <span\n      [class.ant-skeleton-avatar]=\"true\"\n      [class.ant-skeleton-avatar-square]=\"nzShape === 'square'\"\n      [class.ant-skeleton-avatar-circle]=\"nzShape === 'circle'\"\n      [class.ant-skeleton-avatar-lg]=\"nzSize === 'large'\"\n      [class.ant-skeleton-avatar-sm]=\"nzSize === 'small'\"\n      [ngStyle]=\"styleMap\"\n    >\n    </span>\n  `\n})\nexport class NzSkeletonElementAvatarComponent implements OnChanges {\n  static ngAcceptInputType_nzShape: NzSkeletonAvatarShape | undefined | null;\n  static ngAcceptInputType_AvatarSize: NzSkeletonAvatarSize | undefined | null;\n\n  @Input() nzShape: NzSkeletonAvatarShape = 'circle';\n  @Input() nzSize: NzSkeletonAvatarSize = 'default';\n\n  styleMap = {};\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.nzSize && typeof this.nzSize === 'number') {\n      const sideLength = `${this.nzSize}px`;\n      this.styleMap = { width: sideLength, height: sideLength, 'line-height': sideLength };\n    } else {\n      this.styleMap = {};\n    }\n  }\n}\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'nz-skeleton-element[nzType=\"input\"]',\n  template: `\n    <span\n      [class.ant-skeleton-input]=\"true\"\n      [class.ant-skeleton-input-lg]=\"nzSize === 'large'\"\n      [class.ant-skeleton-input-sm]=\"nzSize === 'small'\"\n    >\n    </span>\n  `\n})\nexport class NzSkeletonElementInputComponent {\n  @Input() nzSize: NzSkeletonInputSize = 'default';\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  NzSkeletonElementAvatarComponent,\n  NzSkeletonElementButtonComponent,\n  NzSkeletonElementDirective,\n  NzSkeletonElementInputComponent\n} from './skeleton-element.component';\nimport { NzSkeletonComponent } from './skeleton.component';\n\n@NgModule({\n  declarations: [\n    NzSkeletonComponent,\n    NzSkeletonElementDirective,\n    NzSkeletonElementButtonComponent,\n    NzSkeletonElementAvatarComponent,\n    NzSkeletonElementInputComponent\n  ],\n  imports: [CommonModule],\n  exports: [\n    NzSkeletonComponent,\n    NzSkeletonElementDirective,\n    NzSkeletonElementButtonComponent,\n    NzSkeletonElementAvatarComponent,\n    NzSkeletonElementInputComponent\n  ]\n})\nexport class NzSkeletonModule {}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nexport type NzSkeletonParagraphWidth = number | string | Array<number | string>;\nexport type NzSkeletonButtonShape = 'circle' | 'round' | 'default';\nexport type NzSkeletonAvatarShape = 'square' | 'circle';\nexport type NzSkeletonInputSize = 'large' | 'small' | 'default';\nexport type NzSkeletonButtonSize = NzSkeletonInputSize;\nexport type NzSkeletonAvatarSize = NzSkeletonInputSize | number;\n\nexport interface NzSkeletonAvatar {\n  size?: NzSkeletonAvatarSize;\n  shape?: NzSkeletonAvatarShape;\n}\n\nexport interface NzSkeletonTitle {\n  width?: number | string;\n}\n\nexport interface NzSkeletonParagraph {\n  rows?: number;\n  width?: NzSkeletonParagraphWidth;\n}\n"],"names":[],"mappings":"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"}