{"version":3,"file":"ng-zorro-antd-core-resize-observers.umd.js","sources":["ng-zorro-antd/core/resize-observers/resize-observers.service.ts","ng-zorro-antd/core/resize-observers/resize-observers.module.ts"],"names":["Injectable","coerceElement","Observable","Subject","NgModule"],"mappings":"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","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { coerceElement } from '@angular/cdk/coercion';\nimport { ElementRef, Injectable, OnDestroy } from '@angular/core';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { Observable, Observer, Subject } from 'rxjs';\n\n/**\n * Factory that creates a new ResizeObserver and allows us to stub it out in unit tests.\n */\n@Injectable({ providedIn: 'root' })\nexport class NzResizeObserverFactory {\n  create(callback: ResizeObserverCallback): ResizeObserver | null {\n    return typeof ResizeObserver === 'undefined' ? null : new ResizeObserver(callback);\n  }\n}\n\n/** An injectable service that allows watching elements for changes to their content. */\n@Injectable({ providedIn: 'root' })\nexport class NzResizeObserver implements OnDestroy {\n  /** Keeps track of the existing ResizeObservers so they can be reused. */\n  private observedElements = new Map<\n    Element,\n    {\n      observer: ResizeObserver | null;\n      stream: Subject<ResizeObserverEntry[]>;\n      count: number;\n    }\n  >();\n\n  constructor(private nzResizeObserverFactory: NzResizeObserverFactory) {}\n\n  ngOnDestroy(): void {\n    this.observedElements.forEach((_, element) => this.cleanupObserver(element));\n  }\n\n  observe(elementOrRef: Element | ElementRef<Element>): Observable<ResizeObserverEntry[]> {\n    const element = coerceElement(elementOrRef);\n\n    return new Observable((observer: Observer<ResizeObserverEntry[]>) => {\n      const stream = this.observeElement(element);\n      const subscription = stream.subscribe(observer);\n\n      return () => {\n        subscription.unsubscribe();\n        this.unobserveElement(element);\n      };\n    });\n  }\n\n  /**\n   * Observes the given element by using the existing ResizeObserver if available, or creating a\n   * new one if not.\n   */\n  private observeElement(element: Element): Subject<ResizeObserverEntry[]> {\n    if (!this.observedElements.has(element)) {\n      const stream = new Subject<ResizeObserverEntry[]>();\n      const observer = this.nzResizeObserverFactory.create(mutations => stream.next(mutations));\n      if (observer) {\n        observer.observe(element);\n      }\n      this.observedElements.set(element, { observer, stream, count: 1 });\n    } else {\n      this.observedElements.get(element)!.count++;\n    }\n    return this.observedElements.get(element)!.stream;\n  }\n\n  /**\n   * Un-observes the given element and cleans up the underlying ResizeObserver if nobody else is\n   * observing this element.\n   */\n  private unobserveElement(element: Element): void {\n    if (this.observedElements.has(element)) {\n      this.observedElements.get(element)!.count--;\n      if (!this.observedElements.get(element)!.count) {\n        this.cleanupObserver(element);\n      }\n    }\n  }\n\n  /** Clean up the underlying ResizeObserver for the specified element. */\n  private cleanupObserver(element: Element): void {\n    if (this.observedElements.has(element)) {\n      const { observer, stream } = this.observedElements.get(element)!;\n      if (observer) {\n        observer.disconnect();\n      }\n      stream.complete();\n      this.observedElements.delete(element);\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { NgModule } from '@angular/core';\nimport { NzResizeObserverFactory } from './resize-observers.service';\n\n@NgModule({\n  providers: [NzResizeObserverFactory]\n})\nexport class NzResizeObserversModule {}\n"]}