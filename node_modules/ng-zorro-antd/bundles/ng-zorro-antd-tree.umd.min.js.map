{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://ng-zorro-antd/tree/tree-indent.component.ts","ng://ng-zorro-antd/tree/tree-node-checkbox.component.ts","ng://ng-zorro-antd/tree/tree-node-switcher.component.ts","ng://ng-zorro-antd/tree/tree-node-title.component.ts","ng://ng-zorro-antd/tree/tree-node.component.ts","ng://ng-zorro-antd/tree/tree.service.ts","ng://ng-zorro-antd/tree/tree.component.ts","ng://ng-zorro-antd/tree/tree.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","__read","o","n","m","Symbol","iterator","e","call","ar","next","done","push","value","error","NzTreeIndentComponent","nzSelectMode","listOfUnit","unitMapOfClass","index","_a","ngOnInit","ngOnChanges","changes","nzTreeLevel","concat","__spread","currentValue","Component","args","selector","exportAs","template","changeDetection","ChangeDetectionStrategy","OnPush","preserveWhitespaces","host","[attr.aria-hidden]","[class.ant-tree-indent]","[class.ant-select-tree-indent]","Input","NzTreeNodeCheckboxComponent","[class.ant-select-tree-checkbox]","[class.ant-select-tree-checkbox-checked]","[class.ant-select-tree-checkbox-indeterminate]","[class.ant-select-tree-checkbox-disabled]","[class.ant-tree-checkbox]","[class.ant-tree-checkbox-checked]","[class.ant-tree-checkbox-indeterminate]","[class.ant-tree-checkbox-disabled]","NzTreeNodeSwitcherComponent","isLeaf","nzShowLine","isExpanded","[class.ant-select-tree-switcher]","[class.ant-select-tree-switcher-noop]","[class.ant-select-tree-switcher_open]","[class.ant-select-tree-switcher_close]","[class.ant-tree-switcher]","[class.ant-tree-switcher-noop]","[class.ant-tree-switcher_open]","[class.ant-tree-switcher_close]","NzTreeNodeTitleComponent","treeTemplate","selectMode","draggable","isDisabled","isMatched","searchValue","[attr.title]","[attr.draggable]","[attr.aria-grabbed]","[class.draggable]","[class.ant-select-tree-node-content-wrapper]","[class.ant-select-tree-node-content-wrapper-open]","[class.ant-select-tree-node-content-wrapper-close]","[class.ant-select-tree-node-selected]","[class.ant-tree-node-content-wrapper]","[class.ant-tree-node-content-wrapper-open]","[class.ant-tree-node-content-wrapper-close]","[class.ant-tree-node-selected]","NzTreeNodeComponent","nzTreeService","ngZone","renderer","elementRef","cdr","noAnimation","icon","title","isLoading","isSelected","nzHideUnMatched","nzNoAnimation","nzShowIcon","nzTreeTemplate","nzSearchValue","nzDraggable","nzClick","EventEmitter","nzDblClick","nzContextMenu","nzCheckBoxChange","nzExpandChange","nzOnDragStart","nzOnDragEnter","nzOnDragOver","nzOnDragLeave","nzOnDrop","nzOnDragEnd","destroy$","Subject","dragPos","dragPosClass","0","1","-1","canHide","onMousedown","event","preventDefault","clickExpand","nzAsyncData","nzTreeNode","children","setExpanded","setExpandedNodeList","eventNext","formatEvent","emit","clickSelect","isSelectable","setSelectedNodeList","dblClick","contextMenu","clickCheckBox","isDisableCheckbox","isChecked","isHalfChecked","setCheckedNodeList","clearDragClass","_this","forEach","removeClass","nativeElement","handleDragStart","setData","setSelectedNode","handleDragEnter","run","handleDragOver","dropPosition","calcDropPosition","addClass","handleDragLeave","handleDragDrop","node","getSelectedNode","dropEvent","dragEndEvent","nzBeforeDrop","dragNode","pos","subscribe","canDrop","dropAndApply","handleDragEnd","handDragEvent","runOutsideAngular","fromEvent","pipe","takeUntil","complete","markForCheck","component","ngOnDestroy","[class.ant-select-tree-treenode]","[class.ant-select-tree-treenode-disabled]","[class.ant-select-tree-treenode-switcher-open]","[class.ant-select-tree-treenode-switcher-close]","[class.ant-select-tree-treenode-checkbox-checked]","[class.ant-select-tree-treenode-checkbox-indeterminate]","[class.ant-select-tree-treenode-selected]","[class.ant-select-tree-treenode-loading]","[class.ant-tree-treenode]","[class.ant-tree-treenode-disabled]","[class.ant-tree-treenode-switcher-open]","[class.ant-tree-treenode-switcher-close]","[class.ant-tree-treenode-checkbox-checked]","[class.ant-tree-treenode-checkbox-indeterminate]","[class.ant-tree-treenode-selected]","[class.ant-tree-treenode-loading]","[style.display]","(mousedown)","NzTreeBaseService","NgZone","Renderer2","ElementRef","ChangeDetectorRef","NzNoAnimationDirective","type","Host","Optional","Output","InputBoolean","NzTreeService","_super","Injectable","NzTreeServiceFactory","higherOrderService","treeService","NzTreeComponent","nzConfigService","nzBlockNode","nzExpandAll","nzCheckStrictly","nzShowExpand","nzCheckable","nzMultiple","nzVirtualItemSize","nzVirtualMaxBufferPx","nzVirtualMinBufferPx","nzVirtualHeight","nzData","nzExpandedKeys","nzSelectedKeys","nzCheckedKeys","nzFlattenNodes","beforeInit","nzExpandedKeysChange","nzSelectedKeysChange","nzCheckedKeysChange","nzSearchValueChange","HIDDEN_STYLE","width","height","display","overflow","opacity","border","padding","margin","onChange","onTouched","writeValue","handleNzData","registerOnChange","fn","registerOnTouched","renderTreeProperties","useDefaultExpandedKeys","expandAll","isMultiple","isCheckStrictly","handleCheckedKeys","handleExpandedKeys","handleSelectedKeys","firstChange","handleSearchValue","nzSearchFunc","currentExpandedKeys","getExpandedNodeList","map","v","newExpandedKeys","handleFlattenNodes","rootNodes","trackByFlattenNode","_","isArray","data","coerceTreeNodes","initTree","expandKeys","flattenTreeData","keys","conductCheck","conductExpandedKeys","isMulti","conductSelectedKeys","searchFunc","dataList","origin","toLowerCase","includes","expandNodeAllParentBySearch","setMatchedNodeList","eventTriggerChanged","eventName","renderTree","conduct","selectedNode","flattenNodes$","ngAfterViewInit","animations","treeCollapseMotion","providers","provide","useFactory","deps","SkipSelf","NzTreeHigherOrderServiceToken","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","[class.ant-select-tree]","[class.ant-select-tree-show-line]","[class.ant-select-tree-icon-hide]","[class.ant-select-tree-block-node]","[class.ant-tree]","[class.ant-tree-show-line]","[class.ant-tree-icon-hide]","[class.ant-tree-block-node]","[class.draggable-tree]","NzConfigService","ContentChild","static","ViewChild","CdkVirtualScrollViewport","read","WithConfig","NzTreeBase","NzTreeModule","NgModule","imports","CommonModule","NzOutletModule","NzIconModule","NzNoAnimationModule","NzHighlightModule","ScrollingModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\n\n@Component({\n  selector: 'nz-tree-indent',\n  exportAs: 'nzTreeIndent',\n  template: ` <span *ngFor=\"let i of listOfUnit; let index = index\" [ngClass]=\"unitMapOfClass(index)\"></span> `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n  host: {\n    '[attr.aria-hidden]': 'true',\n    '[class.ant-tree-indent]': '!nzSelectMode',\n    '[class.ant-select-tree-indent]': 'nzSelectMode'\n  }\n})\nexport class NzTreeIndentComponent implements OnInit, OnChanges {\n  @Input() nzTreeLevel?: number;\n  @Input() nzIsStart?: boolean[];\n  @Input() nzIsEnd?: boolean[];\n  @Input() nzSelectMode = false;\n\n  listOfUnit: number[] = [];\n\n  unitMapOfClass(index: number): { [key: string]: boolean } {\n    return {\n      [`ant-tree-indent-unit`]: !this.nzSelectMode,\n      [`ant-tree-indent-unit-start`]: !this.nzSelectMode && this.nzIsStart![index + 1],\n      [`ant-tree-indent-unit-end`]: !this.nzSelectMode && this.nzIsEnd![index + 1],\n      [`ant-select-tree-indent-unit`]: this.nzSelectMode,\n      [`ant-select-tree-indent-unit-start`]: this.nzSelectMode && this.nzIsStart![index + 1],\n      [`ant-select-tree-indent-unit-end`]: this.nzSelectMode && this.nzIsEnd![index + 1]\n    };\n  }\n\n  ngOnInit(): void {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const { nzTreeLevel } = changes;\n    if (nzTreeLevel) {\n      this.listOfUnit = [...new Array(nzTreeLevel.currentValue || 0)];\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'nz-tree-node-checkbox',\n  template: ` <span [class.ant-tree-checkbox-inner]=\"!nzSelectMode\" [class.ant-select-tree-checkbox-inner]=\"nzSelectMode\"></span> `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n  host: {\n    '[class.ant-select-tree-checkbox]': `nzSelectMode`,\n    '[class.ant-select-tree-checkbox-checked]': `nzSelectMode && isChecked`,\n    '[class.ant-select-tree-checkbox-indeterminate]': `nzSelectMode && isHalfChecked`,\n    '[class.ant-select-tree-checkbox-disabled]': `nzSelectMode && (isDisabled || isDisableCheckbox)`,\n    '[class.ant-tree-checkbox]': `!nzSelectMode`,\n    '[class.ant-tree-checkbox-checked]': `!nzSelectMode && isChecked`,\n    '[class.ant-tree-checkbox-indeterminate]': `!nzSelectMode && isHalfChecked`,\n    '[class.ant-tree-checkbox-disabled]': `!nzSelectMode && (isDisabled || isDisableCheckbox)`\n  }\n})\nexport class NzTreeNodeCheckboxComponent {\n  @Input() nzSelectMode = false;\n  @Input() isChecked?: boolean;\n  @Input() isHalfChecked?: boolean;\n  @Input() isDisabled?: boolean;\n  @Input() isDisableCheckbox?: boolean;\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { ChangeDetectionStrategy, Component, Input, TemplateRef } from '@angular/core';\nimport { NzTreeNode, NzTreeNodeOptions } from 'ng-zorro-antd/core/tree';\n\n@Component({\n  selector: 'nz-tree-node-switcher',\n  template: `\n    <ng-container *ngIf=\"isShowSwitchIcon\">\n      <ng-container *ngIf=\"!isLoading; else loadingTemplate\">\n        <ng-container *nzStringTemplateOutlet=\"nzExpandedIcon; context: { $implicit: context, origin: context.origin }\">\n          <i\n            nz-icon\n            nzType=\"caret-down\"\n            [class.ant-select-tree-switcher-icon]=\"nzSelectMode\"\n            [class.ant-tree-switcher-icon]=\"!nzSelectMode\"\n          ></i>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"nzShowLine\">\n      <ng-container *ngIf=\"!isLoading; else loadingTemplate\">\n        <ng-container *nzStringTemplateOutlet=\"nzExpandedIcon; context: { $implicit: context, origin: context.origin }\">\n          <i\n            *ngIf=\"isShowLineIcon\"\n            nz-icon\n            [nzType]=\"isSwitcherOpen ? 'minus-square' : 'plus-square'\"\n            class=\"ant-tree-switcher-line-icon\"\n          ></i>\n          <i *ngIf=\"!isShowLineIcon\" nz-icon nzType=\"file\" class=\"ant-tree-switcher-line-icon\"></i>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n    <ng-template #loadingTemplate>\n      <i nz-icon nzType=\"loading\" [nzSpin]=\"true\" class=\"ant-tree-switcher-loading-icon\"></i>\n    </ng-template>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n  host: {\n    '[class.ant-select-tree-switcher]': 'nzSelectMode',\n    '[class.ant-select-tree-switcher-noop]': 'nzSelectMode && isLeaf',\n    '[class.ant-select-tree-switcher_open]': 'nzSelectMode && isSwitcherOpen',\n    '[class.ant-select-tree-switcher_close]': 'nzSelectMode && isSwitcherClose',\n    '[class.ant-tree-switcher]': '!nzSelectMode',\n    '[class.ant-tree-switcher-noop]': '!nzSelectMode && isLeaf',\n    '[class.ant-tree-switcher_open]': '!nzSelectMode && isSwitcherOpen',\n    '[class.ant-tree-switcher_close]': '!nzSelectMode && isSwitcherClose'\n  }\n})\nexport class NzTreeNodeSwitcherComponent {\n  @Input() nzShowExpand?: boolean;\n  @Input() nzShowLine?: boolean;\n  @Input() nzExpandedIcon?: TemplateRef<{ $implicit: NzTreeNode; origin: NzTreeNodeOptions }>;\n  @Input() nzSelectMode = false;\n  @Input() context!: NzTreeNode;\n  @Input() isLeaf?: boolean;\n  @Input() isLoading?: boolean;\n  @Input() isExpanded?: boolean;\n\n  get isShowLineIcon(): boolean {\n    return !this.isLeaf && !!this.nzShowLine;\n  }\n\n  get isShowSwitchIcon(): boolean {\n    return !this.isLeaf && !this.nzShowLine;\n  }\n\n  get isSwitcherOpen(): boolean {\n    return !!this.isExpanded && !this.isLeaf;\n  }\n\n  get isSwitcherClose(): boolean {\n    return !this.isExpanded && !this.isLeaf;\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { ChangeDetectionStrategy, Component, Input, TemplateRef } from '@angular/core';\nimport { NzTreeNode, NzTreeNodeOptions } from 'ng-zorro-antd/core/tree';\n\n@Component({\n  selector: 'nz-tree-node-title',\n  template: ` <ng-template [ngTemplateOutlet]=\"treeTemplate\" [ngTemplateOutletContext]=\"{ $implicit: context, origin: context.origin }\">\n    </ng-template>\n    <ng-container *ngIf=\"!treeTemplate\">\n      <span\n        *ngIf=\"icon && showIcon\"\n        [class.ant-tree-icon__open]=\"isSwitcherOpen\"\n        [class.ant-tree-icon__close]=\"isSwitcherClose\"\n        [class.ant-tree-icon_loading]=\"isLoading\"\n        [class.ant-select-tree-iconEle]=\"selectMode\"\n        [class.ant-tree-iconEle]=\"!selectMode\"\n      >\n        <span\n          [class.ant-select-tree-iconEle]=\"selectMode\"\n          [class.ant-select-tree-icon__customize]=\"selectMode\"\n          [class.ant-tree-iconEle]=\"!selectMode\"\n          [class.ant-tree-icon__customize]=\"!selectMode\"\n        >\n          <i nz-icon *ngIf=\"icon\" [nzType]=\"icon\"></i>\n        </span>\n      </span>\n      <span class=\"ant-tree-title\" [innerHTML]=\"title | nzHighlight: matchedValue:'i':'font-highlight'\"> </span>\n    </ng-container>`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n  host: {\n    '[attr.title]': 'title',\n    '[attr.draggable]': 'canDraggable',\n    '[attr.aria-grabbed]': 'canDraggable',\n    '[class.draggable]': 'canDraggable',\n    '[class.ant-select-tree-node-content-wrapper]': `selectMode`,\n    '[class.ant-select-tree-node-content-wrapper-open]': `selectMode && isSwitcherOpen`,\n    '[class.ant-select-tree-node-content-wrapper-close]': `selectMode && isSwitcherClose`,\n    '[class.ant-select-tree-node-selected]': `selectMode && isSelected`,\n    '[class.ant-tree-node-content-wrapper]': `!selectMode`,\n    '[class.ant-tree-node-content-wrapper-open]': `!selectMode && isSwitcherOpen`,\n    '[class.ant-tree-node-content-wrapper-close]': `!selectMode && isSwitcherClose`,\n    '[class.ant-tree-node-selected]': `!selectMode && isSelected`\n  }\n})\nexport class NzTreeNodeTitleComponent {\n  @Input() searchValue!: string;\n  @Input() treeTemplate: TemplateRef<{ $implicit: NzTreeNode; origin: NzTreeNodeOptions }> | null = null;\n  @Input() draggable!: boolean;\n  @Input() showIcon!: boolean;\n  @Input() selectMode = false;\n  @Input() context!: NzTreeNode;\n  @Input() icon!: string;\n  @Input() title!: string;\n  @Input() isLoading!: boolean;\n  @Input() isSelected!: boolean;\n  @Input() isDisabled!: boolean;\n  @Input() isMatched!: boolean;\n  @Input() isExpanded!: boolean;\n  @Input() isLeaf!: boolean;\n\n  get canDraggable(): boolean | null {\n    return this.draggable && !this.isDisabled ? true : null;\n  }\n\n  get matchedValue(): string {\n    return this.isMatched ? this.searchValue : '';\n  }\n\n  get isSwitcherOpen(): boolean {\n    return this.isExpanded && !this.isLeaf;\n  }\n\n  get isSwitcherClose(): boolean {\n    return !this.isExpanded && !this.isLeaf;\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Host,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  Renderer2,\n  SimpleChange,\n  TemplateRef\n} from '@angular/core';\nimport { NzNoAnimationDirective } from 'ng-zorro-antd/core/no-animation';\n\nimport { NzFormatBeforeDropEvent, NzFormatEmitEvent, NzTreeBaseService, NzTreeNode, NzTreeNodeOptions } from 'ng-zorro-antd/core/tree';\nimport { BooleanInput } from 'ng-zorro-antd/core/types';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { fromEvent, Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'nz-tree-node',\n  exportAs: 'nzTreeNode',\n  template: `\n    <nz-tree-indent [nzTreeLevel]=\"nzTreeNode.level\" [nzSelectMode]=\"nzSelectMode\" [nzIsStart]=\"isStart\" [nzIsEnd]=\"isEnd\"></nz-tree-indent>\n    <nz-tree-node-switcher\n      *ngIf=\"nzShowExpand\"\n      [nzShowExpand]=\"nzShowExpand\"\n      [nzShowLine]=\"nzShowLine\"\n      [nzExpandedIcon]=\"nzExpandedIcon\"\n      [nzSelectMode]=\"nzSelectMode\"\n      [context]=\"nzTreeNode\"\n      [isLeaf]=\"isLeaf\"\n      [isExpanded]=\"isExpanded\"\n      [isLoading]=\"isLoading\"\n      (click)=\"clickExpand($event)\"\n    ></nz-tree-node-switcher>\n    <nz-tree-node-checkbox\n      *ngIf=\"nzCheckable\"\n      (click)=\"clickCheckBox($event)\"\n      [nzSelectMode]=\"nzSelectMode\"\n      [isChecked]=\"isChecked\"\n      [isHalfChecked]=\"isHalfChecked\"\n      [isDisabled]=\"isDisabled\"\n      [isDisableCheckbox]=\"isDisableCheckbox\"\n    ></nz-tree-node-checkbox>\n    <nz-tree-node-title\n      [icon]=\"icon\"\n      [title]=\"title\"\n      [isLoading]=\"isLoading\"\n      [isSelected]=\"isSelected\"\n      [isDisabled]=\"isDisabled\"\n      [isMatched]=\"isMatched\"\n      [isExpanded]=\"isExpanded\"\n      [isLeaf]=\"isLeaf\"\n      [searchValue]=\"nzSearchValue\"\n      [treeTemplate]=\"nzTreeTemplate\"\n      [draggable]=\"nzDraggable\"\n      [showIcon]=\"nzShowIcon\"\n      [selectMode]=\"nzSelectMode\"\n      [context]=\"nzTreeNode\"\n      (dblclick)=\"dblClick($event)\"\n      (click)=\"clickSelect($event)\"\n      (contextmenu)=\"contextMenu($event)\"\n    ></nz-tree-node-title>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n  host: {\n    '[class.ant-select-tree-treenode]': `nzSelectMode`,\n    '[class.ant-select-tree-treenode-disabled]': `nzSelectMode && isDisabled`,\n    '[class.ant-select-tree-treenode-switcher-open]': `nzSelectMode && isSwitcherOpen`,\n    '[class.ant-select-tree-treenode-switcher-close]': `nzSelectMode && isSwitcherClose`,\n    '[class.ant-select-tree-treenode-checkbox-checked]': `nzSelectMode && isChecked`,\n    '[class.ant-select-tree-treenode-checkbox-indeterminate]': `nzSelectMode && isHalfChecked`,\n    '[class.ant-select-tree-treenode-selected]': `nzSelectMode && isSelected`,\n    '[class.ant-select-tree-treenode-loading]': `nzSelectMode && isLoading`,\n    '[class.ant-tree-treenode]': `!nzSelectMode`,\n    '[class.ant-tree-treenode-disabled]': `!nzSelectMode && isDisabled`,\n    '[class.ant-tree-treenode-switcher-open]': `!nzSelectMode && isSwitcherOpen`,\n    '[class.ant-tree-treenode-switcher-close]': `!nzSelectMode && isSwitcherClose`,\n    '[class.ant-tree-treenode-checkbox-checked]': `!nzSelectMode && isChecked`,\n    '[class.ant-tree-treenode-checkbox-indeterminate]': `!nzSelectMode && isHalfChecked`,\n    '[class.ant-tree-treenode-selected]': `!nzSelectMode && isSelected`,\n    '[class.ant-tree-treenode-loading]': `!nzSelectMode && isLoading`,\n    '[style.display]': 'displayStyle',\n    '(mousedown)': 'onMousedown($event)'\n  }\n})\nexport class NzTreeNodeComponent implements OnInit, OnChanges, OnDestroy {\n  static ngAcceptInputType_nzShowLine: BooleanInput;\n  static ngAcceptInputType_nzShowExpand: BooleanInput;\n  static ngAcceptInputType_nzCheckable: BooleanInput;\n  static ngAcceptInputType_nzAsyncData: BooleanInput;\n  static ngAcceptInputType_nzHideUnMatched: BooleanInput;\n  static ngAcceptInputType_nzNoAnimation: BooleanInput;\n  static ngAcceptInputType_nzSelectMode: BooleanInput;\n  static ngAcceptInputType_nzShowIcon: BooleanInput;\n\n  /**\n   * for global property\n   */\n  @Input() icon: string = '';\n  @Input() title: string = '';\n  @Input() isLoading: boolean = false;\n  @Input() isSelected: boolean = false;\n  @Input() isDisabled: boolean = false;\n  @Input() isMatched: boolean = false;\n  @Input() isExpanded!: boolean;\n  @Input() isLeaf!: boolean;\n  @Input() isChecked?: boolean;\n  @Input() isHalfChecked?: boolean;\n  @Input() isDisableCheckbox?: boolean;\n  @Input() isSelectable?: boolean;\n  @Input() canHide?: boolean;\n  @Input() isStart?: boolean[];\n  @Input() isEnd?: boolean[];\n  @Input() nzTreeNode!: NzTreeNode;\n  @Input() @InputBoolean() nzShowLine?: boolean;\n  @Input() @InputBoolean() nzShowExpand?: boolean;\n  @Input() @InputBoolean() nzCheckable?: boolean;\n  @Input() @InputBoolean() nzAsyncData?: boolean;\n  @Input() @InputBoolean() nzHideUnMatched = false;\n  @Input() @InputBoolean() nzNoAnimation = false;\n  @Input() @InputBoolean() nzSelectMode = false;\n  @Input() @InputBoolean() nzShowIcon = false;\n  @Input() nzExpandedIcon?: TemplateRef<{ $implicit: NzTreeNode; origin: NzTreeNodeOptions }>;\n  @Input() nzTreeTemplate: TemplateRef<{ $implicit: NzTreeNode; origin: NzTreeNodeOptions }> | null = null;\n  @Input() nzBeforeDrop?: (confirm: NzFormatBeforeDropEvent) => Observable<boolean>;\n  @Input() nzSearchValue = '';\n  @Input() nzDraggable: boolean = false;\n  @Output() readonly nzClick = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzDblClick = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzContextMenu = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzCheckBoxChange = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzExpandChange = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzOnDragStart = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzOnDragEnter = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzOnDragOver = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzOnDragLeave = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzOnDrop = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzOnDragEnd = new EventEmitter<NzFormatEmitEvent>();\n\n  /**\n   * drag var\n   */\n  destroy$ = new Subject();\n  dragPos = 2;\n  dragPosClass: { [key: string]: string } = {\n    '0': 'drag-over',\n    '1': 'drag-over-gap-bottom',\n    '-1': 'drag-over-gap-top'\n  };\n\n  /**\n   * default set\n   */\n  get displayStyle(): string {\n    // to hide unmatched nodes\n    return this.nzSearchValue && this.nzHideUnMatched && !this.isMatched && !this.isExpanded && this.canHide ? 'none' : '';\n  }\n\n  get isSwitcherOpen(): boolean {\n    return this.isExpanded && !this.isLeaf;\n  }\n\n  get isSwitcherClose(): boolean {\n    return !this.isExpanded && !this.isLeaf;\n  }\n\n  onMousedown(event: MouseEvent): void {\n    if (this.nzSelectMode) {\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * collapse node\n   * @param event\n   */\n  clickExpand(event: MouseEvent): void {\n    event.preventDefault();\n    if (!this.isLoading && !this.isLeaf) {\n      // set async state\n      if (this.nzAsyncData && this.nzTreeNode.children.length === 0 && !this.isExpanded) {\n        this.nzTreeNode.isLoading = true;\n      }\n      this.nzTreeNode.setExpanded(!this.isExpanded);\n    }\n    this.nzTreeService.setExpandedNodeList(this.nzTreeNode);\n    const eventNext = this.nzTreeService.formatEvent('expand', this.nzTreeNode, event);\n    this.nzExpandChange.emit(eventNext);\n  }\n\n  clickSelect(event: MouseEvent): void {\n    event.preventDefault();\n    if (this.isSelectable && !this.isDisabled) {\n      this.nzTreeNode.isSelected = !this.nzTreeNode.isSelected;\n    }\n    this.nzTreeService.setSelectedNodeList(this.nzTreeNode);\n    const eventNext = this.nzTreeService.formatEvent('click', this.nzTreeNode, event);\n    this.nzClick.emit(eventNext);\n  }\n\n  dblClick(event: MouseEvent): void {\n    event.preventDefault();\n    const eventNext = this.nzTreeService.formatEvent('dblclick', this.nzTreeNode, event);\n    this.nzDblClick.emit(eventNext);\n  }\n\n  contextMenu(event: MouseEvent): void {\n    event.preventDefault();\n    const eventNext = this.nzTreeService.formatEvent('contextmenu', this.nzTreeNode, event);\n    this.nzContextMenu.emit(eventNext);\n  }\n\n  /**\n   * check node\n   * @param event\n   */\n  clickCheckBox(event: MouseEvent): void {\n    event.preventDefault();\n    // return if node is disabled\n    if (this.isDisabled || this.isDisableCheckbox) {\n      return;\n    }\n    this.nzTreeNode.isChecked = !this.nzTreeNode.isChecked;\n    this.nzTreeNode.isHalfChecked = false;\n    this.nzTreeService.setCheckedNodeList(this.nzTreeNode);\n    const eventNext = this.nzTreeService.formatEvent('check', this.nzTreeNode, event);\n    this.nzCheckBoxChange.emit(eventNext);\n  }\n\n  clearDragClass(): void {\n    const dragClass = ['drag-over-gap-top', 'drag-over-gap-bottom', 'drag-over'];\n    dragClass.forEach(e => {\n      this.renderer.removeClass(this.elementRef.nativeElement, e);\n    });\n  }\n\n  /**\n   * drag event\n   * @param e\n   */\n  handleDragStart(e: DragEvent): void {\n    try {\n      // ie throw error\n      // firefox-need-it\n      e.dataTransfer!.setData('text/plain', this.nzTreeNode.key!);\n    } catch (error) {\n      // empty\n    }\n    this.nzTreeService.setSelectedNode(this.nzTreeNode);\n    const eventNext = this.nzTreeService.formatEvent('dragstart', this.nzTreeNode, e);\n    this.nzOnDragStart.emit(eventNext);\n  }\n\n  handleDragEnter(e: DragEvent): void {\n    e.preventDefault();\n    // reset position\n    this.dragPos = 2;\n    this.ngZone.run(() => {\n      const eventNext = this.nzTreeService.formatEvent('dragenter', this.nzTreeNode, e);\n      this.nzOnDragEnter.emit(eventNext);\n    });\n  }\n\n  handleDragOver(e: DragEvent): void {\n    e.preventDefault();\n    const dropPosition = this.nzTreeService.calcDropPosition(e);\n    if (this.dragPos !== dropPosition) {\n      this.clearDragClass();\n      this.dragPos = dropPosition;\n      // leaf node will pass\n      if (!(this.dragPos === 0 && this.isLeaf)) {\n        this.renderer.addClass(this.elementRef.nativeElement, this.dragPosClass[this.dragPos]);\n      }\n    }\n    const eventNext = this.nzTreeService.formatEvent('dragover', this.nzTreeNode, e);\n    this.nzOnDragOver.emit(eventNext);\n  }\n\n  handleDragLeave(e: DragEvent): void {\n    e.preventDefault();\n    this.clearDragClass();\n    const eventNext = this.nzTreeService.formatEvent('dragleave', this.nzTreeNode, e);\n    this.nzOnDragLeave.emit(eventNext);\n  }\n\n  handleDragDrop(e: DragEvent): void {\n    this.ngZone.run(() => {\n      this.clearDragClass();\n      const node = this.nzTreeService.getSelectedNode();\n      if (!node || (node && node.key === this.nzTreeNode.key) || (this.dragPos === 0 && this.isLeaf)) {\n        return;\n      }\n      // pass if node is leafNo\n      const dropEvent = this.nzTreeService.formatEvent('drop', this.nzTreeNode, e);\n      const dragEndEvent = this.nzTreeService.formatEvent('dragend', this.nzTreeNode, e);\n      if (this.nzBeforeDrop) {\n        this.nzBeforeDrop({\n          dragNode: this.nzTreeService.getSelectedNode()!,\n          node: this.nzTreeNode,\n          pos: this.dragPos\n        }).subscribe((canDrop: boolean) => {\n          if (canDrop) {\n            this.nzTreeService.dropAndApply(this.nzTreeNode, this.dragPos);\n          }\n          this.nzOnDrop.emit(dropEvent);\n          this.nzOnDragEnd.emit(dragEndEvent);\n        });\n      } else if (this.nzTreeNode) {\n        this.nzTreeService.dropAndApply(this.nzTreeNode, this.dragPos);\n        this.nzOnDrop.emit(dropEvent);\n      }\n    });\n  }\n\n  handleDragEnd(e: DragEvent): void {\n    e.preventDefault();\n    this.ngZone.run(() => {\n      // if user do not custom beforeDrop\n      if (!this.nzBeforeDrop) {\n        const eventNext = this.nzTreeService.formatEvent('dragend', this.nzTreeNode, e);\n        this.nzOnDragEnd.emit(eventNext);\n      }\n    });\n  }\n\n  /**\n   * Listening to dragging events.\n   */\n  handDragEvent(): void {\n    this.ngZone.runOutsideAngular(() => {\n      if (this.nzDraggable) {\n        const nativeElement = this.elementRef.nativeElement;\n        this.destroy$ = new Subject();\n        fromEvent<DragEvent>(nativeElement, 'dragstart')\n          .pipe(takeUntil(this.destroy$))\n          .subscribe((e: DragEvent) => this.handleDragStart(e));\n        fromEvent<DragEvent>(nativeElement, 'dragenter')\n          .pipe(takeUntil(this.destroy$))\n          .subscribe((e: DragEvent) => this.handleDragEnter(e));\n        fromEvent<DragEvent>(nativeElement, 'dragover')\n          .pipe(takeUntil(this.destroy$))\n          .subscribe((e: DragEvent) => this.handleDragOver(e));\n        fromEvent<DragEvent>(nativeElement, 'dragleave')\n          .pipe(takeUntil(this.destroy$))\n          .subscribe((e: DragEvent) => this.handleDragLeave(e));\n        fromEvent<DragEvent>(nativeElement, 'drop')\n          .pipe(takeUntil(this.destroy$))\n          .subscribe((e: DragEvent) => this.handleDragDrop(e));\n        fromEvent<DragEvent>(nativeElement, 'dragend')\n          .pipe(takeUntil(this.destroy$))\n          .subscribe((e: DragEvent) => this.handleDragEnd(e));\n      } else {\n        this.destroy$.next();\n        this.destroy$.complete();\n      }\n    });\n  }\n\n  markForCheck(): void {\n    this.cdr.markForCheck();\n  }\n\n  constructor(\n    public nzTreeService: NzTreeBaseService,\n    private ngZone: NgZone,\n    private renderer: Renderer2,\n    private elementRef: ElementRef,\n    private cdr: ChangeDetectorRef,\n    @Host() @Optional() public noAnimation?: NzNoAnimationDirective\n  ) {}\n\n  ngOnInit(): void {\n    this.nzTreeNode.component = this;\n  }\n\n  ngOnChanges(changes: { [propertyName: string]: SimpleChange }): void {\n    const { nzDraggable } = changes;\n    if (nzDraggable) {\n      this.handDragEvent();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Injectable } from '@angular/core';\nimport { NzTreeBaseService } from 'ng-zorro-antd/core/tree';\n\n@Injectable()\nexport class NzTreeService extends NzTreeBaseService {\n  constructor() {\n    super();\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  EventEmitter,\n  forwardRef,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  SimpleChange,\n  SkipSelf,\n  TemplateRef,\n  ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { treeCollapseMotion } from 'ng-zorro-antd/core/animation';\nimport { NzConfigService, WithConfig } from 'ng-zorro-antd/core/config';\nimport { NzNoAnimationDirective } from 'ng-zorro-antd/core/no-animation';\nimport {\n  flattenTreeData,\n  NzFormatBeforeDropEvent,\n  NzFormatEmitEvent,\n  NzTreeBase,\n  NzTreeBaseService,\n  NzTreeHigherOrderServiceToken,\n  NzTreeNode,\n  NzTreeNodeKey,\n  NzTreeNodeOptions\n} from 'ng-zorro-antd/core/tree';\nimport { BooleanInput, NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { NzTreeService } from './tree.service';\n\nexport function NzTreeServiceFactory(higherOrderService: NzTreeBaseService, treeService: NzTreeService): NzTreeBaseService {\n  return higherOrderService ? higherOrderService : treeService;\n}\n\nconst NZ_CONFIG_COMPONENT_NAME = 'tree';\n\n@Component({\n  selector: 'nz-tree',\n  exportAs: 'nzTree',\n  animations: [treeCollapseMotion],\n  template: `\n    <div role=\"tree\">\n      <input [ngStyle]=\"HIDDEN_STYLE\" />\n    </div>\n    <div [class.ant-select-tree-list]=\"nzSelectMode\" [class.ant-tree-list]=\"nzSelectMode\">\n      <div>\n        <cdk-virtual-scroll-viewport\n          *ngIf=\"nzVirtualHeight\"\n          [class.ant-select-tree-list-holder-inner]=\"nzSelectMode\"\n          [class.ant-tree-list-holder-inner]=\"nzSelectMode\"\n          [itemSize]=\"nzVirtualItemSize\"\n          [minBufferPx]=\"nzVirtualMinBufferPx\"\n          [maxBufferPx]=\"nzVirtualMaxBufferPx\"\n          [style.height]=\"nzVirtualHeight\"\n        >\n          <ng-container *cdkVirtualFor=\"let node of nzFlattenNodes; trackBy: trackByFlattenNode\">\n            <ng-template [ngTemplateOutlet]=\"nodeTemplate\" [ngTemplateOutletContext]=\"{ $implicit: node }\"></ng-template>\n          </ng-container>\n        </cdk-virtual-scroll-viewport>\n\n        <div\n          *ngIf=\"!nzVirtualHeight\"\n          [class.ant-select-tree-list-holder-inner]=\"nzSelectMode\"\n          [class.ant-tree-list-holder-inner]=\"nzSelectMode\"\n          [@.disabled]=\"beforeInit || noAnimation?.nzNoAnimation\"\n          [nzNoAnimation]=\"noAnimation?.nzNoAnimation\"\n          [@treeCollapseMotion]=\"nzFlattenNodes.length\"\n        >\n          <ng-container *ngFor=\"let node of nzFlattenNodes; trackBy: trackByFlattenNode\">\n            <ng-template [ngTemplateOutlet]=\"nodeTemplate\" [ngTemplateOutletContext]=\"{ $implicit: node }\"></ng-template>\n          </ng-container>\n        </div>\n      </div>\n    </div>\n    <ng-template #nodeTemplate let-treeNode>\n      <nz-tree-node\n        [icon]=\"treeNode.icon\"\n        [title]=\"treeNode.title\"\n        [isLoading]=\"treeNode.isLoading\"\n        [isSelected]=\"treeNode.isSelected\"\n        [isDisabled]=\"treeNode.isDisabled\"\n        [isMatched]=\"treeNode.isMatched\"\n        [isExpanded]=\"treeNode.isExpanded\"\n        [isLeaf]=\"treeNode.isLeaf\"\n        [isStart]=\"treeNode.isStart\"\n        [isEnd]=\"treeNode.isEnd\"\n        [isChecked]=\"treeNode.isChecked\"\n        [isHalfChecked]=\"treeNode.isHalfChecked\"\n        [isDisableCheckbox]=\"treeNode.isDisableCheckbox\"\n        [isSelectable]=\"treeNode.isSelectable\"\n        [canHide]=\"treeNode.canHide\"\n        [nzTreeNode]=\"treeNode\"\n        [nzSelectMode]=\"nzSelectMode\"\n        [nzShowLine]=\"nzShowLine\"\n        [nzExpandedIcon]=\"nzExpandedIcon\"\n        [nzDraggable]=\"nzDraggable\"\n        [nzCheckable]=\"nzCheckable\"\n        [nzShowExpand]=\"nzShowExpand\"\n        [nzAsyncData]=\"nzAsyncData\"\n        [nzSearchValue]=\"nzSearchValue\"\n        [nzHideUnMatched]=\"nzHideUnMatched\"\n        [nzBeforeDrop]=\"nzBeforeDrop\"\n        [nzShowIcon]=\"nzShowIcon\"\n        [nzTreeTemplate]=\"nzTreeTemplate || nzTreeTemplateChild\"\n        (nzExpandChange)=\"eventTriggerChanged($event)\"\n        (nzClick)=\"eventTriggerChanged($event)\"\n        (nzDblClick)=\"eventTriggerChanged($event)\"\n        (nzContextMenu)=\"eventTriggerChanged($event)\"\n        (nzCheckBoxChange)=\"eventTriggerChanged($event)\"\n        (nzOnDragStart)=\"eventTriggerChanged($event)\"\n        (nzOnDragEnter)=\"eventTriggerChanged($event)\"\n        (nzOnDragOver)=\"eventTriggerChanged($event)\"\n        (nzOnDragLeave)=\"eventTriggerChanged($event)\"\n        (nzOnDragEnd)=\"eventTriggerChanged($event)\"\n        (nzOnDrop)=\"eventTriggerChanged($event)\"\n      >\n      </nz-tree-node>\n    </ng-template>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    NzTreeService,\n    {\n      provide: NzTreeBaseService,\n      useFactory: NzTreeServiceFactory,\n      deps: [[new SkipSelf(), new Optional(), NzTreeHigherOrderServiceToken], NzTreeService]\n    },\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NzTreeComponent),\n      multi: true\n    }\n  ],\n  host: {\n    '[class.ant-select-tree]': `nzSelectMode`,\n    '[class.ant-select-tree-show-line]': `nzSelectMode && nzShowLine`,\n    '[class.ant-select-tree-icon-hide]': `nzSelectMode && !nzShowIcon`,\n    '[class.ant-select-tree-block-node]': `nzSelectMode && nzBlockNode`,\n    '[class.ant-tree]': `!nzSelectMode`,\n    '[class.ant-tree-show-line]': `!nzSelectMode && nzShowLine`,\n    '[class.ant-tree-icon-hide]': `!nzSelectMode && !nzShowIcon`,\n    '[class.ant-tree-block-node]': `!nzSelectMode && nzBlockNode`,\n    '[class.draggable-tree]': `nzDraggable`\n  }\n})\nexport class NzTreeComponent extends NzTreeBase implements OnInit, OnDestroy, ControlValueAccessor, OnChanges, AfterViewInit {\n  static ngAcceptInputType_nzShowIcon: BooleanInput;\n  static ngAcceptInputType_nzHideUnMatched: BooleanInput;\n  static ngAcceptInputType_nzBlockNode: BooleanInput;\n  static ngAcceptInputType_nzExpandAll: BooleanInput;\n  static ngAcceptInputType_nzSelectMode: BooleanInput;\n  static ngAcceptInputType_nzCheckStrictly: BooleanInput;\n  static ngAcceptInputType_nzShowExpand: BooleanInput;\n  static ngAcceptInputType_nzShowLine: BooleanInput;\n  static ngAcceptInputType_nzCheckable: BooleanInput;\n  static ngAcceptInputType_nzAsyncData: BooleanInput;\n  static ngAcceptInputType_nzDraggable: BooleanInput;\n  static ngAcceptInputType_nzMultiple: BooleanInput;\n\n  @Input() @InputBoolean() @WithConfig(NZ_CONFIG_COMPONENT_NAME) nzShowIcon: boolean = false;\n  @Input() @InputBoolean() @WithConfig(NZ_CONFIG_COMPONENT_NAME) nzHideUnMatched: boolean = false;\n  @Input() @InputBoolean() @WithConfig(NZ_CONFIG_COMPONENT_NAME) nzBlockNode: boolean = false;\n  @Input() @InputBoolean() nzExpandAll = false;\n  @Input() @InputBoolean() nzSelectMode = false;\n  @Input() @InputBoolean() nzCheckStrictly = false;\n  @Input() @InputBoolean() nzShowExpand: boolean = true;\n  @Input() @InputBoolean() nzShowLine = false;\n  @Input() @InputBoolean() nzCheckable = false;\n  @Input() @InputBoolean() nzAsyncData = false;\n  @Input() @InputBoolean() nzDraggable: boolean = false;\n  @Input() @InputBoolean() nzMultiple = false;\n  @Input() nzExpandedIcon?: TemplateRef<{ $implicit: NzTreeNode; origin: NzTreeNodeOptions }>;\n  @Input() nzVirtualItemSize = 28;\n  @Input() nzVirtualMaxBufferPx = 500;\n  @Input() nzVirtualMinBufferPx = 28;\n  @Input() nzVirtualHeight: string | null = null;\n  @Input() nzTreeTemplate?: TemplateRef<{ $implicit: NzTreeNode; origin: NzTreeNodeOptions }>;\n  @Input() nzBeforeDrop?: (confirm: NzFormatBeforeDropEvent) => Observable<boolean>;\n  @Input() nzData: NzTreeNodeOptions[] | NzTreeNode[] = [];\n  @Input() nzExpandedKeys: NzTreeNodeKey[] = [];\n  @Input() nzSelectedKeys: NzTreeNodeKey[] = [];\n  @Input() nzCheckedKeys: NzTreeNodeKey[] = [];\n  @Input() nzSearchValue?: string;\n  @Input() nzSearchFunc?: (node: NzTreeNodeOptions) => boolean;\n  @ContentChild('nzTreeTemplate', { static: true }) nzTreeTemplateChild!: TemplateRef<{ $implicit: NzTreeNode; origin: NzTreeNodeOptions }>;\n  @ViewChild(CdkVirtualScrollViewport, { read: CdkVirtualScrollViewport }) cdkVirtualScrollViewport!: CdkVirtualScrollViewport;\n  nzFlattenNodes: NzTreeNode[] = [];\n  beforeInit = true;\n\n  @Output() readonly nzExpandedKeysChange: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() readonly nzSelectedKeysChange: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() readonly nzCheckedKeysChange: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() readonly nzSearchValueChange = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzClick = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzDblClick = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzContextMenu = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzCheckBoxChange = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzExpandChange = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzOnDragStart = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzOnDragEnter = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzOnDragOver = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzOnDragLeave = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzOnDrop = new EventEmitter<NzFormatEmitEvent>();\n  @Output() readonly nzOnDragEnd = new EventEmitter<NzFormatEmitEvent>();\n\n  HIDDEN_STYLE = {\n    width: 0,\n    height: 0,\n    display: 'flex',\n    overflow: 'hidden',\n    opacity: 0,\n    border: 0,\n    padding: 0,\n    margin: 0\n  };\n\n  destroy$ = new Subject();\n\n  onChange: (value: NzTreeNode[]) => void = () => null;\n  onTouched: () => void = () => null;\n\n  writeValue(value: NzTreeNode[]): void {\n    this.handleNzData(value);\n  }\n\n  registerOnChange(fn: (_: NzTreeNode[]) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Render all properties of nzTree\n   * @param changes: all changes from @Input\n   */\n  renderTreeProperties(changes: { [propertyName: string]: SimpleChange }): void {\n    let useDefaultExpandedKeys = false;\n    let expandAll = false;\n    const { nzData, nzExpandedKeys, nzSelectedKeys, nzCheckedKeys, nzCheckStrictly, nzExpandAll, nzMultiple, nzSearchValue } = changes;\n\n    if (nzExpandAll) {\n      useDefaultExpandedKeys = true;\n      expandAll = this.nzExpandAll;\n    }\n\n    if (nzMultiple) {\n      this.nzTreeService.isMultiple = this.nzMultiple;\n    }\n\n    if (nzCheckStrictly) {\n      this.nzTreeService.isCheckStrictly = this.nzCheckStrictly;\n    }\n\n    if (nzData) {\n      this.handleNzData(this.nzData);\n    }\n\n    if (nzCheckedKeys) {\n      this.handleCheckedKeys(this.nzCheckedKeys);\n    }\n\n    if (nzCheckStrictly) {\n      this.handleCheckedKeys(null);\n    }\n\n    if (nzExpandedKeys || nzExpandAll) {\n      useDefaultExpandedKeys = true;\n      this.handleExpandedKeys(expandAll || this.nzExpandedKeys);\n    }\n\n    if (nzSelectedKeys) {\n      this.handleSelectedKeys(this.nzSelectedKeys, this.nzMultiple);\n    }\n\n    if (nzSearchValue) {\n      if (!(nzSearchValue.firstChange && !this.nzSearchValue)) {\n        useDefaultExpandedKeys = false;\n        this.handleSearchValue(nzSearchValue.currentValue, this.nzSearchFunc);\n        this.nzSearchValueChange.emit(this.nzTreeService.formatEvent('search', null, null));\n      }\n    }\n\n    // flatten data\n    const currentExpandedKeys = this.getExpandedNodeList().map(v => v.key);\n    const newExpandedKeys = useDefaultExpandedKeys ? expandAll || this.nzExpandedKeys : currentExpandedKeys;\n    this.handleFlattenNodes(this.nzTreeService.rootNodes, newExpandedKeys);\n  }\n\n  trackByFlattenNode(_: number, node: NzTreeNode): string {\n    return node.key;\n  }\n  // Deal with properties\n  /**\n   * nzData\n   * @param value\n   */\n  handleNzData(value: NzSafeAny[]): void {\n    if (Array.isArray(value)) {\n      const data = this.coerceTreeNodes(value);\n      this.nzTreeService.initTree(data);\n    }\n  }\n\n  handleFlattenNodes(data: NzTreeNode[], expandKeys: NzTreeNodeKey[] | true = []): void {\n    this.nzTreeService.flattenTreeData(data, expandKeys);\n  }\n\n  handleCheckedKeys(keys: NzTreeNodeKey[] | null): void {\n    this.nzTreeService.conductCheck(keys, this.nzCheckStrictly);\n  }\n\n  handleExpandedKeys(keys: NzTreeNodeKey[] | true = []): void {\n    this.nzTreeService.conductExpandedKeys(keys);\n  }\n\n  handleSelectedKeys(keys: NzTreeNodeKey[], isMulti: boolean): void {\n    this.nzTreeService.conductSelectedKeys(keys, isMulti);\n  }\n\n  handleSearchValue(value: string, searchFunc?: (node: NzTreeNodeOptions) => boolean): void {\n    const dataList = flattenTreeData(this.nzTreeService.rootNodes, true).map(v => v.data);\n    const checkIfMatched = (node: NzTreeNode): boolean => {\n      if (searchFunc) {\n        return searchFunc(node.origin);\n      }\n      return !value || !node.title.toLowerCase().includes(value.toLowerCase()) ? false : true;\n    };\n    dataList.forEach(v => {\n      v.isMatched = checkIfMatched(v);\n      v.canHide = !v.isMatched;\n      if (!v.isMatched) {\n        v.setExpanded(false);\n        this.nzTreeService.setExpandedNodeList(v);\n      } else {\n        // expand\n        this.nzTreeService.expandNodeAllParentBySearch(v);\n      }\n      this.nzTreeService.setMatchedNodeList(v);\n    });\n  }\n\n  /**\n   * Handle emit event\n   * @param event\n   * handle each event\n   */\n  eventTriggerChanged(event: NzFormatEmitEvent): void {\n    const node = event.node!;\n    switch (event.eventName) {\n      case 'expand':\n        this.renderTree();\n        this.nzExpandChange.emit(event);\n        break;\n      case 'click':\n        this.nzClick.emit(event);\n        break;\n      case 'dblclick':\n        this.nzDblClick.emit(event);\n        break;\n      case 'contextmenu':\n        this.nzContextMenu.emit(event);\n        break;\n      case 'check':\n        // Render checked state with nodes' property `isChecked`\n        this.nzTreeService.setCheckedNodeList(node);\n        if (!this.nzCheckStrictly) {\n          this.nzTreeService.conduct(node);\n        }\n        // Cause check method will rerender list, so we need recover it and next the new event to user\n        const eventNext = this.nzTreeService.formatEvent('check', node, event.event!);\n        this.nzCheckBoxChange.emit(eventNext);\n        break;\n      case 'dragstart':\n        // if node is expanded\n        if (node.isExpanded) {\n          node.setExpanded(!node.isExpanded);\n          this.renderTree();\n        }\n        this.nzOnDragStart.emit(event);\n        break;\n      case 'dragenter':\n        const selectedNode = this.nzTreeService.getSelectedNode();\n        if (selectedNode && selectedNode.key !== node.key && !node.isExpanded && !node.isLeaf) {\n          node.setExpanded(true);\n          this.renderTree();\n        }\n        this.nzOnDragEnter.emit(event);\n        break;\n      case 'dragover':\n        this.nzOnDragOver.emit(event);\n        break;\n      case 'dragleave':\n        this.nzOnDragLeave.emit(event);\n        break;\n      case 'dragend':\n        this.nzOnDragEnd.emit(event);\n        break;\n      case 'drop':\n        this.renderTree();\n        this.nzOnDrop.emit(event);\n        break;\n    }\n  }\n\n  /**\n   * Click expand icon\n   */\n  renderTree(): void {\n    this.handleFlattenNodes(\n      this.nzTreeService.rootNodes,\n      this.getExpandedNodeList().map(v => v.key)\n    );\n    this.cdr.markForCheck();\n  }\n  // Handle emit event end\n\n  constructor(\n    nzTreeService: NzTreeBaseService,\n    public nzConfigService: NzConfigService,\n    private cdr: ChangeDetectorRef,\n    @Host() @Optional() public noAnimation?: NzNoAnimationDirective\n  ) {\n    super(nzTreeService);\n  }\n\n  ngOnInit(): void {\n    this.nzTreeService.flattenNodes$.pipe(takeUntil(this.destroy$)).subscribe(data => {\n      this.nzFlattenNodes = data;\n      this.cdr.markForCheck();\n    });\n  }\n\n  ngOnChanges(changes: { [propertyName: string]: SimpleChange }): void {\n    this.renderTreeProperties(changes);\n  }\n\n  ngAfterViewInit(): void {\n    this.beforeInit = false;\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NzHighlightModule } from 'ng-zorro-antd/core/highlight';\nimport { NzNoAnimationModule } from 'ng-zorro-antd/core/no-animation';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { NzTreeIndentComponent } from './tree-indent.component';\nimport { NzTreeNodeCheckboxComponent } from './tree-node-checkbox.component';\nimport { NzTreeNodeSwitcherComponent } from './tree-node-switcher.component';\nimport { NzTreeNodeTitleComponent } from './tree-node-title.component';\nimport { NzTreeNodeComponent } from './tree-node.component';\nimport { NzTreeComponent } from './tree.component';\n\n@NgModule({\n  imports: [CommonModule, NzOutletModule, NzIconModule, NzNoAnimationModule, NzHighlightModule, ScrollingModule],\n  declarations: [\n    NzTreeComponent,\n    NzTreeNodeComponent,\n    NzTreeIndentComponent,\n    NzTreeNodeSwitcherComponent,\n    NzTreeNodeCheckboxComponent,\n    NzTreeNodeTitleComponent\n  ],\n  exports: [NzTreeComponent, NzTreeNodeComponent, NzTreeIndentComponent]\n})\nexport class NzTreeModule {}\n"]}