{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://ng-zorro-antd/core/tree/nz-tree-base-node.ts","ng://ng-zorro-antd/core/tree/nz-tree-base-util.ts","ng://ng-zorro-antd/core/tree/nz-tree-base.service.ts","ng://ng-zorro-antd/core/tree/nz-tree-service.resolver.ts","ng://ng-zorro-antd/core/tree/nz-tree-base.ts"],"names":["__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","NzTreeNode","option","parent","service","_this","this","_title","level","parentNode","_icon","_children","_isLeaf","_isChecked","_isAllChecked","_isSelectable","_isDisabled","_isDisableCheckbox","_isExpanded","_isHalfChecked","_isSelected","_isLoading","canHide","isMatched","origin","key","title","icon","isLeaf","checked","disabled","selectable","disableCheckbox","expanded","selected","children","forEach","nodeOptions","treeService","isCheckStrictly","Object","defineProperty","prototype","update","afterValueChange","warnDeprecation","setSyncChecked","halfChecked","setChecked","conduct","isChecked","isAllChecked","isHalfChecked","setExpanded","setSelected","isDisabled","isSelected","getParentNode","getChildren","addChildren","childPos","node","refreshLevel","c","child","splice","map","v","isLoading","clearChildren","remove","filter","setCheckedNodeList","setHalfCheckedNodeList","setExpandedNodeList","setNodeActive","afterRemove","flattenTreeData","rootNodes","getExpandedNodeList","component","markForCheck","isCheckDisabled","isDisableCheckbox","isInArray","needle","haystack","indexOf","getPosition","index","getKey","pos","treeNodeList","expandedKeys","expandedKeySet","Set","flattenList","dig","list","treeNode","mergedKey","isStart","isEnd","flattenNode","data","has","isExpanded","NzTreeBaseService","DRAG_SIDE_RANGE","DRAG_MIN_GAP","isMultiple","flattenNodes$","BehaviorSubject","selectedNodeList","expandedNodeList","checkedNodeList","halfCheckedNodeList","matchedNodeList","initTree","nzNodes","item","getSelectedNode","selectedNode","getSelectedNodeList","conductNodeState","getCheckedNodeList","getHalfCheckedNodeList","getMatchedNodeList","isArrayOfNzTreeNode","every","setSelectedNode","setSelectedNodeList","getIndexOfArray","type","resultNodesList","isIgnore_1","findIndex","setMatchedNodeList","refreshCheckState","conductUp","conductDown","some","nodes","loopNode","refreshDragNode","resetNodeLevel","_b","_c","calcDropPosition","event","clientY","_a","srcElement","top","bottom","height","des","Math","max","dropAndApply","targetNode","dragPos","targetParent","isSelectedRootNode","tIndex","targetIndex","formatEvent","eventName","emitStructure","assign","dragNode","selectedKeys","keys","checkedKeys","matchedKeys","conductCheck","checkStrictly","calc","conductExpandedKeys","conductSelectedKeys","isMulti","expandNodeAllParentBySearch","Injectable","NzTreeHigherOrderServiceToken","InjectionToken","NzTreeBase","nzTreeService","coerceTreeNodes","getTreeNodes","getTreeNodeByKey","getNode","find"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { warnDeprecation } from 'ng-zorro-antd/core/logger';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { NzTreeNodeBaseComponent } from './nz-tree-base.definitions';\nimport { NzTreeBaseService } from './nz-tree-base.service';\n\nexport type NzTreeNodeKey = string | number;\n\nexport interface FlattenNode {\n  parent: FlattenNode | null;\n  children: FlattenNode[];\n  pos: string;\n  data: NzTreeNode;\n  isStart: boolean[];\n  isEnd: boolean[];\n}\n\nexport interface NzTreeNodeOptions {\n  title: string;\n  key: string;\n  icon?: string;\n  isLeaf?: boolean;\n  checked?: boolean;\n  selected?: boolean;\n  selectable?: boolean;\n  disabled?: boolean;\n  disableCheckbox?: boolean;\n  expanded?: boolean;\n  children?: NzTreeNodeOptions[];\n\n  [key: string]: NzSafeAny;\n}\n\nexport class NzTreeNode {\n  private _title: string = '';\n  key!: string;\n  level: number = 0;\n  origin!: NzTreeNodeOptions;\n  // Parent Node\n  parentNode: NzTreeNode | null = null;\n  private _icon: string = '';\n  private _children: NzTreeNode[] = [];\n  private _isLeaf: boolean = false;\n  private _isChecked: boolean = false;\n  /**\n   * @deprecated Maybe removed in next major version, use isChecked instead\n   */\n  private _isAllChecked: boolean = false;\n  private _isSelectable: boolean = false;\n  private _isDisabled: boolean = false;\n  private _isDisableCheckbox: boolean = false;\n  private _isExpanded: boolean = false;\n  private _isHalfChecked: boolean = false;\n  private _isSelected: boolean = false;\n  private _isLoading: boolean = false;\n  canHide: boolean = false;\n  isMatched: boolean = false;\n\n  service: NzTreeBaseService | null = null;\n  component!: NzTreeNodeBaseComponent;\n\n  /** New added in Tree for easy data access */\n  isStart?: boolean[];\n  isEnd?: boolean[];\n\n  get treeService(): NzTreeBaseService | null {\n    return this.service || (this.parentNode && this.parentNode.treeService);\n  }\n\n  /**\n   * Init nzTreeNode\n   * @param option: user's input\n   * @param parent\n   * @param service: base nzTreeService\n   */\n  constructor(option: NzTreeNodeOptions | NzTreeNode, parent: NzTreeNode | null = null, service: NzTreeBaseService | null = null) {\n    if (option instanceof NzTreeNode) {\n      return option;\n    }\n    this.service = service || null;\n    this.origin = option;\n    this.key = option.key;\n    this.parentNode = parent;\n    this._title = option.title || '---';\n    this._icon = option.icon || '';\n    this._isLeaf = option.isLeaf || false;\n    this._children = [];\n    // option params\n    this._isChecked = option.checked || false;\n    this._isSelectable = option.disabled || option.selectable !== false;\n    this._isDisabled = option.disabled || false;\n    this._isDisableCheckbox = option.disableCheckbox || false;\n    this._isExpanded = option.isLeaf ? false : option.expanded || false;\n    this._isHalfChecked = false;\n    this._isSelected = (!option.disabled && option.selected) || false;\n    this._isLoading = false;\n    this.isMatched = false;\n\n    /**\n     * parent's checked status will affect children while initializing\n     */\n    if (parent) {\n      this.level = parent.level + 1;\n    } else {\n      this.level = 0;\n    }\n    if (typeof option.children !== 'undefined' && option.children !== null) {\n      option.children.forEach(nodeOptions => {\n        const s = this.treeService;\n        if (s && !s.isCheckStrictly && option.checked && !option.disabled && !nodeOptions.disabled && !nodeOptions.disableCheckbox) {\n          nodeOptions.checked = option.checked;\n        }\n        this._children.push(new NzTreeNode(nodeOptions, this));\n      });\n    }\n  }\n\n  /**\n   * auto generate\n   * get\n   * set\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  set title(value: string) {\n    this._title = value;\n    this.update();\n  }\n\n  get icon(): string {\n    return this._icon;\n  }\n\n  set icon(value: string) {\n    this._icon = value;\n    this.update();\n  }\n\n  get children(): NzTreeNode[] {\n    return this._children;\n  }\n\n  set children(value: NzTreeNode[]) {\n    this._children = value;\n    this.update();\n  }\n\n  get isLeaf(): boolean {\n    return this._isLeaf;\n  }\n\n  set isLeaf(value: boolean) {\n    this._isLeaf = value;\n    this.update();\n  }\n\n  get isChecked(): boolean {\n    return this._isChecked;\n  }\n\n  set isChecked(value: boolean) {\n    this._isChecked = value;\n    this._isAllChecked = value;\n    this.origin.checked = value;\n    this.afterValueChange('isChecked');\n  }\n\n  get isAllChecked(): boolean {\n    return this._isAllChecked;\n  }\n\n  /**\n   * @deprecated Maybe removed in next major version, use `isChecked` instead.\n   */\n  set isAllChecked(value: boolean) {\n    warnDeprecation(`'isAllChecked' is going to be removed in 9.0.0. Please use 'isChecked' instead.`);\n    this._isAllChecked = value;\n  }\n\n  get isHalfChecked(): boolean {\n    return this._isHalfChecked;\n  }\n\n  set isHalfChecked(value: boolean) {\n    this._isHalfChecked = value;\n    this.afterValueChange('isHalfChecked');\n  }\n\n  get isSelectable(): boolean {\n    return this._isSelectable;\n  }\n\n  set isSelectable(value: boolean) {\n    this._isSelectable = value;\n    this.update();\n  }\n\n  get isDisabled(): boolean {\n    return this._isDisabled;\n  }\n\n  set isDisabled(value: boolean) {\n    this._isDisabled = value;\n    this.update();\n  }\n\n  get isDisableCheckbox(): boolean {\n    return this._isDisableCheckbox;\n  }\n\n  set isDisableCheckbox(value: boolean) {\n    this._isDisableCheckbox = value;\n    this.update();\n  }\n\n  get isExpanded(): boolean {\n    return this._isExpanded;\n  }\n\n  set isExpanded(value: boolean) {\n    this._isExpanded = value;\n    this.origin.expanded = value;\n    this.afterValueChange('isExpanded');\n    this.afterValueChange('reRender');\n  }\n\n  get isSelected(): boolean {\n    return this._isSelected;\n  }\n\n  set isSelected(value: boolean) {\n    this._isSelected = value;\n    this.origin.selected = value;\n    this.afterValueChange('isSelected');\n  }\n\n  get isLoading(): boolean {\n    return this._isLoading;\n  }\n\n  set isLoading(value: boolean) {\n    this._isLoading = value;\n    this.update();\n  }\n\n  public setSyncChecked(checked: boolean = false, halfChecked: boolean = false): void {\n    this.setChecked(checked, halfChecked);\n    if (this.treeService && !this.treeService.isCheckStrictly) {\n      this.treeService.conduct(this);\n    }\n  }\n\n  /**\n   * @deprecated Maybe removed in next major version, use `isChecked` instead.\n   */\n  public setChecked(checked: boolean = false, halfChecked: boolean = false): void {\n    warnDeprecation(`'setChecked' is going to be removed in 9.0.0. Please use 'isChecked' instead.`);\n    this.origin.checked = checked;\n    this.isChecked = checked;\n    this.isAllChecked = checked;\n    this.isHalfChecked = halfChecked;\n  }\n\n  /**\n   * @not-deprecated Maybe removed in next major version, use `isExpanded` instead.\n   * We need it until tree refactoring is finished\n   */\n  public setExpanded(value: boolean): void {\n    this._isExpanded = value;\n    this.origin.expanded = value;\n    this.afterValueChange('isExpanded');\n  }\n\n  /**\n   * @deprecated Maybe removed in next major version, use `isSelected` instead.\n   */\n  public setSelected(value: boolean): void {\n    warnDeprecation(`'setSelected' is going to be removed in 9.0.0. Please use 'isExpanded' isSelected.`);\n    if (this.isDisabled) {\n      return;\n    }\n    this.isSelected = value;\n  }\n\n  public getParentNode(): NzTreeNode | null {\n    return this.parentNode;\n  }\n\n  public getChildren(): NzTreeNode[] {\n    return this.children;\n  }\n\n  /**\n   * Support appending child nodes by position. Leaf node cannot be appended.\n   */\n  public addChildren(children: NzSafeAny[], childPos: number = -1): void {\n    if (!this.isLeaf) {\n      children.forEach(node => {\n        const refreshLevel = (n: NzTreeNode) => {\n          n.getChildren().forEach(c => {\n            c.level = c.getParentNode()!.level + 1;\n            // flush origin\n            c.origin.level = c.level;\n            refreshLevel(c);\n          });\n        };\n        let child = node;\n        if (child instanceof NzTreeNode) {\n          child.parentNode = this;\n        } else {\n          child = new NzTreeNode(node, this);\n        }\n        child.level = this.level + 1;\n        child.origin.level = child.level;\n        refreshLevel(child);\n        try {\n          childPos === -1 ? this.children.push(child) : this.children.splice(childPos, 0, child);\n          // flush origin\n        } catch (e) {}\n      });\n      this.origin.children = this.getChildren().map(v => v.origin);\n      // remove loading state\n      this.isLoading = false;\n    }\n    this.afterValueChange('addChildren');\n    this.afterValueChange('reRender');\n  }\n\n  public clearChildren(): void {\n    // refresh checked state\n    this.afterValueChange('clearChildren');\n    this.children = [];\n    this.origin.children = [];\n    this.afterValueChange('reRender');\n  }\n\n  public remove(): void {\n    const parentNode = this.getParentNode();\n    if (parentNode) {\n      parentNode.children = parentNode.getChildren().filter(v => v.key !== this.key);\n      parentNode.origin.children = parentNode.origin.children!.filter(v => v.key !== this.key);\n      this.afterValueChange('remove');\n      this.afterValueChange('reRender');\n    }\n  }\n\n  public afterValueChange(key: string): void {\n    if (this.treeService) {\n      switch (key) {\n        case 'isChecked':\n          this.treeService.setCheckedNodeList(this);\n          break;\n        case 'isHalfChecked':\n          this.treeService.setHalfCheckedNodeList(this);\n          break;\n        case 'isExpanded':\n          this.treeService.setExpandedNodeList(this);\n          break;\n        case 'isSelected':\n          this.treeService.setNodeActive(this);\n          break;\n        case 'clearChildren':\n          this.treeService.afterRemove(this.getChildren());\n          break;\n        case 'remove':\n          this.treeService.afterRemove([this]);\n          break;\n        case 'reRender':\n          this.treeService.flattenTreeData(\n            this.treeService.rootNodes,\n            this.treeService.getExpandedNodeList().map(v => v.key!)\n          );\n          break;\n      }\n    }\n    this.update();\n  }\n\n  public update(): void {\n    if (this.component) {\n      this.component.markForCheck();\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { FlattenNode, NzTreeNode, NzTreeNodeKey } from './nz-tree-base-node';\n\nexport function isCheckDisabled(node: NzTreeNode): boolean {\n  const { isDisabled, isDisableCheckbox } = node;\n  return !!(isDisabled || isDisableCheckbox);\n}\n\nexport function isInArray(needle: NzSafeAny, haystack: NzSafeAny[]): boolean {\n  return haystack.length > 0 && haystack.indexOf(needle) > -1;\n}\n\nexport function getPosition(level: string | number, index: number): string {\n  return `${level}-${index}`;\n}\n\nexport function getKey(key: NzTreeNodeKey, pos: string): NzTreeNodeKey {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n  return pos;\n}\n\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\nexport function flattenTreeData(treeNodeList: NzTreeNode[] = [], expandedKeys: NzTreeNodeKey[] | true = []): FlattenNode[] {\n  const expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  const flattenList: FlattenNode[] = [];\n\n  function dig(list: NzTreeNode[], parent: FlattenNode | null = null): FlattenNode[] {\n    return list.map((treeNode, index) => {\n      const pos: string = getPosition(parent ? parent.pos : '0', index);\n      const mergedKey = getKey(treeNode.key, pos);\n      treeNode.isStart = [...(parent ? parent.isStart : []), index === 0];\n      treeNode.isEnd = [...(parent ? parent.isEnd : []), index === list.length - 1];\n      // Add FlattenDataNode into list\n      // TODO: only need data here.\n      const flattenNode: FlattenNode = {\n        parent,\n        pos,\n        children: [],\n        data: treeNode,\n        isStart: [...(parent ? parent.isStart : []), index === 0],\n        isEnd: [...(parent ? parent.isEnd : []), index === list.length - 1]\n      };\n\n      flattenList.push(flattenNode);\n\n      // Loop treeNode children\n      if (expandedKeys === true || expandedKeySet.has(mergedKey) || treeNode.isExpanded) {\n        flattenNode.children = dig(treeNode.children || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n\n      return flattenNode;\n    });\n  }\n\n  dig(treeNodeList);\n  return flattenList;\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Injectable } from '@angular/core';\n\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { BehaviorSubject } from 'rxjs';\nimport { NzTreeNode, NzTreeNodeKey } from './nz-tree-base-node';\nimport { flattenTreeData, isCheckDisabled, isInArray } from './nz-tree-base-util';\nimport { NzFormatEmitEvent } from './nz-tree-base.definitions';\n\n@Injectable()\nexport class NzTreeBaseService {\n  DRAG_SIDE_RANGE = 0.25;\n  DRAG_MIN_GAP = 2;\n\n  isCheckStrictly: boolean = false;\n  isMultiple: boolean = false;\n  selectedNode!: NzTreeNode;\n  rootNodes: NzTreeNode[] = [];\n  flattenNodes$ = new BehaviorSubject<NzTreeNode[]>([]);\n  selectedNodeList: NzTreeNode[] = [];\n  expandedNodeList: NzTreeNode[] = [];\n  checkedNodeList: NzTreeNode[] = [];\n  halfCheckedNodeList: NzTreeNode[] = [];\n  matchedNodeList: NzTreeNode[] = [];\n\n  /**\n   * reset tree nodes will clear default node list\n   */\n  initTree(nzNodes: NzTreeNode[]): void {\n    this.rootNodes = nzNodes;\n    this.expandedNodeList = [];\n    this.selectedNodeList = [];\n    this.halfCheckedNodeList = [];\n    this.checkedNodeList = [];\n    this.matchedNodeList = [];\n  }\n\n  flattenTreeData(nzNodes: NzTreeNode[], expandedKeys: NzTreeNodeKey[] | true = []): void {\n    this.flattenNodes$.next(flattenTreeData(nzNodes, expandedKeys).map(item => item.data));\n  }\n\n  getSelectedNode(): NzTreeNode | null {\n    return this.selectedNode;\n  }\n\n  /**\n   * get some list\n   */\n  getSelectedNodeList(): NzTreeNode[] {\n    return this.conductNodeState('select');\n  }\n\n  /**\n   * return checked nodes\n   */\n  getCheckedNodeList(): NzTreeNode[] {\n    return this.conductNodeState('check');\n  }\n\n  getHalfCheckedNodeList(): NzTreeNode[] {\n    return this.conductNodeState('halfCheck');\n  }\n\n  /**\n   * return expanded nodes\n   */\n  getExpandedNodeList(): NzTreeNode[] {\n    return this.conductNodeState('expand');\n  }\n\n  /**\n   * return search matched nodes\n   */\n  getMatchedNodeList(): NzTreeNode[] {\n    return this.conductNodeState('match');\n  }\n\n  isArrayOfNzTreeNode(value: NzSafeAny[]): boolean {\n    return value.every(item => item instanceof NzTreeNode);\n  }\n\n  /**\n   * set drag node\n   */\n  setSelectedNode(node: NzTreeNode): void {\n    this.selectedNode = node;\n  }\n\n  /**\n   * set node selected status\n   */\n  setNodeActive(node: NzTreeNode): void {\n    if (!this.isMultiple && node.isSelected) {\n      this.selectedNodeList.forEach(n => {\n        if (node.key !== n.key) {\n          // reset other nodes\n          n.isSelected = false;\n        }\n      });\n      // single mode: remove pre node\n      this.selectedNodeList = [];\n    }\n    this.setSelectedNodeList(node, this.isMultiple);\n  }\n\n  /**\n   * add or remove node to selectedNodeList\n   */\n  setSelectedNodeList(node: NzTreeNode, isMultiple: boolean = false): void {\n    const index = this.getIndexOfArray(this.selectedNodeList, node.key);\n    if (isMultiple) {\n      if (node.isSelected && index === -1) {\n        this.selectedNodeList.push(node);\n      }\n    } else {\n      if (node.isSelected && index === -1) {\n        this.selectedNodeList = [node];\n      }\n    }\n    if (!node.isSelected) {\n      this.selectedNodeList = this.selectedNodeList.filter(n => n.key !== node.key);\n    }\n  }\n\n  /**\n   * merge checked nodes\n   */\n  setHalfCheckedNodeList(node: NzTreeNode): void {\n    const index = this.getIndexOfArray(this.halfCheckedNodeList, node.key);\n    if (node.isHalfChecked && index === -1) {\n      this.halfCheckedNodeList.push(node);\n    } else if (!node.isHalfChecked && index > -1) {\n      this.halfCheckedNodeList = this.halfCheckedNodeList.filter(n => node.key !== n.key);\n    }\n  }\n\n  setCheckedNodeList(node: NzTreeNode): void {\n    const index = this.getIndexOfArray(this.checkedNodeList, node.key);\n    if (node.isChecked && index === -1) {\n      this.checkedNodeList.push(node);\n    } else if (!node.isChecked && index > -1) {\n      this.checkedNodeList = this.checkedNodeList.filter(n => node.key !== n.key);\n    }\n  }\n\n  /**\n   * conduct checked/selected/expanded keys\n   */\n  conductNodeState(type: string = 'check'): NzTreeNode[] {\n    let resultNodesList: NzTreeNode[] = [];\n    switch (type) {\n      case 'select':\n        resultNodesList = this.selectedNodeList;\n        break;\n      case 'expand':\n        resultNodesList = this.expandedNodeList;\n        break;\n      case 'match':\n        resultNodesList = this.matchedNodeList;\n        break;\n      case 'check':\n        resultNodesList = this.checkedNodeList;\n        const isIgnore = (node: NzTreeNode): boolean => {\n          const parentNode = node.getParentNode();\n          if (parentNode) {\n            if (this.checkedNodeList.findIndex(n => n.key === parentNode.key) > -1) {\n              return true;\n            } else {\n              return isIgnore(parentNode);\n            }\n          }\n          return false;\n        };\n        // merge checked\n        if (!this.isCheckStrictly) {\n          resultNodesList = this.checkedNodeList.filter(n => !isIgnore(n));\n        }\n        break;\n      case 'halfCheck':\n        if (!this.isCheckStrictly) {\n          resultNodesList = this.halfCheckedNodeList;\n        }\n        break;\n    }\n    return resultNodesList;\n  }\n\n  /**\n   * set expanded nodes\n   */\n  setExpandedNodeList(node: NzTreeNode): void {\n    if (node.isLeaf) {\n      return;\n    }\n    const index = this.getIndexOfArray(this.expandedNodeList, node.key);\n    if (node.isExpanded && index === -1) {\n      this.expandedNodeList.push(node);\n    } else if (!node.isExpanded && index > -1) {\n      this.expandedNodeList.splice(index, 1);\n    }\n  }\n\n  setMatchedNodeList(node: NzTreeNode): void {\n    const index = this.getIndexOfArray(this.matchedNodeList, node.key);\n    if (node.isMatched && index === -1) {\n      this.matchedNodeList.push(node);\n    } else if (!node.isMatched && index > -1) {\n      this.matchedNodeList.splice(index, 1);\n    }\n  }\n\n  /**\n   * check state\n   * @param isCheckStrictly\n   */\n  refreshCheckState(isCheckStrictly: boolean = false): void {\n    if (isCheckStrictly) {\n      return;\n    }\n    this.checkedNodeList.forEach(node => {\n      this.conduct(node, isCheckStrictly);\n    });\n  }\n\n  // reset other node checked state based current node\n  conduct(node: NzTreeNode, isCheckStrictly: boolean = false): void {\n    const isChecked = node.isChecked;\n    if (node && !isCheckStrictly) {\n      this.conductUp(node);\n      this.conductDown(node, isChecked);\n    }\n  }\n\n  /**\n   * 1、children half checked\n   * 2、children all checked, parent checked\n   * 3、no children checked\n   */\n  conductUp(node: NzTreeNode): void {\n    const parentNode = node.getParentNode();\n    if (parentNode) {\n      if (!isCheckDisabled(parentNode)) {\n        if (parentNode.children.every(child => isCheckDisabled(child) || (!child.isHalfChecked && child.isChecked))) {\n          parentNode.isChecked = true;\n          parentNode.isHalfChecked = false;\n        } else if (parentNode.children.some(child => child.isHalfChecked || child.isChecked)) {\n          parentNode.isChecked = false;\n          parentNode.isHalfChecked = true;\n        } else {\n          parentNode.isChecked = false;\n          parentNode.isHalfChecked = false;\n        }\n      }\n      this.setCheckedNodeList(parentNode);\n      this.setHalfCheckedNodeList(parentNode);\n      this.conductUp(parentNode);\n    }\n  }\n\n  /**\n   * reset child check state\n   */\n  conductDown(node: NzTreeNode, value: boolean): void {\n    if (!isCheckDisabled(node)) {\n      node.isChecked = value;\n      node.isHalfChecked = false;\n      this.setCheckedNodeList(node);\n      this.setHalfCheckedNodeList(node);\n      node.children.forEach(n => {\n        this.conductDown(n, value);\n      });\n    }\n  }\n\n  /**\n   * flush after delete node\n   */\n  afterRemove(nodes: NzTreeNode[]): void {\n    // to reset selectedNodeList & expandedNodeList\n    const loopNode = (node: NzTreeNode) => {\n      // remove selected node\n      this.selectedNodeList = this.selectedNodeList.filter(n => n.key !== node.key);\n      // remove expanded node\n      this.expandedNodeList = this.expandedNodeList.filter(n => n.key !== node.key);\n      // remove checked node\n      this.checkedNodeList = this.checkedNodeList.filter(n => n.key !== node.key);\n      if (node.children) {\n        node.children.forEach(child => {\n          loopNode(child);\n        });\n      }\n    };\n    nodes.forEach(n => {\n      loopNode(n);\n    });\n    this.refreshCheckState(this.isCheckStrictly);\n  }\n\n  /**\n   * drag event\n   */\n  refreshDragNode(node: NzTreeNode): void {\n    if (node.children.length === 0) {\n      // until root\n      this.conductUp(node);\n    } else {\n      node.children.forEach(child => {\n        this.refreshDragNode(child);\n      });\n    }\n  }\n\n  // reset node level\n  resetNodeLevel(node: NzTreeNode): void {\n    const parentNode = node.getParentNode();\n    if (parentNode) {\n      node.level = parentNode.level + 1;\n    } else {\n      node.level = 0;\n    }\n    for (const child of node.children) {\n      this.resetNodeLevel(child);\n    }\n  }\n\n  calcDropPosition(event: DragEvent): number {\n    const { clientY } = event;\n    // to fix firefox undefined\n    const { top, bottom, height } = event.srcElement\n      ? (event.srcElement as Element).getBoundingClientRect()\n      : (event.target as Element).getBoundingClientRect();\n    const des = Math.max(height * this.DRAG_SIDE_RANGE, this.DRAG_MIN_GAP);\n\n    if (clientY <= top + des) {\n      return -1;\n    } else if (clientY >= bottom - des) {\n      return 1;\n    }\n\n    return 0;\n  }\n\n  /**\n   * drop\n   * 0: inner -1: pre 1: next\n   */\n  dropAndApply(targetNode: NzTreeNode, dragPos: number = -1): void {\n    if (!targetNode || dragPos > 1) {\n      return;\n    }\n    const treeService = targetNode.treeService;\n    const targetParent = targetNode.getParentNode();\n    const isSelectedRootNode = this.selectedNode.getParentNode();\n    // remove the dragNode\n    if (isSelectedRootNode) {\n      isSelectedRootNode.children = isSelectedRootNode.children.filter(n => n.key !== this.selectedNode.key);\n    } else {\n      this.rootNodes = this.rootNodes.filter(n => n.key !== this.selectedNode.key);\n    }\n    switch (dragPos) {\n      case 0:\n        targetNode.addChildren([this.selectedNode]);\n        this.resetNodeLevel(targetNode);\n        break;\n      case -1:\n      case 1:\n        const tIndex = dragPos === 1 ? 1 : 0;\n        if (targetParent) {\n          targetParent.addChildren([this.selectedNode], targetParent.children.indexOf(targetNode) + tIndex);\n          const parentNode = this.selectedNode.getParentNode();\n          if (parentNode) {\n            this.resetNodeLevel(parentNode);\n          }\n        } else {\n          const targetIndex = this.rootNodes.indexOf(targetNode) + tIndex;\n          // Insert root node.\n          this.rootNodes.splice(targetIndex, 0, this.selectedNode);\n          this.rootNodes[targetIndex].parentNode = null;\n          this.resetNodeLevel(this.rootNodes[targetIndex]);\n        }\n        break;\n    }\n    // flush all nodes\n    this.rootNodes.forEach(child => {\n      if (!child.treeService) {\n        child.service = treeService;\n      }\n      this.refreshDragNode(child);\n    });\n  }\n\n  /**\n   * emit Structure\n   * eventName\n   * node\n   * event: MouseEvent / DragEvent\n   * dragNode\n   */\n  formatEvent(eventName: string, node: NzTreeNode | null, event: MouseEvent | DragEvent | null): NzFormatEmitEvent {\n    const emitStructure: NzFormatEmitEvent = {\n      eventName: eventName,\n      node: node,\n      event: event\n    };\n    switch (eventName) {\n      case 'dragstart':\n      case 'dragenter':\n      case 'dragover':\n      case 'dragleave':\n      case 'drop':\n      case 'dragend':\n        Object.assign(emitStructure, { dragNode: this.getSelectedNode() });\n        break;\n      case 'click':\n      case 'dblclick':\n        Object.assign(emitStructure, { selectedKeys: this.selectedNodeList });\n        Object.assign(emitStructure, { nodes: this.selectedNodeList });\n        Object.assign(emitStructure, { keys: this.selectedNodeList.map(n => n.key) });\n        break;\n      case 'check':\n        const checkedNodeList = this.getCheckedNodeList();\n        Object.assign(emitStructure, { checkedKeys: checkedNodeList });\n        Object.assign(emitStructure, { nodes: checkedNodeList });\n        Object.assign(emitStructure, { keys: checkedNodeList.map(n => n.key) });\n        break;\n      case 'search':\n        Object.assign(emitStructure, { matchedKeys: this.getMatchedNodeList() });\n        Object.assign(emitStructure, { nodes: this.getMatchedNodeList() });\n        Object.assign(emitStructure, { keys: this.getMatchedNodeList().map(n => n.key) });\n        break;\n      case 'expand':\n        Object.assign(emitStructure, { nodes: this.expandedNodeList });\n        Object.assign(emitStructure, { keys: this.expandedNodeList.map(n => n.key) });\n        break;\n    }\n    return emitStructure;\n  }\n\n  /**\n   * New functions for flatten nodes\n   */\n\n  getIndexOfArray(list: NzTreeNode[], key: string): number {\n    return list.findIndex(v => v.key === key);\n  }\n\n  /**\n   * Render by nzCheckedKeys\n   * When keys equals null, just render with checkStrictly\n   * @param keys\n   * @param checkStrictly\n   */\n  conductCheck(keys: NzTreeNodeKey[] | null, checkStrictly: boolean): void {\n    this.checkedNodeList = [];\n    this.halfCheckedNodeList = [];\n    const calc = (nodes: NzTreeNode[]) => {\n      nodes.forEach(node => {\n        if (keys === null) {\n          // render tree if no default checked keys found\n          node.isChecked = !!node.origin.checked;\n        } else {\n          if (isInArray(node.key, keys || [])) {\n            node.isChecked = true;\n            node.isHalfChecked = false;\n          } else {\n            node.isChecked = false;\n            node.isHalfChecked = false;\n          }\n        }\n        if (node.children.length > 0) {\n          calc(node.children);\n        }\n      });\n    };\n    calc(this.rootNodes);\n    this.refreshCheckState(checkStrictly);\n  }\n\n  conductExpandedKeys(keys: NzTreeNodeKey[] | true = []): void {\n    const expandedKeySet = new Set(keys === true ? [] : keys);\n    this.expandedNodeList = [];\n    const calc = (nodes: NzTreeNode[]) => {\n      nodes.forEach(node => {\n        node.setExpanded(keys === true || expandedKeySet.has(node.key) || node.isExpanded === true);\n        if (node.isExpanded) {\n          this.setExpandedNodeList(node);\n        }\n        if (node.children.length > 0) {\n          calc(node.children);\n        }\n      });\n    };\n    calc(this.rootNodes);\n  }\n\n  conductSelectedKeys(keys: NzTreeNodeKey[], isMulti: boolean): void {\n    this.selectedNodeList.forEach(node => (node.isSelected = false));\n    this.selectedNodeList = [];\n    const calc = (nodes: NzTreeNode[]): boolean => {\n      return nodes.every(node => {\n        if (isInArray(node.key, keys)) {\n          node.isSelected = true;\n          this.setSelectedNodeList(node);\n          if (!isMulti) {\n            // if not support multi select\n            return false;\n          }\n        } else {\n          node.isSelected = false;\n        }\n        if (node.children.length > 0) {\n          // Recursion\n          return calc(node.children);\n        }\n        return true;\n      });\n    };\n    calc(this.rootNodes);\n  }\n\n  /**\n   * Expand parent nodes by child node\n   * @param node\n   */\n  expandNodeAllParentBySearch(node: NzTreeNode): void {\n    const calc = (n: NzTreeNode | null): void => {\n      if (n) {\n        n.canHide = false;\n        n.setExpanded(true);\n        this.setExpandedNodeList(n);\n        if (n.getParentNode()) {\n          return calc(n.getParentNode());\n        }\n      }\n    };\n    calc(node.getParentNode());\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { InjectionToken } from '@angular/core';\n\nimport { NzTreeBaseService } from './nz-tree-base.service';\n\nexport const NzTreeHigherOrderServiceToken = new InjectionToken<NzTreeBaseService>('NzTreeHigherOrder');\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { NzTreeNode } from './nz-tree-base-node';\nimport { NzTreeBaseService } from './nz-tree-base.service';\n\nexport class NzTreeBase {\n  constructor(public nzTreeService: NzTreeBaseService) {}\n\n  /**\n   * Coerces a value({@link any[]}) to a TreeNodes({@link NzTreeNode[]})\n   */\n  coerceTreeNodes(value: NzSafeAny[]): NzTreeNode[] {\n    let nodes: NzTreeNode[] = [];\n    if (!this.nzTreeService.isArrayOfNzTreeNode(value)) {\n      // has not been new NzTreeNode\n      nodes = value.map(item => new NzTreeNode(item, null, this.nzTreeService));\n    } else {\n      nodes = value.map((item: NzTreeNode) => {\n        item.service = this.nzTreeService;\n        return item;\n      });\n    }\n    return nodes;\n  }\n\n  /**\n   * Get all nodes({@link NzTreeNode})\n   */\n  getTreeNodes(): NzTreeNode[] {\n    return this.nzTreeService.rootNodes;\n  }\n\n  /**\n   * Get {@link NzTreeNode} with key\n   */\n  getTreeNodeByKey(key: string): NzTreeNode | null {\n    // flat tree nodes\n    const nodes: NzTreeNode[] = [];\n    const getNode = (node: NzTreeNode): void => {\n      nodes.push(node);\n      node.getChildren().forEach(n => {\n        getNode(n);\n      });\n    };\n    this.getTreeNodes().forEach(n => {\n      getNode(n);\n    });\n    return nodes.find(n => n.key === key) || null;\n  }\n\n  /**\n   * Get checked nodes(merged)\n   */\n  getCheckedNodeList(): NzTreeNode[] {\n    return this.nzTreeService.getCheckedNodeList();\n  }\n\n  /**\n   * Get selected nodes\n   */\n  getSelectedNodeList(): NzTreeNode[] {\n    return this.nzTreeService.getSelectedNodeList();\n  }\n\n  /**\n   * Get half checked nodes\n   */\n  getHalfCheckedNodeList(): NzTreeNode[] {\n    return this.nzTreeService.getHalfCheckedNodeList();\n  }\n\n  /**\n   * Get expanded nodes\n   */\n  getExpandedNodeList(): NzTreeNode[] {\n    return this.nzTreeService.getExpandedNodeList();\n  }\n\n  /**\n   * Get matched nodes(if nzSearchValue is not null)\n   */\n  getMatchedNodeList(): NzTreeNode[] {\n    return this.nzTreeService.getMatchedNodeList();\n  }\n}\n"]}