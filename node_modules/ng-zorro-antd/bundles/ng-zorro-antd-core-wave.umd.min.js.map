{"version":3,"sources":["ng://ng-zorro-antd/core/wave/nz-wave-renderer.ts","ng://ng-zorro-antd/core/wave/nz-wave.directive.ts","ng://ng-zorro-antd/core/wave/nz-wave.module.ts"],"names":["NzWaveRenderer","triggerElement","ngZone","insertExtraNode","_this","this","waveTransitionDuration","styleForPseudo","extraNode","lastTime","platform","Platform","onClick","event","getAttribute","tagName","className","indexOf","fadeOutWave","clickHandler","bind","bindTriggerEvent","Object","defineProperty","prototype","isBrowser","runOutsideAngular","removeTriggerEvent","addEventListener","removeEventListener","removeStyleAndExtraNode","document","body","contains","removeChild","destroy","node","waveColor","getWaveColor","setAttribute","waveAttributeName","Date","now","isValidColor","createElement","innerHTML","appendChild","runTimeoutOutsideZone","removeAttribute","color","isNotGrey","test","match","nodeStyle","getComputedStyle","getPropertyValue","fn","delay","setTimeout","NZ_WAVE_GLOBAL_DEFAULT_CONFIG","disabled","NZ_WAVE_GLOBAL_CONFIG","InjectionToken","providedIn","factory","NZ_WAVE_GLOBAL_CONFIG_FACTORY","NzWaveDirective","elementRef","config","animationType","nzWaveExtraNode","waveDisabled","isConfigDisabled","waveRenderer","ngOnDestroy","ngOnInit","renderWaveIfEnabled","nativeElement","disable","enable","Directive","args","selector","exportAs","NgZone","ElementRef","Optional","type","Inject","ANIMATION_MODULE_TYPE","Input","NzWaveModule","NgModule","imports","PlatformModule","exports","declarations"],"mappings":"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","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Platform } from '@angular/cdk/platform';\nimport { NgZone } from '@angular/core';\n\nexport class NzWaveRenderer {\n  private waveTransitionDuration = 400;\n  private styleForPseudo: HTMLStyleElement | null = null;\n  private extraNode: HTMLDivElement | null = null;\n  private lastTime = 0;\n  private platform = new Platform();\n  clickHandler: () => void;\n  get waveAttributeName(): string {\n    return this.insertExtraNode ? 'ant-click-animating' : 'ant-click-animating-without-extra-node';\n  }\n\n  constructor(private triggerElement: HTMLElement, private ngZone: NgZone, private insertExtraNode: boolean) {\n    this.clickHandler = this.onClick.bind(this);\n    this.bindTriggerEvent();\n  }\n\n  onClick = (event: MouseEvent) => {\n    if (\n      !this.triggerElement ||\n      !this.triggerElement.getAttribute ||\n      this.triggerElement.getAttribute('disabled') ||\n      (event.target as HTMLElement).tagName === 'INPUT' ||\n      this.triggerElement.className.indexOf('disabled') >= 0\n    ) {\n      return;\n    }\n    this.fadeOutWave();\n  };\n\n  bindTriggerEvent(): void {\n    if (this.platform.isBrowser) {\n      this.ngZone.runOutsideAngular(() => {\n        this.removeTriggerEvent();\n        if (this.triggerElement) {\n          this.triggerElement.addEventListener('click', this.clickHandler, true);\n        }\n      });\n    }\n  }\n\n  removeTriggerEvent(): void {\n    if (this.triggerElement) {\n      this.triggerElement.removeEventListener('click', this.clickHandler, true);\n    }\n  }\n\n  removeStyleAndExtraNode(): void {\n    if (this.styleForPseudo && document.body.contains(this.styleForPseudo)) {\n      document.body.removeChild(this.styleForPseudo);\n      this.styleForPseudo = null;\n    }\n    if (this.insertExtraNode && this.triggerElement.contains(this.extraNode)) {\n      this.triggerElement.removeChild(this.extraNode as Node);\n    }\n  }\n\n  destroy(): void {\n    this.removeTriggerEvent();\n    this.removeStyleAndExtraNode();\n  }\n\n  private fadeOutWave(): void {\n    const node = this.triggerElement;\n    const waveColor = this.getWaveColor(node);\n    node.setAttribute(this.waveAttributeName, 'true');\n    if (Date.now() < this.lastTime + this.waveTransitionDuration) {\n      return;\n    }\n\n    if (this.isValidColor(waveColor)) {\n      if (!this.styleForPseudo) {\n        this.styleForPseudo = document.createElement('style');\n      }\n\n      this.styleForPseudo.innerHTML = `\n      [ant-click-animating-without-extra-node='true']::after, .ant-click-animating-node {\n        --antd-wave-shadow-color: ${waveColor};\n      }`;\n      document.body.appendChild(this.styleForPseudo);\n    }\n\n    if (this.insertExtraNode) {\n      if (!this.extraNode) {\n        this.extraNode = document.createElement('div');\n      }\n      this.extraNode.className = 'ant-click-animating-node';\n      node.appendChild(this.extraNode);\n    }\n\n    this.lastTime = Date.now();\n\n    this.runTimeoutOutsideZone(() => {\n      node.removeAttribute(this.waveAttributeName);\n      this.removeStyleAndExtraNode();\n    }, this.waveTransitionDuration);\n  }\n\n  private isValidColor(color: string): boolean {\n    return (\n      !!color &&\n      color !== '#ffffff' &&\n      color !== 'rgb(255, 255, 255)' &&\n      this.isNotGrey(color) &&\n      !/rgba\\(\\d*, \\d*, \\d*, 0\\)/.test(color) &&\n      color !== 'transparent'\n    );\n  }\n\n  private isNotGrey(color: string): boolean {\n    const match = color.match(/rgba?\\((\\d*), (\\d*), (\\d*)(, [\\.\\d]*)?\\)/);\n    if (match && match[1] && match[2] && match[3]) {\n      return !(match[1] === match[2] && match[2] === match[3]);\n    }\n    return true;\n  }\n\n  private getWaveColor(node: HTMLElement): string {\n    const nodeStyle = getComputedStyle(node);\n    return (\n      nodeStyle.getPropertyValue('border-top-color') || // Firefox Compatible\n      nodeStyle.getPropertyValue('border-color') ||\n      nodeStyle.getPropertyValue('background-color')\n    );\n  }\n\n  private runTimeoutOutsideZone(fn: () => void, delay: number): void {\n    this.ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Directive, ElementRef, Inject, InjectionToken, Input, NgZone, OnDestroy, OnInit, Optional } from '@angular/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { NzWaveRenderer } from './nz-wave-renderer';\n\nexport interface NzWaveConfig {\n  disabled?: boolean;\n}\n\nexport const NZ_WAVE_GLOBAL_DEFAULT_CONFIG: NzWaveConfig = {\n  disabled: false\n};\n\nexport const NZ_WAVE_GLOBAL_CONFIG = new InjectionToken<NzWaveConfig>('nz-wave-global-options', {\n  providedIn: 'root',\n  factory: NZ_WAVE_GLOBAL_CONFIG_FACTORY\n});\n\nexport function NZ_WAVE_GLOBAL_CONFIG_FACTORY(): NzWaveConfig {\n  return NZ_WAVE_GLOBAL_DEFAULT_CONFIG;\n}\n\n@Directive({\n  selector: '[nz-wave],button[nz-button]:not([nzType=\"link\"])',\n  exportAs: 'nzWave'\n})\nexport class NzWaveDirective implements OnInit, OnDestroy {\n  @Input() nzWaveExtraNode = false;\n\n  private waveRenderer?: NzWaveRenderer;\n  private waveDisabled: boolean = false;\n\n  get disabled(): boolean {\n    return this.waveDisabled;\n  }\n\n  get rendererRef(): NzWaveRenderer | undefined {\n    return this.waveRenderer;\n  }\n\n  constructor(\n    private ngZone: NgZone,\n    private elementRef: ElementRef,\n    @Optional() @Inject(NZ_WAVE_GLOBAL_CONFIG) private config: NzWaveConfig,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationType: string\n  ) {\n    this.waveDisabled = this.isConfigDisabled();\n  }\n\n  isConfigDisabled(): boolean {\n    let disabled = false;\n    if (this.config && typeof this.config.disabled === 'boolean') {\n      disabled = this.config.disabled;\n    }\n    if (this.animationType === 'NoopAnimations') {\n      disabled = true;\n    }\n    return disabled;\n  }\n\n  ngOnDestroy(): void {\n    if (this.waveRenderer) {\n      this.waveRenderer.destroy();\n    }\n  }\n\n  ngOnInit(): void {\n    this.renderWaveIfEnabled();\n  }\n\n  renderWaveIfEnabled(): void {\n    if (!this.waveDisabled && this.elementRef.nativeElement) {\n      this.waveRenderer = new NzWaveRenderer(this.elementRef.nativeElement, this.ngZone, this.nzWaveExtraNode);\n    }\n  }\n\n  disable(): void {\n    this.waveDisabled = true;\n    if (this.waveRenderer) {\n      this.waveRenderer.removeTriggerEvent();\n      this.waveRenderer.removeStyleAndExtraNode();\n    }\n  }\n\n  enable(): void {\n    // config priority\n    this.waveDisabled = this.isConfigDisabled() || false;\n    if (this.waveRenderer) {\n      this.waveRenderer.bindTriggerEvent();\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { PlatformModule } from '@angular/cdk/platform';\nimport { NgModule } from '@angular/core';\nimport { NzWaveDirective } from './nz-wave.directive';\n\n@NgModule({\n  imports: [PlatformModule],\n  exports: [NzWaveDirective],\n  declarations: [NzWaveDirective]\n})\nexport class NzWaveModule {}\n"]}