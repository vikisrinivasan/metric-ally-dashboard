/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __extends } from "tslib";
import { Injectable } from "@angular/core";
/**
 * @abstract
 */
import * as ɵngcc0 from '@angular/core';
var /**
 * @abstract
 */
TranslateCompiler = /** @class */ (function () {
    function TranslateCompiler() {
    }
    return TranslateCompiler;
}());
/**
 * @abstract
 */
export { TranslateCompiler };
if (false) {
    /**
     * @abstract
     * @param {?} value
     * @param {?} lang
     * @return {?}
     */
    TranslateCompiler.prototype.compile = function (value, lang) { };
    /**
     * @abstract
     * @param {?} translations
     * @param {?} lang
     * @return {?}
     */
    TranslateCompiler.prototype.compileTranslations = function (translations, lang) { };
}
/**
 * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all
 */
var TranslateFakeCompiler = /** @class */ (function (_super) {
    __extends(TranslateFakeCompiler, _super);
    function TranslateFakeCompiler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} value
     * @param {?} lang
     * @return {?}
     */
    TranslateFakeCompiler.prototype.compile = /**
     * @param {?} value
     * @param {?} lang
     * @return {?}
     */
    function (value, lang) {
        return value;
    };
    /**
     * @param {?} translations
     * @param {?} lang
     * @return {?}
     */
    TranslateFakeCompiler.prototype.compileTranslations = /**
     * @param {?} translations
     * @param {?} lang
     * @return {?}
     */
    function (translations, lang) {
        return translations;
    };
TranslateFakeCompiler.ɵfac = function TranslateFakeCompiler_Factory(t) { return ɵTranslateFakeCompiler_BaseFactory(t || TranslateFakeCompiler); };
TranslateFakeCompiler.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TranslateFakeCompiler, factory: function (t) { return TranslateFakeCompiler.ɵfac(t); } });
var ɵTranslateFakeCompiler_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(TranslateFakeCompiler);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TranslateFakeCompiler, [{
        type: Injectable
    }], null, null); })();
    return TranslateFakeCompiler;
}(TranslateCompiler));
export { TranslateFakeCompiler };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLmNvbXBpbGVyLmpzIiwic291cmNlcyI6WyJAbmd4LXRyYW5zbGF0ZS9jb3JlL2xpYi90cmFuc2xhdGUuY29tcGlsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDO0FBQ0c7QUFBYTs7QUFBaEI7QUFBUTtBQUFhO0FBQUk7QUFDTyxJQURoQztBQUErQixJQUkvQixDQUFDO0FBQ0QsSUFEQSx3QkFBQztBQUFELENBQUMsQUFKRCxJQUlDO0FBQ0Q7QUFDRztBQUNTO0FBQUk7QUFBOEI7QUFBYTtBQUFRO0FBQWlCO0FBRS9FO0FBQ1M7QUFBbUI7QUFBUSxJQVR2QyxpRUFBaUU7QUFDbkU7QUFDTztBQUFpQjtBQUErQjtBQUl0RDtBQUFtQjtBQUFRLElBSjFCLG9GQUFtRTtBQUNyRTtBQUNBO0FBQ0c7QUFDK0Y7QUFFbEc7QUFDaUQsSUFBTix5Q0FBaUI7QUFBQyxJQUQ3RDtBQUNxQjtBQUNVLElBTy9CLENBQUM7QUFDRDtBQUFRO0FBQXdCO0FBQXVCO0FBQW1CO0FBQVEsSUFSaEYsdUNBQU87QUFBTztBQUF3QjtBQUNyQztBQUVIO0FBQ08sSUFKTCxVQUFRLEtBQWEsRUFBRSxJQUFZO0FBQUksUUFDckMsT0FBTyxLQUFLLENBQUM7QUFDakIsSUFBRSxDQUFDO0FBRUg7QUFBUTtBQUErQjtBQUN2QztBQUFtQjtBQUNqQixJQUZBLG1EQUFtQjtBQUFPO0FBQStCO0FBQ3ZDO0FBR1o7QUFBUSxJQUpkLFVBQW9CLFlBQWlCLEVBQUUsSUFBWTtBQUFJLFFBQ3JELE9BQU8sWUFBWSxDQUFDO0FBQ3hCLElBQUUsQ0FBQzt5REFSRixVQUFVOzs7OzswQkFDTDtBQUFDLElBUVAsNEJBQUM7QUFDQSxDQURBLEFBVEQsQ0FDMkMsaUJBQWlCLEdBUTNEO0FBQ0QsU0FUYSxxQkFBcUI7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFRyYW5zbGF0ZUNvbXBpbGVyIHtcbiAgYWJzdHJhY3QgY29tcGlsZSh2YWx1ZTogc3RyaW5nLCBsYW5nOiBzdHJpbmcpOiBzdHJpbmcgfCBGdW5jdGlvbjtcblxuICBhYnN0cmFjdCBjb21waWxlVHJhbnNsYXRpb25zKHRyYW5zbGF0aW9uczogYW55LCBsYW5nOiBzdHJpbmcpOiBhbnk7XG59XG5cbi8qKlxuICogVGhpcyBjb21waWxlciBpcyBqdXN0IGEgcGxhY2Vob2xkZXIgdGhhdCBkb2VzIG5vdGhpbmcsIGluIGNhc2UgeW91IGRvbid0IG5lZWQgYSBjb21waWxlciBhdCBhbGxcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRyYW5zbGF0ZUZha2VDb21waWxlciBleHRlbmRzIFRyYW5zbGF0ZUNvbXBpbGVyIHtcbiAgY29tcGlsZSh2YWx1ZTogc3RyaW5nLCBsYW5nOiBzdHJpbmcpOiBzdHJpbmcgfCBGdW5jdGlvbiB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgY29tcGlsZVRyYW5zbGF0aW9ucyh0cmFuc2xhdGlvbnM6IGFueSwgbGFuZzogc3RyaW5nKTogYW55IHtcbiAgICByZXR1cm4gdHJhbnNsYXRpb25zO1xuICB9XG59XG4iXX0=