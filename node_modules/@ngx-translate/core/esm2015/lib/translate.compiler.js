/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
/**
 * @abstract
 */
import * as ɵngcc0 from '@angular/core';
export class TranslateCompiler {
}
if (false) {
    /**
     * @abstract
     * @param {?} value
     * @param {?} lang
     * @return {?}
     */
    TranslateCompiler.prototype.compile = function (value, lang) { };
    /**
     * @abstract
     * @param {?} translations
     * @param {?} lang
     * @return {?}
     */
    TranslateCompiler.prototype.compileTranslations = function (translations, lang) { };
}
/**
 * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all
 */
export class TranslateFakeCompiler extends TranslateCompiler {
    /**
     * @param {?} value
     * @param {?} lang
     * @return {?}
     */
    compile(value, lang) {
        return value;
    }
    /**
     * @param {?} translations
     * @param {?} lang
     * @return {?}
     */
    compileTranslations(translations, lang) {
        return translations;
    }
}
TranslateFakeCompiler.ɵfac = function TranslateFakeCompiler_Factory(t) { return ɵTranslateFakeCompiler_BaseFactory(t || TranslateFakeCompiler); };
TranslateFakeCompiler.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TranslateFakeCompiler, factory: TranslateFakeCompiler.ɵfac });
const ɵTranslateFakeCompiler_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(TranslateFakeCompiler);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TranslateFakeCompiler, [{
        type: Injectable
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLmNvbXBpbGVyLmpzIiwic291cmNlcyI6WyJAbmd4LXRyYW5zbGF0ZS9jb3JlL2xpYi90cmFuc2xhdGUuY29tcGlsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekM7QUFDRztBQUFhOztBQUFoQixNQUFNLE9BQWdCLGlCQUFpQjtBQUN2QyxDQUdDO0FBQ0Q7QUFFUTtBQUFRO0FBQWlCO0FBQXdCO0FBQXVCO0FBQ2hGO0FBQ0ksSUFSRixpRUFBaUU7QUFDbkU7QUFDTztBQUFpQjtBQUErQjtBQUl0RDtBQUFtQjtBQUFRLElBSjFCLG9GQUFtRTtBQUNyRTtBQUNBO0FBQ0c7QUFDK0Y7QUFHbEcsTUFBTSxPQUFPLHFCQUFzQixTQUFRLGlCQUFpQjtBQUM1RDtBQUFRO0FBQXdCO0FBQXVCO0FBQ3pDO0FBRWQsSUFIRSxPQUFPLENBQUMsS0FBYSxFQUFFLElBQVk7QUFBSSxRQUNyQyxPQUFPLEtBQUssQ0FBQztBQUNqQixJQUFFLENBQUM7QUFDSDtBQUNPO0FBQStCO0FBQXVCO0FBQzNDO0FBQ2pCLElBRkMsbUJBQW1CLENBQUMsWUFBaUIsRUFBRSxJQUFZO0FBQUksUUFDckQsT0FBTyxZQUFZLENBQUM7QUFDeEIsSUFBRSxDQUFDO0FBQ0g7aURBVEMsVUFBVTs7Ozs7MEJBQ1Q7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFRyYW5zbGF0ZUNvbXBpbGVyIHtcbiAgYWJzdHJhY3QgY29tcGlsZSh2YWx1ZTogc3RyaW5nLCBsYW5nOiBzdHJpbmcpOiBzdHJpbmcgfCBGdW5jdGlvbjtcblxuICBhYnN0cmFjdCBjb21waWxlVHJhbnNsYXRpb25zKHRyYW5zbGF0aW9uczogYW55LCBsYW5nOiBzdHJpbmcpOiBhbnk7XG59XG5cbi8qKlxuICogVGhpcyBjb21waWxlciBpcyBqdXN0IGEgcGxhY2Vob2xkZXIgdGhhdCBkb2VzIG5vdGhpbmcsIGluIGNhc2UgeW91IGRvbid0IG5lZWQgYSBjb21waWxlciBhdCBhbGxcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRyYW5zbGF0ZUZha2VDb21waWxlciBleHRlbmRzIFRyYW5zbGF0ZUNvbXBpbGVyIHtcbiAgY29tcGlsZSh2YWx1ZTogc3RyaW5nLCBsYW5nOiBzdHJpbmcpOiBzdHJpbmcgfCBGdW5jdGlvbiB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgY29tcGlsZVRyYW5zbGF0aW9ucyh0cmFuc2xhdGlvbnM6IGFueSwgbGFuZzogc3RyaW5nKTogYW55IHtcbiAgICByZXR1cm4gdHJhbnNsYXRpb25zO1xuICB9XG59XG4iXX0=