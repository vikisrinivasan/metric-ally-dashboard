/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, NgZone, Output, Renderer2, ViewContainerRef, ViewEncapsulation } from '@angular/core';
import * as helper from './nestable.helper';
import { defaultSettings, DRAG_START, EXPAND_COLLAPSE, mouse, REGISTER_HANDLE } from './nestable.constant';
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function NestableComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function NestableComponent_ng_template_1_li_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function NestableComponent_ng_template_1_li_1_ng_container_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
var _c0 = function (a0, a1) { return { nestable: a0, depth: a1 }; };
function NestableComponent_ng_template_1_li_1_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, NestableComponent_ng_template_1_li_1_ng_container_2_ng_container_1_Template, 1, 0, "ng-container", 0);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var item_r8 = ɵngcc0.ɵɵnextContext().$implicit;
    var depth_r6 = ɵngcc0.ɵɵnextContext().depth;
    ɵngcc0.ɵɵnextContext();
    var _r1 = ɵngcc0.ɵɵreference(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r1)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction2(2, _c0, item_r8.children, depth_r6 + 1));
} }
var _c1 = function (a0, a1, a2) { return { nestable: a0, item: a1, depth: a2 }; };
function NestableComponent_ng_template_1_li_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 4);
    ɵngcc0.ɵɵtemplate(1, NestableComponent_ng_template_1_li_1_ng_container_1_Template, 1, 0, "ng-container", 0);
    ɵngcc0.ɵɵtemplate(2, NestableComponent_ng_template_1_li_1_ng_container_2_Template, 2, 5, "ng-container", 5);
    ɵngcc0.ɵɵelement(3, "ul");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var item_r8 = ctx.$implicit;
    var ctx_r14 = ɵngcc0.ɵɵnextContext();
    var nestable_r5 = ctx_r14.nestable;
    var depth_r6 = ctx_r14.depth;
    var ctx_r7 = ɵngcc0.ɵɵnextContext();
    var _r3 = ɵngcc0.ɵɵreference(4);
    ɵngcc0.ɵɵclassMap(ctx_r7.options.itemClass);
    ɵngcc0.ɵɵproperty("id", item_r8.$$id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r3)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction3(10, _c1, nestable_r5, item_r8, depth_r6));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", item_r8.children && item_r8.$$expanded);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMap(ctx_r7.options.listClass);
    ɵngcc0.ɵɵstyleProp("padding-left", ctx_r7.options.threshold, "px");
} }
function NestableComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ul");
    ɵngcc0.ɵɵtemplate(1, NestableComponent_ng_template_1_li_1_Template, 4, 14, "li", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var nestable_r5 = ctx.nestable;
    var depth_r6 = ctx.depth;
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap(ctx_r2.options.listClass);
    ɵngcc0.ɵɵstyleProp("padding-left", depth_r6 ? ctx_r2.options.threshold : 0, "px");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", nestable_r5);
} }
function NestableComponent_ng_template_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
var _c2 = function (a0, a1) { return { item: a0, parentList: a1 }; };
var _c3 = function (a0, a1) { return { $implicit: a0, depth: a1 }; };
function NestableComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    var _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵlistener("mousedown", function NestableComponent_ng_template_3_Template_div_mousedown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r20); var item_r16 = ctx.item; var parentList_r15 = ctx.nestable; var ctx_r19 = ɵngcc0.ɵɵnextContext(); return ctx_r19.dragStartFromItem($event, item_r16, parentList_r15); });
    ɵngcc0.ɵɵtemplate(1, NestableComponent_ng_template_3_ng_container_1_Template, 1, 0, "ng-container", 0);
    ɵngcc0.ɵɵelement(2, "div", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var parentList_r15 = ctx.nestable;
    var item_r16 = ctx.item;
    var depth_r17 = ctx.depth;
    var ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r4.template)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction2(5, _c3, ɵngcc0.ɵɵpureFunction2(2, _c2, item_r16, parentList_r15), depth_r17));
} }
var _c4 = function (a0) { return { nestable: a0, depth: 0 }; };
var PX = 'px';
var ɵ0 = /**
 * @return {?}
 */
function () {
    /** @type {?} */
    var el = document.createElement('div');
    /** @type {?} */
    var docEl = document.documentElement;
    if (!('pointerEvents' in el.style)) {
        return false;
    }
    el.style.pointerEvents = 'auto';
    el.style.pointerEvents = 'x';
    docEl.appendChild(el);
    /** @type {?} */
    var supports = window.getComputedStyle &&
        window.getComputedStyle(el, '').pointerEvents === 'auto';
    docEl.removeChild(el);
    return !!supports;
};
/** @type {?} */
var hasPointerEvents = ((ɵ0))();
var NestableComponent = /** @class */ (function () {
    function NestableComponent(ref, renderer, el, zone) {
        this.ref = ref;
        this.renderer = renderer;
        this.el = el;
        this.zone = zone;
        this.listChange = new EventEmitter();
        this.drop = new EventEmitter();
        this.drag = new EventEmitter();
        this.disclosure = new EventEmitter();
        this.options = defaultSettings;
        this.disableDrag = false;
        this.dragRootEl = null;
        this.dragEl = null;
        this.dragModel = null;
        this.moving = false;
        /**
         * Dragged element contains children, and those children contain other children and so on...
         * This property gives you the number of generations contained within the dragging item.
         */
        this.dragDepth = 0;
        /**
         * The depth of dragging item relative to element root (ngx-nestable)
         */
        this.relativeDepth = 0;
        this.hasNewRoot = false;
        this.pointEl = null;
        this.items = [];
        this._componentActive = false;
        this._mouse = Object.assign({}, mouse);
        this._list = [];
        this._itemId = 0;
        this._registerHandleDirective = false;
    }
    Object.defineProperty(NestableComponent.prototype, "list", {
        get: /**
         * @return {?}
         */
        function () {
            return this._list;
        },
        set: /**
         * @param {?} list
         * @return {?}
         */
        function (list) {
            this._list = list;
            this._generateItemIds();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NestableComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        // set/extend default options
        this._componentActive = true;
        /** @type {?} */
        var optionKeys = Object.keys(defaultSettings);
        try {
            for (var optionKeys_1 = tslib_1.__values(optionKeys), optionKeys_1_1 = optionKeys_1.next(); !optionKeys_1_1.done; optionKeys_1_1 = optionKeys_1.next()) {
                var key = optionKeys_1_1.value;
                if (typeof this.options[key] === 'undefined') {
                    this.options[key] = defaultSettings[key];
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (optionKeys_1_1 && !optionKeys_1_1.done && (_a = optionKeys_1.return)) _a.call(optionKeys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this._generateItemIds();
        this._generateItemExpanded();
        this._createHandleListener();
    };
    /**
     * @return {?}
     */
    NestableComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () { };
    /**
     * @private
     * @return {?}
     */
    NestableComponent.prototype._generateItemIds = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        helper._traverseChildren(this._list, (/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            item['$$id'] = _this._itemId++;
        }));
    };
    /**
     * @private
     * @return {?}
     */
    NestableComponent.prototype._generateItemExpanded = /**
     * @private
     * @return {?}
     */
    function () {
        helper._traverseChildren(this._list, (/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (typeof item.expanded === 'undefined') {
                item['$$expanded'] = true;
            }
            else {
                item['$$expanded'] = item.expanded;
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    NestableComponent.prototype._createHandleListener = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.renderer.listen(this.el.nativeElement, REGISTER_HANDLE, (/**
         * @return {?}
         */
        function () {
            _this._registerHandleDirective = true;
        }));
        this.renderer.listen(this.el.nativeElement, DRAG_START, (/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.dragStart(data.detail.event, data.detail.param.item, data.detail.param.parentList);
        }));
        this.renderer.listen(this.el.nativeElement, EXPAND_COLLAPSE, (/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.disclosure.emit({
                item: data.detail.item,
                expanded: data.detail.item['$$expanded']
            });
        }));
    };
    /**
     * @private
     * @param {?} event
     * @param {?} dragItem
     * @return {?}
     */
    NestableComponent.prototype._createDragClone = /**
     * @private
     * @param {?} event
     * @param {?} dragItem
     * @return {?}
     */
    function (event, dragItem) {
        this._mouseStart(event, dragItem);
        if (!this._registerHandleDirective) {
            this._mouse.offsetY = dragItem.nextElementSibling
                ? dragItem.nextElementSibling.clientHeight / 2
                : dragItem.clientHeight / 2;
        }
        // create drag clone
        this.dragEl = document.createElement(this.options.listNodeName);
        document.body.appendChild(this.dragEl);
        this.renderer.addClass(this.dragEl, this.options.dragClass);
        // add drag clone to body and set css
        this.renderer.setStyle(this.dragEl, 'left', event.pageX - this._mouse.offsetX + PX);
        this.renderer.setStyle(this.dragEl, 'top', event.pageY - this._mouse.offsetY + PX);
        this.renderer.setStyle(this.dragEl, 'position', 'absolute');
        this.renderer.setStyle(this.dragEl, 'z-index', 9999);
        this.renderer.setStyle(this.dragEl, 'pointer-events', 'none');
    };
    /**
     * @private
     * @param {?} event
     * @param {?} dragItem
     * @return {?}
     */
    NestableComponent.prototype._createPlaceholder = /**
     * @private
     * @param {?} event
     * @param {?} dragItem
     * @return {?}
     */
    function (event, dragItem) {
        this._placeholder = document.createElement('div');
        this._placeholder.classList.add(this.options.placeClass);
        helper._insertAfter(this._placeholder, dragItem);
        dragItem.parentNode.removeChild(dragItem);
        this.dragEl.appendChild(dragItem);
        this.dragRootEl = dragItem;
    };
    /**
     * Sets depth proerties (relative and drag)
     */
    /**
     * Sets depth proerties (relative and drag)
     * @private
     * @return {?}
     */
    NestableComponent.prototype._calculateDepth = /**
     * Sets depth proerties (relative and drag)
     * @private
     * @return {?}
     */
    function () {
        // total depth of dragging item
        /** @type {?} */
        var depth;
        /** @type {?} */
        var items = this.dragEl.querySelectorAll(this.options.itemNodeName);
        for (var i = 0; i < items.length; i++) {
            depth = helper._getParents(items[i], this.dragEl).length;
            if (depth > this.dragDepth) {
                this.dragDepth = depth;
            }
        }
        // depth relative to root
        this.relativeDepth = helper._getParents(this._placeholder, this.el.nativeElement.querySelector(this.options.listNodeName)).length;
    };
    /**
     * @private
     * @param {?} event
     * @param {?} dragItem
     * @return {?}
     */
    NestableComponent.prototype._mouseStart = /**
     * @private
     * @param {?} event
     * @param {?} dragItem
     * @return {?}
     */
    function (event, dragItem) {
        this._mouse.offsetX = event.pageX - helper._offset(dragItem).left;
        this._mouse.offsetY = event.pageY - helper._offset(dragItem).top;
        this._mouse.startX = this._mouse.lastX = event.pageX;
        this._mouse.startY = this._mouse.lastY = event.pageY;
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    NestableComponent.prototype._mouseUpdate = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // mouse position last events
        this._mouse.lastX = this._mouse.nowX;
        this._mouse.lastY = this._mouse.nowY;
        // mouse position this events
        this._mouse.nowX = event.pageX;
        this._mouse.nowY = event.pageY;
        // distance mouse moved between events
        this._mouse.distX = this._mouse.nowX - this._mouse.lastX;
        this._mouse.distY = this._mouse.nowY - this._mouse.lastY;
        // direction mouse was moving
        this._mouse.lastDirX = this._mouse.dirX;
        this._mouse.lastDirY = this._mouse.dirY;
        // direction mouse is now moving (on both axis)
        this._mouse.dirX =
            this._mouse.distX === 0 ? 0 : this._mouse.distX > 0 ? 1 : -1;
        this._mouse.dirY =
            this._mouse.distY === 0 ? 0 : this._mouse.distY > 0 ? 1 : -1;
    };
    /**
     * @private
     * @return {?}
     */
    NestableComponent.prototype._showMasks = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var masks = this.el.nativeElement.getElementsByClassName('nestable-item-mask');
        for (var i = 0; i < masks.length; i++) {
            masks[i].style.display = 'block';
        }
    };
    /**
     * @private
     * @return {?}
     */
    NestableComponent.prototype._hideMasks = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var masks = this.el.nativeElement.getElementsByClassName('nestable-item-mask');
        for (var i = 0; i < masks.length; i++) {
            masks[i].style.display = 'none';
        }
    };
    /**
     * calc mouse traverse distance on axis
     * @param m - mouse
     */
    /**
     * calc mouse traverse distance on axis
     * @private
     * @param {?} m - mouse
     * @return {?}
     */
    NestableComponent.prototype._calcMouseDistance = /**
     * calc mouse traverse distance on axis
     * @private
     * @param {?} m - mouse
     * @return {?}
     */
    function (m) {
        m.distAxX += Math.abs(m.distX);
        if (m.dirX !== 0 && m.dirX !== m.lastDirX) {
            m.distAxX = 0;
        }
        m.distAxY += Math.abs(m.distY);
        if (m.dirY !== 0 && m.dirY !== m.lastDirY) {
            m.distAxY = 0;
        }
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    NestableComponent.prototype._move = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var depth;
        /** @type {?} */
        var list;
        /** @type {?} */
        var dragRect = this.dragEl.getBoundingClientRect();
        this.renderer.setStyle(this.dragEl, 'left', event.pageX - this._mouse.offsetX + PX);
        this.renderer.setStyle(this.dragEl, 'top', event.pageY - this._mouse.offsetY + PX);
        this._mouseUpdate(event);
        // axis mouse is now moving on
        /** @type {?} */
        var newAx = Math.abs(this._mouse.distX) > Math.abs(this._mouse.distY) ? 1 : 0;
        // do nothing on first move
        if (!this._mouse.moving) {
            this._mouse.dirAx = newAx;
            this._mouse.moving = 1;
            return;
        }
        // calc distance moved on this axis (and direction)
        if (this._mouse.dirAx !== newAx) {
            this._mouse.distAxX = 0;
            this._mouse.distAxY = 0;
        }
        else {
            this._calcMouseDistance(this._mouse);
        }
        this._mouse.dirAx = newAx;
        // find list item under cursor
        if (!hasPointerEvents) {
            this.dragEl.style.visibility = 'hidden';
        }
        /** @type {?} */
        var pointEl = document.elementFromPoint(event.pageX - document.body.scrollLeft, event.pageY - (window.pageYOffset || document.documentElement.scrollTop));
        if (!hasPointerEvents) {
            this.dragEl.style.visibility = 'visible';
        }
        if (pointEl &&
            (pointEl.classList.contains('nestable-item-mask') ||
                pointEl.classList.contains(this.options.placeClass))) {
            this.pointEl = pointEl.parentElement.parentElement;
        }
        else {
            return;
        }
        /**
         * move horizontal
         */
        if (!this.options.fixedDepth &&
            this._mouse.dirAx &&
            this._mouse.distAxX >= this.options.threshold) {
            // reset move distance on x-axis for new phase
            this._mouse.distAxX = 0;
            /** @type {?} */
            var previous = this._placeholder.previousElementSibling;
            // increase horizontal level if previous sibling exists, is not collapsed, and can have children
            if (this._mouse.distX > 0 && previous) {
                list = previous.querySelectorAll(this.options.listNodeName);
                list = list[list.length - 1];
                // check if depth limit has reached
                depth = helper._getParents(this._placeholder, this.el.nativeElement.querySelector(this.options.listNodeName)).length;
                if (depth + this.dragDepth <= this.options.maxDepth) {
                    // create new sub-level if one doesn't exist
                    if (!list) {
                        list = document.createElement(this.options.listNodeName);
                        list.style.paddingLeft = this.options.threshold + PX;
                        list.appendChild(this._placeholder);
                        previous.appendChild(list);
                        // this.setParent(previous);
                    }
                    else {
                        // else append to next level up
                        list = previous.querySelector(":scope > " + this.options.listNodeName);
                        list.appendChild(this._placeholder);
                    }
                }
            }
            // decrease horizontal level
            if (this._mouse.distX < 0) {
                // we can't decrease a level if an item preceeds the current one
                /** @type {?} */
                var next = document.querySelector("." + this.options.placeClass + " + " + this.options.itemNodeName);
                /** @type {?} */
                var parentElement = this._placeholder.parentElement;
                if (!next && parentElement) {
                    /** @type {?} */
                    var closestItem = helper._closest(this._placeholder, this.options.itemNodeName);
                    if (closestItem) {
                        parentElement.removeChild(this._placeholder);
                        helper._insertAfter(this._placeholder, closestItem);
                    }
                }
            }
        }
        if (!pointEl.classList.contains('nestable-item-mask')) {
            return;
        }
        // find root list of item under cursor
        /** @type {?} */
        var pointElRoot = helper._closest(this.pointEl, "." + this.options.rootClass);
        /** @type {?} */
        var isNewRoot = pointElRoot
            ? this.dragRootEl.dataset['nestable-id'] !==
                pointElRoot.dataset['nestable-id']
            : false;
        /**
         * move vertical
         */
        if (!this._mouse.dirAx || isNewRoot) {
            // check if groups match if dragging over new root
            if (isNewRoot &&
                this.options.group !== pointElRoot.dataset['nestable-group']) {
                return;
            }
            // check depth limit
            depth =
                this.dragDepth -
                    1 +
                    helper._getParents(this.pointEl, this.el.nativeElement.querySelector(this.options.listNodeName)).length;
            if (depth > this.options.maxDepth) {
                return;
            }
            /** @type {?} */
            var before = event.pageY <
                helper._offset(this.pointEl).top + this.pointEl.clientHeight / 2;
            /** @type {?} */
            var placeholderParent = this._placeholder.parentNode;
            // get point element depth
            /** @type {?} */
            var pointRelativeDepth = void 0;
            pointRelativeDepth = helper._getParents(this.pointEl, this.el.nativeElement.querySelector(this.options.listNodeName)).length;
            if (this.options.fixedDepth) {
                if (pointRelativeDepth === this.relativeDepth - 1) {
                    /** @type {?} */
                    var childList = this.pointEl.querySelector(this.options.listNodeName);
                    if (!childList.children.length) {
                        childList.appendChild(this._placeholder);
                    }
                }
                else if (pointRelativeDepth === this.relativeDepth) {
                    if (before) {
                        this.pointEl.parentElement.insertBefore(this._placeholder, this.pointEl);
                    }
                    else {
                        helper._insertAfter(this._placeholder, this.pointEl);
                    }
                    if (Array.prototype.indexOf.call(this.pointEl.parentElement.children, this.pointEl) ===
                        this.pointEl.parentElement.children.length - 1) {
                        helper._insertAfter(this._placeholder, this.pointEl);
                    }
                }
            }
            else if (before) {
                this.pointEl.parentElement.insertBefore(this._placeholder, this.pointEl);
            }
            else {
                helper._insertAfter(this._placeholder, this.pointEl);
            }
        }
    };
    /**
     * @return {?}
     */
    NestableComponent.prototype.reset = /**
     * @return {?}
     */
    function () {
        var e_2, _a;
        /** @type {?} */
        var keys = Object.keys(this._mouse);
        try {
            for (var keys_1 = tslib_1.__values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                var key = keys_1_1.value;
                this._mouse[key] = 0;
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        this._itemId = 0;
        this.moving = false;
        this.dragEl = null;
        this.dragRootEl = null;
        this.dragDepth = 0;
        this.relativeDepth = 0;
        this.hasNewRoot = false;
        this.pointEl = null;
    };
    /**
     * @param {?} event
     * @param {?} item
     * @param {?} parentList
     * @return {?}
     */
    NestableComponent.prototype.dragStartFromItem = /**
     * @param {?} event
     * @param {?} item
     * @param {?} parentList
     * @return {?}
     */
    function (event, item, parentList) {
        if (!this._registerHandleDirective) {
            this.dragStart(event, item, parentList);
        }
    };
    /**
     * @private
     * @param {?} event
     * @param {?} item
     * @param {?} parentList
     * @return {?}
     */
    NestableComponent.prototype.dragStart = /**
     * @private
     * @param {?} event
     * @param {?} item
     * @param {?} parentList
     * @return {?}
     */
    function (event, item, parentList) {
        this._oldListLength = this.list.length;
        if (!this.options.disableDrag) {
            event.stopPropagation();
            event.preventDefault();
            if (event.originalEvent) {
                event = event.originalEvent;
            }
            // allow only first mouse button
            if (event.type.indexOf('mouse') === 0) {
                if (event.button !== 0) {
                    return;
                }
            }
            else {
                if (event.touches.length !== 1) {
                    return;
                }
            }
            this.ref.detach();
            this._dragIndex = parentList.indexOf(item);
            this.dragModel = parentList.splice(parentList.indexOf(item), 1)[0];
            /** @type {?} */
            var dragItem = helper._closest(event.target, this.options.itemNodeName);
            if (dragItem === null) {
                return;
            }
            this._parentDragId = Number.parseInt(dragItem.parentElement.parentElement.id);
            /** @type {?} */
            var dragRect = dragItem.getBoundingClientRect();
            this._showMasks();
            this._createDragClone(event, dragItem);
            this.renderer.setStyle(this.dragEl, 'width', dragRect.width + PX);
            this._createPlaceholder(event, dragItem);
            this.renderer.setStyle(this._placeholder, 'height', dragRect.height + PX);
            this._calculateDepth();
            this.drag.emit({
                originalEvent: event,
                item: item
            });
            this._cancelMouseup = this.renderer.listen(document, 'mouseup', this.dragStop.bind(this));
            this._cancelMousemove = this.renderer.listen(document, 'mousemove', this.dragMove.bind(this));
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NestableComponent.prototype.dragStop = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._cancelMouseup();
        this._cancelMousemove();
        this._hideMasks();
        if (this.dragEl) {
            /** @type {?} */
            var draggedId = Number.parseInt(this.dragEl.firstElementChild.id);
            /** @type {?} */
            var placeholderContainer = helper._closest(this._placeholder, this.options.itemNodeName);
            /** @type {?} */
            var changedElementPosition = this._dragIndex !==
                Array.prototype.indexOf.call(this._placeholder.parentElement.children, this._placeholder);
            /** @type {?} */
            var index = Array.prototype.indexOf.call(this._placeholder.parentElement.children, this._placeholder);
            if ((this._dragIndex === index) && (this._oldListLength === this.list.length)) {
                changedElementPosition = true;
            }
            // placeholder in root
            if (placeholderContainer === null) {
                this.list.splice(Array.prototype.indexOf.call(this._placeholder.parentElement.children, this._placeholder), 0, tslib_1.__assign({}, this.dragModel));
            }
            else {
                // palceholder nested
                placeholderContainer = helper._findObjectInTree(this.list, Number.parseInt(placeholderContainer.id));
                if (!placeholderContainer.children) {
                    placeholderContainer.children = [];
                    placeholderContainer.children.push(tslib_1.__assign({}, this.dragModel));
                }
                else {
                    placeholderContainer.children.splice(Array.prototype.indexOf.call(this._placeholder.parentElement.children, this._placeholder), 0, tslib_1.__assign({}, this.dragModel));
                }
                if (index === this._dragIndex) {
                    changedElementPosition = false;
                }
                if (!changedElementPosition) {
                    changedElementPosition =
                        placeholderContainer['$$id'] !== this._parentDragId;
                }
            }
            this._placeholder.parentElement.removeChild(this._placeholder);
            this.dragEl.parentNode.removeChild(this.dragEl);
            this.dragEl.remove();
            this.reset();
            this.listChange.emit(this.list);
            this.drop.emit({
                originalEvent: event,
                destination: placeholderContainer,
                item: this.dragModel,
                changedElementPosition: changedElementPosition
            });
            this.ref.reattach();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NestableComponent.prototype.dragMove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.dragEl) {
            event.preventDefault();
            if (event.originalEvent) {
                event = event.originalEvent;
            }
            this._move(event.type.indexOf('mouse') === 0 ? event : event.touches[0]);
        }
    };
    /**
     * @return {?}
     */
    NestableComponent.prototype.expandAll = /**
     * @return {?}
     */
    function () {
        helper._traverseChildren(this._list, (/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            item['$$expanded'] = true;
        }));
        this.ref.markForCheck();
    };
    /**
     * @return {?}
     */
    NestableComponent.prototype.collapseAll = /**
     * @return {?}
     */
    function () {
        helper._traverseChildren(this._list, (/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            item['$$expanded'] = false;
        }));
        this.ref.markForCheck();
    };
    /** @nocollapse */
    NestableComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: Renderer2 },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    NestableComponent.propDecorators = {
        listChange: [{ type: Output }],
        drop: [{ type: Output }],
        drag: [{ type: Output }],
        disclosure: [{ type: Output }],
        template: [{ type: Input }],
        options: [{ type: Input }],
        disableDrag: [{ type: Input }],
        list: [{ type: Input }]
    };
NestableComponent.ɵfac = function NestableComponent_Factory(t) { return new (t || NestableComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
NestableComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NestableComponent, selectors: [["ngx-nestable"]], inputs: { options: "options", disableDrag: "disableDrag", list: "list", template: "template" }, outputs: { listChange: "listChange", drop: "drop", drag: "drag", disclosure: "disclosure" }, decls: 5, vars: 4, consts: [[4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["nestableList", ""], ["nestableItem", ""], [3, "class", "id", 4, "ngFor", "ngForOf"], [3, "id"], [4, "ngIf"], [1, "nestable-item-container", "mat-list-item", 3, "mousedown"], [1, "nestable-item-mask"]], template: function NestableComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, NestableComponent_ng_container_0_Template, 1, 0, "ng-container", 0);
        ɵngcc0.ɵɵtemplate(1, NestableComponent_ng_template_1_Template, 2, 5, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(3, NestableComponent_ng_template_3_Template, 3, 8, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        var _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r1)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c4, ctx.list));
    } }, directives: [ɵngcc1.NgTemplateOutlet, ɵngcc1.NgForOf, ɵngcc1.NgIf], styles: ["@import url(https://fonts.googleapis.com/css?family=Roboto);ul .dd-placeholder{margin:5px 0;padding:0;min-height:30px;background:#f2fbff;border:1px dashed #b6bcbf;box-sizing:border-box}ul li .nestable-item-mask{display:none;position:absolute;top:0;bottom:0;right:0;left:0;z-index:9998}ul li .nestable-expand-button{display:block;position:relative;cursor:pointer;float:left;width:25px;height:14px;padding:0;white-space:nowrap;overflow:hidden;border:0;background:0 0;font-size:18px;line-height:1;text-align:center;font-weight:700;outline:0}ul li .nestable-item-container{position:relative;display:flex;flex-direction:row;align-items:center;color:rgba(0,0,0,.87);min-height:32px;font-size:16px;font-family:Roboto,sans-serif;cursor:pointer;outline:0;margin-bottom:2px;padding-left:8px}ul li .nestable-item-container:hover{background:rgba(0,0,0,.04)}ol,ul{list-style:none}"], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NestableComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-nestable',
                template: "<ng-container *ngTemplateOutlet=\"nestableList; context:{nestable: list, depth: 0}\">\n</ng-container>\n\n<ng-template #nestableList let-nestable=\"nestable\" let-depth=\"depth\">\n    <ul [style.padding-left.px]=\"depth ? options.threshold : 0\"\n        [class]=\"options.listClass\">\n        <li [class]=\"options.itemClass\" [id]=\"item.$$id\" *ngFor=\"let item of nestable\">\n\n            <ng-container *ngTemplateOutlet=\"nestableItem; context:{nestable: nestable, item: item, depth: depth}\">\n            </ng-container>\n\n            <ng-container *ngIf=\"item.children && item.$$expanded\">\n                <ng-container *ngTemplateOutlet=\"nestableList; context:{nestable: item.children, depth: depth + 1}\">\n                </ng-container>\n            </ng-container>\n\n            <ul [class]=\"options.listClass\" [style.padding-left.px]=\"options.threshold\"></ul>\n        </li>\n    </ul>\n</ng-template>\n\n<ng-template #nestableItem let-parentList=\"nestable\" let-item=\"item\" let-depth=\"depth\">\n    <div class=\"nestable-item-container mat-list-item\" (mousedown)=\"dragStartFromItem($event, item, parentList)\">\n        <ng-container\n            *ngTemplateOutlet=\"template; context:{$implicit: {item: item, parentList: parentList}, depth: depth}\">\n        </ng-container>\n\n        <div class=\"nestable-item-mask\"></div>\n    </div>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: ["@import url(https://fonts.googleapis.com/css?family=Roboto);ul .dd-placeholder{margin:5px 0;padding:0;min-height:30px;background:#f2fbff;border:1px dashed #b6bcbf;box-sizing:border-box}ul li .nestable-item-mask{display:none;position:absolute;top:0;bottom:0;right:0;left:0;z-index:9998}ul li .nestable-expand-button{display:block;position:relative;cursor:pointer;float:left;width:25px;height:14px;padding:0;white-space:nowrap;overflow:hidden;border:0;background:0 0;font-size:18px;line-height:1;text-align:center;font-weight:700;outline:0}ul li .nestable-item-container{position:relative;display:flex;flex-direction:row;align-items:center;color:rgba(0,0,0,.87);min-height:32px;font-size:16px;font-family:Roboto,sans-serif;cursor:pointer;outline:0;margin-bottom:2px;padding-left:8px}ul li .nestable-item-container:hover{background:rgba(0,0,0,.04)}ol,ul{list-style:none}"]
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { listChange: [{
            type: Output
        }], drop: [{
            type: Output
        }], drag: [{
            type: Output
        }], disclosure: [{
            type: Output
        }], options: [{
            type: Input
        }], disableDrag: [{
            type: Input
        }], list: [{
            type: Input
        }], template: [{
            type: Input
        }] }); })();
    return NestableComponent;
}());
export { NestableComponent };
if (false) {
    /** @type {?} */
    NestableComponent.prototype.listChange;
    /** @type {?} */
    NestableComponent.prototype.drop;
    /** @type {?} */
    NestableComponent.prototype.drag;
    /** @type {?} */
    NestableComponent.prototype.disclosure;
    /** @type {?} */
    NestableComponent.prototype.template;
    /** @type {?} */
    NestableComponent.prototype.options;
    /** @type {?} */
    NestableComponent.prototype.disableDrag;
    /** @type {?} */
    NestableComponent.prototype.dragRootEl;
    /** @type {?} */
    NestableComponent.prototype.dragEl;
    /** @type {?} */
    NestableComponent.prototype.dragModel;
    /** @type {?} */
    NestableComponent.prototype.moving;
    /**
     * Dragged element contains children, and those children contain other children and so on...
     * This property gives you the number of generations contained within the dragging item.
     * @type {?}
     */
    NestableComponent.prototype.dragDepth;
    /**
     * The depth of dragging item relative to element root (ngx-nestable)
     * @type {?}
     */
    NestableComponent.prototype.relativeDepth;
    /** @type {?} */
    NestableComponent.prototype.hasNewRoot;
    /** @type {?} */
    NestableComponent.prototype.pointEl;
    /** @type {?} */
    NestableComponent.prototype.items;
    /**
     * @type {?}
     * @private
     */
    NestableComponent.prototype._componentActive;
    /**
     * @type {?}
     * @private
     */
    NestableComponent.prototype._mouse;
    /**
     * @type {?}
     * @private
     */
    NestableComponent.prototype._list;
    /**
     * @type {?}
     * @private
     */
    NestableComponent.prototype._cancelMousemove;
    /**
     * @type {?}
     * @private
     */
    NestableComponent.prototype._cancelMouseup;
    /**
     * @type {?}
     * @private
     */
    NestableComponent.prototype._placeholder;
    /**
     * @type {?}
     * @private
     */
    NestableComponent.prototype._itemId;
    /**
     * @type {?}
     * @private
     */
    NestableComponent.prototype._registerHandleDirective;
    /**
     * @type {?}
     * @private
     */
    NestableComponent.prototype._dragIndex;
    /**
     * @type {?}
     * @private
     */
    NestableComponent.prototype._parentDragId;
    /**
     * @type {?}
     * @private
     */
    NestableComponent.prototype._oldListLength;
    /**
     * @type {?}
     * @private
     */
    NestableComponent.prototype.ref;
    /**
     * @type {?}
     * @private
     */
    NestableComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    NestableComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NestableComponent.prototype.zone;
}
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,