import { __decorate, __param } from "tslib";
import { isPlatformServer } from '@angular/common';
import { QUILL_CONFIG_TOKEN } from './quill-editor.interfaces';
import { AfterViewInit, Component, ElementRef, Inject, Input, OnChanges, PLATFORM_ID, Renderer2, SimpleChanges, ViewEncapsulation, NgZone } from '@angular/core';
import { defaultModules } from './quill-defaults';
import { getFormat } from './helpers';
let Quill = null;
let QuillViewComponent = class QuillViewComponent {
    constructor(platformId, config, renderer, elementRef, zone) {
        this.platformId = platformId;
        this.config = config;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.zone = zone;
        this.strict = true;
        this.customOptions = [];
        this.preserveWhitespace = false;
        this.valueSetter = (quillEditor, value) => {
            const format = getFormat(this.format, this.config.format);
            let content = value;
            if (format === 'html' || format === 'text') {
                content = quillEditor.clipboard.convert(value);
            }
            else if (format === 'json') {
                try {
                    content = JSON.parse(value);
                }
                catch (e) {
                    content = [{ insert: value }];
                }
            }
            quillEditor.setContents(content);
        };
    }
    ngOnChanges(changes) {
        if (!this.quillEditor) {
            return;
        }
        if (changes.content) {
            this.valueSetter(this.quillEditor, changes.content.currentValue);
        }
    }
    ngAfterViewInit() {
        if (isPlatformServer(this.platformId)) {
            return;
        }
        if (!Quill) {
            this.zone.runOutsideAngular(() => {
                Quill = require('quill');
            });
        }
        const modules = Object.assign({}, this.modules || (this.config.modules || defaultModules));
        modules.toolbar = false;
        this.customOptions.forEach((customOption) => {
            const newCustomOption = Quill.import(customOption.import);
            newCustomOption.whitelist = customOption.whitelist;
            Quill.register(newCustomOption, true);
        });
        let debug = this.debug;
        if (!debug && debug !== false && this.config.debug) {
            debug = this.config.debug;
        }
        let formats = this.formats;
        if (!formats && formats === undefined) {
            formats = this.config.formats ? Object.assign({}, this.config.formats) : (this.config.formats === null ? null : undefined);
        }
        const theme = this.theme || (this.config.theme ? this.config.theme : 'snow');
        this.elementRef.nativeElement.insertAdjacentHTML('afterbegin', this.preserveWhitespace ? '<pre quill-view-element></pre>' : '<div quill-view-element></div>');
        this.editorElem = this.elementRef.nativeElement.querySelector('[quill-view-element]');
        this.zone.runOutsideAngular(() => {
            this.quillEditor = new Quill(this.editorElem, {
                debug,
                formats,
                modules,
                readOnly: true,
                strict: this.strict,
                theme
            });
        });
        this.renderer.addClass(this.editorElem, 'ngx-quill-view');
        if (this.content) {
            this.valueSetter(this.quillEditor, this.content);
        }
    }
};
QuillViewComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [QUILL_CONFIG_TOKEN,] }] },
    { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] }
];
__decorate([
    Input()
], QuillViewComponent.prototype, "format", void 0);
__decorate([
    Input()
], QuillViewComponent.prototype, "theme", void 0);
__decorate([
    Input()
], QuillViewComponent.prototype, "modules", void 0);
__decorate([
    Input()
], QuillViewComponent.prototype, "debug", void 0);
__decorate([
    Input()
], QuillViewComponent.prototype, "formats", void 0);
__decorate([
    Input()
], QuillViewComponent.prototype, "strict", void 0);
__decorate([
    Input()
], QuillViewComponent.prototype, "content", void 0);
__decorate([
    Input()
], QuillViewComponent.prototype, "customOptions", void 0);
__decorate([
    Input()
], QuillViewComponent.prototype, "preserveWhitespace", void 0);
QuillViewComponent = __decorate([
    Component({
        encapsulation: ViewEncapsulation.None,
        selector: 'quill-view',
        template: `
`,
        styles: [`
.ql-container.ngx-quill-view {
  border: 0;
}
`]
    }),
    __param(0, Inject(PLATFORM_ID)),
    __param(1, Inject(QUILL_CONFIG_TOKEN)),
    __param(2, Inject(Renderer2)),
    __param(3, Inject(ElementRef)),
    __param(4, Inject(NgZone))
], QuillViewComponent);
export { QuillViewComponent };
//# sourceMappingURL=data:application/json;base64,