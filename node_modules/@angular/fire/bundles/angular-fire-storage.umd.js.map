{"version":3,"file":"angular-fire-storage.umd.js","sources":["../../../src/storage/observable/fromTask.ts","../../../src/storage/task.ts","../../../src/storage/ref.ts","../../../src/storage/storage.ts","../../../src/storage/storage.module.ts"],"names":["Observable","map","of","observeOn","switchMap","from","InjectionToken","ɵAngularFireSchedulers","ɵkeepUnstableUntilFirstFactory","ɵfirebaseAppFactory","registerStorage","Injectable","Inject","FIREBASE_OPTIONS","Optional","FIREBASE_APP_NAME","PLATFORM_ID","NgZone","NgModule"],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\nimport { UploadTask, UploadTaskSnapshot } from '../interfaces';\n\nexport function fromTask(task: UploadTask) {\n  return new Observable<UploadTaskSnapshot>(subscriber => {\n    const progress = (snap: UploadTaskSnapshot) => subscriber.next(snap);\n    const error = e => subscriber.error(e);\n    const complete = () => subscriber.complete();\n    task.on('state_changed', progress, error, () => {\n      progress(task.snapshot);\n      complete();\n    });\n    return () => task.cancel();\n  });\n}\n","import { UploadTask, UploadTaskSnapshot } from './interfaces';\nimport { fromTask } from './observable/fromTask';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface AngularFireUploadTask {\n  task: UploadTask;\n  snapshotChanges(): Observable<UploadTaskSnapshot | undefined>;\n  percentageChanges(): Observable<number | undefined>;\n  pause(): boolean;\n  cancel(): boolean;\n  resume(): boolean;\n  then(\n    onFulfilled?: ((a: UploadTaskSnapshot) => any) | null,\n    onRejected?: ((a: Error) => any) | null\n  ): Promise<any>;\n  catch(onRejected: (a: Error) => any): Promise<any>;\n}\n\n/**\n * Create an AngularFireUploadTask from a regular UploadTask from the Storage SDK.\n * This method creates an observable of the upload and returns on object that provides\n * multiple methods for controlling and monitoring the file upload.\n */\nexport function createUploadTask(task: UploadTask): AngularFireUploadTask {\n  const inner$ = fromTask(task);\n  return {\n    task,\n    then: task.then.bind(task),\n    catch: task.catch.bind(task),\n    pause: task.pause.bind(task),\n    cancel: task.cancel.bind(task),\n    resume: task.resume.bind(task),\n    snapshotChanges: () => inner$,\n    percentageChanges: () => inner$.pipe(\n      map(s => s.bytesTransferred / s.totalBytes * 100)\n    )\n  };\n}\n","import { ListResult, Reference, SettableMetadata, StringFormat, UploadMetadata } from './interfaces';\nimport { AngularFireUploadTask, createUploadTask } from './task';\nimport { from, Observable, of } from 'rxjs';\nimport { ɵAngularFireSchedulers } from '@angular/fire';\nimport { observeOn, switchMap } from 'rxjs/operators';\n\nexport interface AngularFireStorageReference {\n  getDownloadURL(): Observable<any>;\n  getMetadata(): Observable<any>;\n  delete(): Observable<any>;\n  child(path: string): any;\n  updateMetadata(meta: SettableMetadata): Observable<any>;\n  put(data: any, metadata?: UploadMetadata | undefined): AngularFireUploadTask;\n  putString(data: string, format?: string | undefined, metadata?: UploadMetadata | undefined): AngularFireUploadTask;\n  listAll(): Observable<ListResult>;\n}\n\n/**\n * Create an AngularFire wrapped Storage Reference. This object\n * creates observable methods from promise based methods.\n */\nexport function createStorageRef(\n  ref: Reference,\n  schedulers: ɵAngularFireSchedulers,\n  keepUnstableUntilFirst: <T>(obs$: Observable<T>) => Observable<T>\n): AngularFireStorageReference {\n  return {\n    getDownloadURL: () => of(undefined).pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(() => ref.getDownloadURL()),\n      keepUnstableUntilFirst\n    ),\n    getMetadata: () => of(undefined).pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(() => ref.getMetadata()),\n      keepUnstableUntilFirst\n    ),\n    delete: () => from(ref.delete()),\n    child: (path: string) => createStorageRef(ref.child(path), schedulers, keepUnstableUntilFirst),\n    updateMetadata: (meta: SettableMetadata) => from(ref.updateMetadata(meta)),\n    put: (data: any, metadata?: UploadMetadata) => {\n      const task = ref.put(data, metadata);\n      return createUploadTask(task);\n    },\n    putString: (data: string, format?: StringFormat, metadata?: UploadMetadata) => {\n      const task = ref.putString(data, format, metadata);\n      return createUploadTask(task);\n    },\n    listAll: () => from(ref.listAll())\n  };\n}\n","import { Inject, Injectable, InjectionToken, NgZone, Optional, PLATFORM_ID } from '@angular/core';\nimport { createStorageRef } from './ref';\nimport { Observable } from 'rxjs';\nimport {\n  FIREBASE_APP_NAME,\n  FIREBASE_OPTIONS,\n  FirebaseAppConfig,\n  FirebaseOptions,\n  ɵAngularFireSchedulers,\n  ɵfirebaseAppFactory,\n  ɵkeepUnstableUntilFirstFactory\n} from '@angular/fire';\nimport { UploadMetadata } from './interfaces';\nimport { storage } from 'firebase/app';\nimport 'firebase/storage';\nimport firebase from 'firebase/app';\nimport { registerStorage } from '@firebase/storage';\n\nexport const BUCKET = new InjectionToken<string>('angularfire2.storageBucket');\n\n/**\n * AngularFireStorage Service\n *\n * This service is the main entry point for this feature module. It provides\n * an API for uploading and downloading binary files from Cloud Storage for\n * Firebase.\n */\n@Injectable({\n  providedIn: 'any'\n})\nexport class AngularFireStorage {\n  public readonly storage: storage.Storage;\n\n  public readonly keepUnstableUntilFirst: <T>(obs: Observable<T>) => Observable<T>;\n  public readonly schedulers: ɵAngularFireSchedulers;\n\n  constructor(\n    @Inject(FIREBASE_OPTIONS) options: FirebaseOptions,\n    @Optional() @Inject(FIREBASE_APP_NAME) nameOrConfig: string | FirebaseAppConfig | null | undefined,\n    @Optional() @Inject(BUCKET) storageBucket: string | null,\n    // tslint:disable-next-line:ban-types\n    @Inject(PLATFORM_ID) platformId: Object,\n    zone: NgZone\n  ) {\n    this.schedulers = new ɵAngularFireSchedulers(zone);\n    this.keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(this.schedulers);\n\n    this.storage = zone.runOutsideAngular(() => {\n      const app = ɵfirebaseAppFactory(options, zone, nameOrConfig);\n      if (registerStorage) {\n        registerStorage(firebase as any);\n      }\n      return app.storage(storageBucket || undefined);\n    });\n  }\n\n  ref(path: string) {\n    return createStorageRef(this.storage.ref(path), this.schedulers, this.keepUnstableUntilFirst);\n  }\n\n  upload(path: string, data: any, metadata?: UploadMetadata) {\n    const storageRef = this.storage.ref(path);\n    const ref = createStorageRef(storageRef, this.schedulers, this.keepUnstableUntilFirst);\n    return ref.put(data, metadata);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { AngularFireStorage } from './storage';\n\n@NgModule({\n  providers: [ AngularFireStorage ]\n})\nexport class AngularFireStorageModule { }\n"]}