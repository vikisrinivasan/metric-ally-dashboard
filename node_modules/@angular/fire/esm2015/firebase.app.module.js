/**
 * @fileoverview added by tsickle
 * Generated from: firebase.app.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, InjectionToken, NgModule, NgZone, Optional, PLATFORM_ID, VERSION as NG_VERSION, Version } from '@angular/core';
import firebase from 'firebase/app';
/**
 * @record
 */
import * as ɵngcc0 from '@angular/core';
export function FirebaseOptions() { }
/**
 * @record
 */
export function FirebaseAppConfig() { }
/** @type {?} */
export const FIREBASE_OPTIONS = new InjectionToken('angularfire2.app.options');
/** @type {?} */
export const FIREBASE_APP_NAME = new InjectionToken('angularfire2.app.nameOrConfig');
// Have to implement as we need to return a class from the provider, we should consider exporting
// this in the firebase/app types as this is our highest risk of breaks
export class FirebaseApp {
}
if (false) {
    /** @type {?} */
    FirebaseApp.prototype.name;
    /** @type {?} */
    FirebaseApp.prototype.options;
    /** @type {?} */
    FirebaseApp.prototype.analytics;
    /** @type {?} */
    FirebaseApp.prototype.auth;
    /** @type {?} */
    FirebaseApp.prototype.database;
    /** @type {?} */
    FirebaseApp.prototype.messaging;
    /** @type {?} */
    FirebaseApp.prototype.performance;
    /** @type {?} */
    FirebaseApp.prototype.storage;
    /** @type {?} */
    FirebaseApp.prototype.delete;
    /** @type {?} */
    FirebaseApp.prototype.firestore;
    /** @type {?} */
    FirebaseApp.prototype.functions;
    /** @type {?} */
    FirebaseApp.prototype.remoteConfig;
}
/** @type {?} */
export const VERSION = new Version('6.0.3');
/**
 * @param {?} options
 * @param {?} zone
 * @param {?=} nameOrConfig
 * @return {?}
 */
export function ɵfirebaseAppFactory(options, zone, nameOrConfig) {
    /** @type {?} */
    const name = typeof nameOrConfig === 'string' && nameOrConfig || '[DEFAULT]';
    /** @type {?} */
    const config = typeof nameOrConfig === 'object' && nameOrConfig || {};
    config.name = config.name || name;
    // Added any due to some inconsistency between @firebase/app and firebase types
    /** @type {?} */
    const existingApp = (/** @type {?} */ (firebase.apps.filter((/**
     * @param {?} app
     * @return {?}
     */
    app => app && app.name === config.name))[0]));
    // We support FirebaseConfig, initializeApp's public type only accepts string; need to cast as any
    // Could be solved with https://github.com/firebase/firebase-js-sdk/pull/1206
    return (/** @type {?} */ ((existingApp || zone.runOutsideAngular((/**
     * @return {?}
     */
    () => firebase.initializeApp(options, (/** @type {?} */ (config))))))));
}
/** @type {?} */
const FIREBASE_APP_PROVIDER = {
    provide: FirebaseApp,
    useFactory: ɵfirebaseAppFactory,
    deps: [
        FIREBASE_OPTIONS,
        NgZone,
        [new Optional(), FIREBASE_APP_NAME]
    ]
};
export class AngularFireModule {
    // tslint:disable-next-line:ban-types
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        firebase.registerVersion('angularfire', VERSION.full, platformId.toString());
        firebase.registerVersion('angular', NG_VERSION.full);
    }
    /**
     * @param {?} options
     * @param {?=} nameOrConfig
     * @return {?}
     */
    static initializeApp(options, nameOrConfig) {
        return {
            ngModule: AngularFireModule,
            providers: [
                { provide: FIREBASE_OPTIONS, useValue: options },
                { provide: FIREBASE_APP_NAME, useValue: nameOrConfig }
            ]
        };
    }
}
AngularFireModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AngularFireModule });
AngularFireModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AngularFireModule_Factory(t) { return new (t || AngularFireModule)(ɵngcc0.ɵɵinject(PLATFORM_ID)); }, providers: [FIREBASE_APP_PROVIDER] });
/** @nocollapse */
AngularFireModule.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularFireModule, [{
        type: NgModule,
        args: [{
                providers: [FIREBASE_APP_PROVIDER]
            }]
    }], function () { return [{ type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlyZWJhc2UuYXBwLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvcmUvZmlyZWJhc2UuYXBwLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFDTCxNQUFNLEVBQUUsY0FBYyxFQUF1QixRQUFRLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsT0FBTyxJQUFJLFVBQVUsRUFBRSxPQUFPLEVBQ3JILE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sUUFBUSxNQUFNLGNBQWMsQ0FBQztBQUNwQztBQUFJO0FBQVc7O0FBR2YscUNBRUM7QUFDRDtBQUNHO0FBQVc7QUFBZCx1Q0FFQztBQUNEO0FBQ0EsTUFBTSxPQUFPLGdCQUFnQixHQUFHLElBQUksY0FBYyxDQUFrQiwwQkFBMEIsQ0FBQztBQUMvRjtBQUFBLE1BQU0sT0FBTyxpQkFBaUIsR0FBRyxJQUFJLGNBQWMsQ0FBeUMsK0JBQStCLENBQUM7QUFDNUg7QUFDaUc7QUFFakcsTUFBTSxPQUFPLFdBQVc7QUFBRyxDQWExQjtBQUNEO0FBQ1k7QUFBcUIsSUFkL0IsMkJBQWE7QUFDZjtBQUNNLElBREosOEJBQVk7QUFDZDtBQUFxQixJQUFuQixnQ0FBcUM7QUFDdkM7QUFBcUIsSUFBbkIsMkJBQXNCO0FBQ3hCO0FBQXFCLElBQW5CLCtCQUFzRDtBQUN4RDtBQUFxQixJQUFuQixnQ0FBcUM7QUFDdkM7QUFBcUIsSUFBbkIsa0NBQTJDO0FBQzdDO0FBQXFCLElBQW5CLDhCQUFxRDtBQUN2RDtBQUFxQixJQUFuQiw2QkFBNEI7QUFDOUI7QUFBcUIsSUFBbkIsZ0NBQXFDO0FBQ3ZDO0FBQXFCLElBQW5CLGdDQUFvRDtBQUN0RDtBQUFxQixJQUFuQixtQ0FBOEM7QUFDaEQ7QUFDQTtBQUNBLE1BQU0sT0FBTyxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUM7QUFBVTtBQUFJLFFBQVEsQ0FBQztBQUVoRDtBQUFtQjtBQUE0QjtBQUFlO0FBQXhFLE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxPQUF3QixFQUFFLElBQVksRUFBRSxZQUFnRDtBQUM1SDtBQUFxQixVQUFiLElBQUksR0FBRyxPQUFPLFlBQVksS0FBSyxRQUFRLElBQUksWUFBWSxJQUFJLFdBQVc7QUFDOUU7QUFBcUIsVUFBYixNQUFNLEdBQUcsT0FBTyxZQUFZLEtBQUssUUFBUSxJQUFJLFlBQVksSUFBSSxFQUFFO0FBQ3ZFLElBQUUsTUFBTSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQztBQUNwQztBQUNFO0FBQXFCLFVBQWYsV0FBVyxHQUFHLG1CQUFBLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTTtBQUFNO0FBQXNCO0FBQW1CO0FBQ3RGLElBRHdDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFPO0FBQzVGLElBQUUsa0dBQWtHO0FBQ3BHLElBQUUsNkVBQTZFO0FBQy9FLElBQUUsT0FBTyxtQkFBQSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsaUJBQWlCO0FBQU07QUFBbUI7QUFBUSxJQUFoQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxtQkFBQSxNQUFNLEVBQU8sQ0FBQyxFQUFDLENBQUMsRUFBZSxDQUFDO0FBQ3RILENBQUM7QUFDRDtBQUNnQixNQUFWLHFCQUFxQixHQUFHO0FBQzlCLElBQUUsT0FBTyxFQUFFLFdBQVc7QUFDdEIsSUFBRSxVQUFVLEVBQUUsbUJBQW1CO0FBQ2pDLElBQUUsSUFBSSxFQUFFO0FBQ1IsUUFBSSxnQkFBZ0I7QUFDcEIsUUFBSSxNQUFNO0FBQ1YsUUFBSSxDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsaUJBQWlCLENBQUM7QUFDdkMsS0FBRztBQUNILENBQUM7QUFLRCxNQUFNLE9BQU8saUJBQWlCO0FBQzlCO0FBQTBDO0FBQVE7QUFBNkI7QUFBUSxJQVdyRixZQUFpQyxVQUFrQjtBQUNyRCxRQUFJLFFBQVEsQ0FBQyxlQUFlLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFDakYsUUFBSSxRQUFRLENBQUMsZUFBZSxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekQsSUFBRSxDQUFDO0FBQ0g7QUFDTTtBQUEwQjtBQUFnQztBQUFtQjtBQUFRLElBaEJ6RixNQUFNLENBQUMsYUFBYSxDQUFDLE9BQXdCLEVBQUUsWUFBeUM7QUFBSSxRQUMxRixPQUFPO0FBQ1gsWUFBTSxRQUFRLEVBQUUsaUJBQWlCO0FBQ2pDLFlBQU0sU0FBUyxFQUFFO0FBQ2pCLGdCQUFRLEVBQUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUM7QUFDdEQsZ0JBQVEsRUFBQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBQztBQUM1RCxhQUFPO0FBQ1AsU0FBSyxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0g7NkNBYkMsUUFBUSxTQUFDO0NBQ1IsU0FBUyxFQUFFLENBQUMscUJBQXFCLENBQUMsY0FDbkMsK0pBQ0k7QUFBQztBQUFtQjtBQUNVLFlBV1ksTUFBTSx1QkFBdEMsTUFBTSxTQUFDLFdBQVc7QUFBUTs7Ozs7Ozs7O2tDQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBJbmplY3QsIEluamVjdGlvblRva2VuLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSwgTmdab25lLCBPcHRpb25hbCwgUExBVEZPUk1fSUQsIFZFUlNJT04gYXMgTkdfVkVSU0lPTiwgVmVyc2lvblxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCBmaXJlYmFzZSBmcm9tICdmaXJlYmFzZS9hcHAnO1xuaW1wb3J0IHsgYW5hbHl0aWNzLCBhcHAsIGF1dGgsIGRhdGFiYXNlLCBmaXJlc3RvcmUsIGZ1bmN0aW9ucywgbWVzc2FnaW5nLCBwZXJmb3JtYW5jZSwgcmVtb3RlQ29uZmlnLCBzdG9yYWdlIH0gZnJvbSAnZmlyZWJhc2UvYXBwJztcblxuLy8gSU5WRVNUSUdBVEUgUHVibGljIHR5cGVzIGRvbid0IGV4cG9zZSBGaXJlYmFzZU9wdGlvbnMgb3IgRmlyZWJhc2VBcHBDb25maWcsIGlzIHRoaXMgdGhlIGNhc2UgYW55bG9uZ2VyP1xuZXhwb3J0IGludGVyZmFjZSBGaXJlYmFzZU9wdGlvbnMge1xuICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlyZWJhc2VBcHBDb25maWcge1xuICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5cbmV4cG9ydCBjb25zdCBGSVJFQkFTRV9PUFRJT05TID0gbmV3IEluamVjdGlvblRva2VuPEZpcmViYXNlT3B0aW9ucz4oJ2FuZ3VsYXJmaXJlMi5hcHAub3B0aW9ucycpO1xuZXhwb3J0IGNvbnN0IEZJUkVCQVNFX0FQUF9OQU1FID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZyB8IEZpcmViYXNlQXBwQ29uZmlnIHwgdW5kZWZpbmVkPignYW5ndWxhcmZpcmUyLmFwcC5uYW1lT3JDb25maWcnKTtcblxuLy8gSGF2ZSB0byBpbXBsZW1lbnQgYXMgd2UgbmVlZCB0byByZXR1cm4gYSBjbGFzcyBmcm9tIHRoZSBwcm92aWRlciwgd2Ugc2hvdWxkIGNvbnNpZGVyIGV4cG9ydGluZ1xuLy8gdGhpcyBpbiB0aGUgZmlyZWJhc2UvYXBwIHR5cGVzIGFzIHRoaXMgaXMgb3VyIGhpZ2hlc3QgcmlzayBvZiBicmVha3NcbmV4cG9ydCBjbGFzcyBGaXJlYmFzZUFwcCBpbXBsZW1lbnRzIFBhcnRpYWw8YXBwLkFwcD4ge1xuICBuYW1lOiBzdHJpbmc7XG4gIG9wdGlvbnM6IHt9O1xuICBhbmFseXRpY3M6ICgpID0+IGFuYWx5dGljcy5BbmFseXRpY3M7XG4gIGF1dGg6ICgpID0+IGF1dGguQXV0aDtcbiAgZGF0YWJhc2U6IChkYXRhYmFzZVVSTD86IHN0cmluZykgPT4gZGF0YWJhc2UuRGF0YWJhc2U7XG4gIG1lc3NhZ2luZzogKCkgPT4gbWVzc2FnaW5nLk1lc3NhZ2luZztcbiAgcGVyZm9ybWFuY2U6ICgpID0+IHBlcmZvcm1hbmNlLlBlcmZvcm1hbmNlO1xuICBzdG9yYWdlOiAoc3RvcmFnZUJ1Y2tldD86IHN0cmluZykgPT4gc3RvcmFnZS5TdG9yYWdlO1xuICBkZWxldGU6ICgpID0+IFByb21pc2U8dm9pZD47XG4gIGZpcmVzdG9yZTogKCkgPT4gZmlyZXN0b3JlLkZpcmVzdG9yZTtcbiAgZnVuY3Rpb25zOiAocmVnaW9uPzogc3RyaW5nKSA9PiBmdW5jdGlvbnMuRnVuY3Rpb25zO1xuICByZW1vdGVDb25maWc6ICgpID0+IHJlbW90ZUNvbmZpZy5SZW1vdGVDb25maWc7XG59XG5cbmV4cG9ydCBjb25zdCBWRVJTSU9OID0gbmV3IFZlcnNpb24oJ0FOR1VMQVJGSVJFMl9WRVJTSU9OJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiDJtWZpcmViYXNlQXBwRmFjdG9yeShvcHRpb25zOiBGaXJlYmFzZU9wdGlvbnMsIHpvbmU6IE5nWm9uZSwgbmFtZU9yQ29uZmlnPzogc3RyaW5nIHwgRmlyZWJhc2VBcHBDb25maWcgfCBudWxsKSB7XG4gIGNvbnN0IG5hbWUgPSB0eXBlb2YgbmFtZU9yQ29uZmlnID09PSAnc3RyaW5nJyAmJiBuYW1lT3JDb25maWcgfHwgJ1tERUZBVUxUXSc7XG4gIGNvbnN0IGNvbmZpZyA9IHR5cGVvZiBuYW1lT3JDb25maWcgPT09ICdvYmplY3QnICYmIG5hbWVPckNvbmZpZyB8fCB7fTtcbiAgY29uZmlnLm5hbWUgPSBjb25maWcubmFtZSB8fCBuYW1lO1xuICAvLyBBZGRlZCBhbnkgZHVlIHRvIHNvbWUgaW5jb25zaXN0ZW5jeSBiZXR3ZWVuIEBmaXJlYmFzZS9hcHAgYW5kIGZpcmViYXNlIHR5cGVzXG4gIGNvbnN0IGV4aXN0aW5nQXBwID0gZmlyZWJhc2UuYXBwcy5maWx0ZXIoYXBwID0+IGFwcCAmJiBhcHAubmFtZSA9PT0gY29uZmlnLm5hbWUpWzBdIGFzIGFueTtcbiAgLy8gV2Ugc3VwcG9ydCBGaXJlYmFzZUNvbmZpZywgaW5pdGlhbGl6ZUFwcCdzIHB1YmxpYyB0eXBlIG9ubHkgYWNjZXB0cyBzdHJpbmc7IG5lZWQgdG8gY2FzdCBhcyBhbnlcbiAgLy8gQ291bGQgYmUgc29sdmVkIHdpdGggaHR0cHM6Ly9naXRodWIuY29tL2ZpcmViYXNlL2ZpcmViYXNlLWpzLXNkay9wdWxsLzEyMDZcbiAgcmV0dXJuIChleGlzdGluZ0FwcCB8fCB6b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IGZpcmViYXNlLmluaXRpYWxpemVBcHAob3B0aW9ucywgY29uZmlnIGFzIGFueSkpKSBhcyBGaXJlYmFzZUFwcDtcbn1cblxuY29uc3QgRklSRUJBU0VfQVBQX1BST1ZJREVSID0ge1xuICBwcm92aWRlOiBGaXJlYmFzZUFwcCxcbiAgdXNlRmFjdG9yeTogybVmaXJlYmFzZUFwcEZhY3RvcnksXG4gIGRlcHM6IFtcbiAgICBGSVJFQkFTRV9PUFRJT05TLFxuICAgIE5nWm9uZSxcbiAgICBbbmV3IE9wdGlvbmFsKCksIEZJUkVCQVNFX0FQUF9OQU1FXVxuICBdXG59O1xuXG5ATmdNb2R1bGUoe1xuICBwcm92aWRlcnM6IFtGSVJFQkFTRV9BUFBfUFJPVklERVJdXG59KVxuZXhwb3J0IGNsYXNzIEFuZ3VsYXJGaXJlTW9kdWxlIHtcbiAgc3RhdGljIGluaXRpYWxpemVBcHAob3B0aW9uczogRmlyZWJhc2VPcHRpb25zLCBuYW1lT3JDb25maWc/OiBzdHJpbmcgfCBGaXJlYmFzZUFwcENvbmZpZyk6IE1vZHVsZVdpdGhQcm92aWRlcnM8QW5ndWxhckZpcmVNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IEFuZ3VsYXJGaXJlTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtwcm92aWRlOiBGSVJFQkFTRV9PUFRJT05TLCB1c2VWYWx1ZTogb3B0aW9uc30sXG4gICAgICAgIHtwcm92aWRlOiBGSVJFQkFTRV9BUFBfTkFNRSwgdXNlVmFsdWU6IG5hbWVPckNvbmZpZ31cbiAgICAgIF1cbiAgICB9O1xuICB9XG5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmJhbi10eXBlc1xuICBjb25zdHJ1Y3RvcihASW5qZWN0KFBMQVRGT1JNX0lEKSBwbGF0Zm9ybUlkOiBPYmplY3QpIHtcbiAgICBmaXJlYmFzZS5yZWdpc3RlclZlcnNpb24oJ2FuZ3VsYXJmaXJlJywgVkVSU0lPTi5mdWxsLCBwbGF0Zm9ybUlkLnRvU3RyaW5nKCkpO1xuICAgIGZpcmViYXNlLnJlZ2lzdGVyVmVyc2lvbignYW5ndWxhcicsIE5HX1ZFUlNJT04uZnVsbCk7XG4gIH1cbn1cbiJdfQ==