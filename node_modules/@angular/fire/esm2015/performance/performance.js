/**
 * @fileoverview added by tsickle
 * Generated from: performance.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, InjectionToken, NgZone, Optional, PLATFORM_ID } from '@angular/core';
import { EMPTY, Observable, of } from 'rxjs';
import { map, shareReplay, switchMap, tap } from 'rxjs/operators';
import { FirebaseApp, ɵlazySDKProxy } from '@angular/fire';
import { isPlatformBrowser } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/fire";
// SEMVER @ v6, drop and move core ng metrics to a service
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/fire';
export const AUTOMATICALLY_TRACE_CORE_NG_METRICS = new InjectionToken('angularfire2.performance.auto_trace');
/** @type {?} */
export const INSTRUMENTATION_ENABLED = new InjectionToken('angularfire2.performance.instrumentationEnabled');
/** @type {?} */
export const DATA_COLLECTION_ENABLED = new InjectionToken('angularfire2.performance.dataCollectionEnabled');
// WARNING: interface has both a type and a value, skipping emit
export class AngularFirePerformance {
    /**
     * @param {?} app
     * @param {?} instrumentationEnabled
     * @param {?} dataCollectionEnabled
     * @param {?} zone
     * @param {?} platformId
     */
    constructor(app, instrumentationEnabled, dataCollectionEnabled, zone, 
    // tslint:disable-next-line:ban-types
    platformId) {
        this.zone = zone;
        this.performance = of(undefined).pipe(switchMap((/**
         * @return {?}
         */
        () => isPlatformBrowser(platformId) ? zone.runOutsideAngular((/**
         * @return {?}
         */
        () => import('firebase/performance'))) : EMPTY)), map((/**
         * @return {?}
         */
        () => zone.runOutsideAngular((/**
         * @return {?}
         */
        () => app.performance())))), tap((/**
         * @param {?} performance
         * @return {?}
         */
        performance => {
            if (instrumentationEnabled === false) {
                performance.instrumentationEnabled = false;
            }
            if (dataCollectionEnabled === false) {
                performance.dataCollectionEnabled = false;
            }
        })), shareReplay({ bufferSize: 1, refCount: false }));
        return ɵlazySDKProxy(this, this.performance, zone);
    }
}
AngularFirePerformance.ɵfac = function AngularFirePerformance_Factory(t) { return new (t || AngularFirePerformance)(ɵngcc0.ɵɵinject(ɵngcc1.FirebaseApp), ɵngcc0.ɵɵinject(INSTRUMENTATION_ENABLED, 8), ɵngcc0.ɵɵinject(DATA_COLLECTION_ENABLED, 8), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(PLATFORM_ID)); };
/** @nocollapse */
AngularFirePerformance.ctorParameters = () => [
    { type: FirebaseApp },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [INSTRUMENTATION_ENABLED,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DATA_COLLECTION_ENABLED,] }] },
    { type: NgZone },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/** @nocollapse */ AngularFirePerformance.ɵprov = i0.ɵɵdefineInjectable({ factory: function AngularFirePerformance_Factory() { return new AngularFirePerformance(i0.ɵɵinject(i1.FirebaseApp), i0.ɵɵinject(INSTRUMENTATION_ENABLED, 8), i0.ɵɵinject(DATA_COLLECTION_ENABLED, 8), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i0.PLATFORM_ID)); }, token: AngularFirePerformance, providedIn: "any" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularFirePerformance, [{
        type: Injectable,
        args: [{
                providedIn: 'any'
            }]
    }], function () { return [{ type: ɵngcc1.FirebaseApp }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [INSTRUMENTATION_ENABLED]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [DATA_COLLECTION_ENABLED]
            }] }, { type: ɵngcc0.NgZone }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    AngularFirePerformance.prototype.performance;
    /**
     * @type {?}
     * @private
     */
    AngularFirePerformance.prototype.zone;
}
/** @type {?} */
const trace$ = (/**
 * @param {?} traceId
 * @return {?}
 */
(traceId) => {
    if (typeof window !== 'undefined' && window.performance) {
        /** @type {?} */
        const entries = window.performance.getEntriesByName(traceId, 'measure') || [];
        /** @type {?} */
        const startMarkName = `_${traceId}Start[${entries.length}]`;
        /** @type {?} */
        const endMarkName = `_${traceId}End[${entries.length}]`;
        return new Observable((/**
         * @param {?} emitter
         * @return {?}
         */
        emitter => {
            window.performance.mark(startMarkName);
            emitter.next();
            return {
                unsubscribe: (/**
                 * @return {?}
                 */
                () => {
                    window.performance.mark(endMarkName);
                    window.performance.measure(traceId, startMarkName, endMarkName);
                })
            };
        }));
    }
    else {
        return EMPTY;
    }
});
const ɵ0 = trace$;
/** @type {?} */
export const traceUntil = (/**
 * @template T
 * @param {?} name
 * @param {?} test
 * @param {?=} options
 * @return {?}
 */
(name, test, options) => (/**
 * @param {?} source$
 * @return {?}
 */
(source$) => new Observable((/**
 * @param {?} subscriber
 * @return {?}
 */
subscriber => {
    /** @type {?} */
    const traceSubscription = trace$(name).subscribe();
    return source$.pipe(tap((/**
     * @param {?} a
     * @return {?}
     */
    a => test(a) && traceSubscription.unsubscribe()), (/**
     * @return {?}
     */
    () => {
    }), (/**
     * @return {?}
     */
    () => options && options.orComplete && traceSubscription.unsubscribe()))).subscribe(subscriber);
}))));
/** @type {?} */
export const traceWhile = (/**
 * @template T
 * @param {?} name
 * @param {?} test
 * @param {?=} options
 * @return {?}
 */
(name, test, options) => (/**
 * @param {?} source$
 * @return {?}
 */
(source$) => new Observable((/**
 * @param {?} subscriber
 * @return {?}
 */
subscriber => {
    /** @type {?} */
    let traceSubscription;
    return source$.pipe(tap((/**
     * @param {?} a
     * @return {?}
     */
    a => {
        if (test(a)) {
            traceSubscription = traceSubscription || trace$(name).subscribe();
        }
        else {
            if (traceSubscription) {
                traceSubscription.unsubscribe();
            }
            traceSubscription = undefined;
        }
    }), (/**
     * @return {?}
     */
    () => {
    }), (/**
     * @return {?}
     */
    () => options && options.orComplete && traceSubscription && traceSubscription.unsubscribe()))).subscribe(subscriber);
}))));
/** @type {?} */
export const traceUntilComplete = (/**
 * @template T
 * @param {?} name
 * @return {?}
 */
(name) => (/**
 * @param {?} source$
 * @return {?}
 */
(source$) => new Observable((/**
 * @param {?} subscriber
 * @return {?}
 */
subscriber => {
    /** @type {?} */
    const traceSubscription = trace$(name).subscribe();
    return source$.pipe(tap((/**
     * @return {?}
     */
    () => {
    }), (/**
     * @return {?}
     */
    () => {
    }), (/**
     * @return {?}
     */
    () => traceSubscription.unsubscribe()))).subscribe(subscriber);
}))));
/** @type {?} */
export const traceUntilFirst = (/**
 * @template T
 * @param {?} name
 * @return {?}
 */
(name) => (/**
 * @param {?} source$
 * @return {?}
 */
(source$) => new Observable((/**
 * @param {?} subscriber
 * @return {?}
 */
subscriber => {
    /** @type {?} */
    const traceSubscription = trace$(name).subscribe();
    return source$.pipe(tap((/**
     * @return {?}
     */
    () => traceSubscription.unsubscribe()), (/**
     * @return {?}
     */
    () => {
    }), (/**
     * @return {?}
     */
    () => {
    }))).subscribe(subscriber);
}))));
/** @type {?} */
export const trace = (/**
 * @template T
 * @param {?} name
 * @return {?}
 */
(name) => (/**
 * @param {?} source$
 * @return {?}
 */
(source$) => new Observable((/**
 * @param {?} subscriber
 * @return {?}
 */
subscriber => {
    /** @type {?} */
    const traceSubscription = trace$(name).subscribe();
    return source$.pipe(tap((/**
     * @return {?}
     */
    () => traceSubscription.unsubscribe()), (/**
     * @return {?}
     */
    () => {
    }), (/**
     * @return {?}
     */
    () => traceSubscription.unsubscribe()))).subscribe(subscriber);
}))));
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyZm9ybWFuY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9wZXJmb3JtYW5jZS9wZXJmb3JtYW5jZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRyxPQUFPLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQWdCLE1BQU0sTUFBTSxDQUFDO0FBQzNELE9BQU8sRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVsRSxPQUFPLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDMUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDcEQ7QUFDb0M7QUFDdEI7QUFBMkQ7OztBQUF6RSxNQUFNLE9BQU8sbUNBQW1DLEdBQUcsSUFBSSxjQUFjLENBQVUscUNBQXFDLENBQUM7QUFDckg7QUFBQSxNQUFNLE9BQU8sdUJBQXVCLEdBQUcsSUFBSSxjQUFjLENBQVUsaURBQWlELENBQUM7QUFDckg7QUFBQSxNQUFNLE9BQU8sdUJBQXVCLEdBQUcsSUFBSSxjQUFjLENBQVUsZ0RBQWdELENBQUM7QUFDcEg7QUFPQSxNQUFNLE9BQU8sc0JBQXNCO0FBQ25DO0FBQ087QUFBc0I7QUFFN0I7QUFFRztBQUF1QjtBQUE2QjtBQUFRLElBRjdELFlBQ0UsR0FBZ0IsRUFDNkIsc0JBQXNDLEVBQ3RDLHFCQUFxQyxFQUMxRSxJQUFZO0FBQ3ZCLElBQUcscUNBQXFDO0FBQ3pDLElBQXlCLFVBQWtCO0FBQ3hDLFFBSFMsU0FBSSxHQUFKLElBQUksQ0FBUTtBQUFDLFFBS3JCLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUks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QUFNLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxFQUFFO0FBQ3BELElBQUUsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUNqQixHQUFHO0FBQ0g7QUFBbUI7QUFBUSxJQUF6QixHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUU7QUFDckM7QUFFSjtBQUFRLElBRkosR0FBRyxFQUFFO0FBQ1gsSUFBTSxDQUFDO0FBQ0Q7QUFBbUI7QUFBUSxJQUEzQixHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsRUFDdEMsQ0FDRixDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUMxQixDQUFDLEVBQUMsQ0FBQSxDQUFBO0FBQ0Y7QUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4sIE5nWm9uZSwgT3B0aW9uYWwsIFBMQVRGT1JNX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBFTVBUWSwgT2JzZXJ2YWJsZSwgb2YsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBzaGFyZVJlcGxheSwgc3dpdGNoTWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBwZXJmb3JtYW5jZSB9IGZyb20gJ2ZpcmViYXNlL2FwcCc7XG5pbXBvcnQgeyBGaXJlYmFzZUFwcCwgybVsYXp5U0RLUHJveHksIMm1UHJvbWlzZVByb3h5IH0gZnJvbSAnQGFuZ3VsYXIvZmlyZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbi8vIFNFTVZFUiBAIHY2LCBkcm9wIGFuZCBtb3ZlIGNvcmUgbmcgbWV0cmljcyB0byBhIHNlcnZpY2VcbmV4cG9ydCBjb25zdCBBVVRPTUFUSUNBTExZX1RSQUNFX0NPUkVfTkdfTUVUUklDUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxib29sZWFuPignYW5ndWxhcmZpcmUyLnBlcmZvcm1hbmNlLmF1dG9fdHJhY2UnKTtcbmV4cG9ydCBjb25zdCBJTlNUUlVNRU5UQVRJT05fRU5BQkxFRCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxib29sZWFuPignYW5ndWxhcmZpcmUyLnBlcmZvcm1hbmNlLmluc3RydW1lbnRhdGlvbkVuYWJsZWQnKTtcbmV4cG9ydCBjb25zdCBEQVRBX0NPTExFQ1RJT05fRU5BQkxFRCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxib29sZWFuPignYW5ndWxhcmZpcmUyLnBlcmZvcm1hbmNlLmRhdGFDb2xsZWN0aW9uRW5hYmxlZCcpO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFuZ3VsYXJGaXJlUGVyZm9ybWFuY2UgZXh0ZW5kcyDJtVByb21pc2VQcm94eTxwZXJmb3JtYW5jZS5QZXJmb3JtYW5jZT4ge1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdhbnknXG59KVxuZXhwb3J0IGNsYXNzIEFuZ3VsYXJGaXJlUGVyZm9ybWFuY2Uge1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgcGVyZm9ybWFuY2U6IE9ic2VydmFibGU8cGVyZm9ybWFuY2UuUGVyZm9ybWFuY2U+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGFwcDogRmlyZWJhc2VBcHAsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChJTlNUUlVNRU5UQVRJT05fRU5BQkxFRCkgaW5zdHJ1bWVudGF0aW9uRW5hYmxlZDogYm9vbGVhbiB8IG51bGwsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChEQVRBX0NPTExFQ1RJT05fRU5BQkxFRCkgZGF0YUNvbGxlY3Rpb25FbmFibGVkOiBib29sZWFuIHwgbnVsbCxcbiAgICBwcml2YXRlIHpvbmU6IE5nWm9uZSxcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6YmFuLXR5cGVzXG4gICAgQEluamVjdChQTEFURk9STV9JRCkgcGxhdGZvcm1JZDogT2JqZWN0XG4gICkge1xuXG4gICAgdGhpcy5wZXJmb3JtYW5jZSA9IG9mKHVuZGVmaW5lZCkucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoKSA9PiBpc1BsYXRmb3JtQnJvd3NlcihwbGF0Zm9ybUlkKSA/IHpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gaW1wb3J0KCdmaXJlYmFzZS9wZXJmb3JtYW5jZScpKSA6IEVNUFRZKSxcbiAgICAgIG1hcCgoKSA9PiB6b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IGFwcC5wZXJmb3JtYW5jZSgpKSksXG4gICAgICB0YXAocGVyZm9ybWFuY2UgPT4ge1xuICAgICAgICBpZiAoaW5zdHJ1bWVudGF0aW9uRW5hYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBwZXJmb3JtYW5jZS5pbnN0cnVtZW50YXRpb25FbmFibGVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGFDb2xsZWN0aW9uRW5hYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBwZXJmb3JtYW5jZS5kYXRhQ29sbGVjdGlvbkVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgICBzaGFyZVJlcGxheSh7IGJ1ZmZlclNpemU6IDEsIHJlZkNvdW50OiBmYWxzZSB9KVxuICAgICk7XG5cbiAgICByZXR1cm4gybVsYXp5U0RLUHJveHkodGhpcywgdGhpcy5wZXJmb3JtYW5jZSwgem9uZSk7XG5cbiAgfVxuXG59XG5cbmNvbnN0IHRyYWNlJCA9ICh0cmFjZUlkOiBzdHJpbmcpID0+IHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wZXJmb3JtYW5jZSkge1xuICAgIGNvbnN0IGVudHJpZXMgPSB3aW5kb3cucGVyZm9ybWFuY2UuZ2V0RW50cmllc0J5TmFtZSh0cmFjZUlkLCAnbWVhc3VyZScpIHx8IFtdO1xuICAgIGNvbnN0IHN0YXJ0TWFya05hbWUgPSBgXyR7dHJhY2VJZH1TdGFydFske2VudHJpZXMubGVuZ3RofV1gO1xuICAgIGNvbnN0IGVuZE1hcmtOYW1lID0gYF8ke3RyYWNlSWR9RW5kWyR7ZW50cmllcy5sZW5ndGh9XWA7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlPHZvaWQ+KGVtaXR0ZXIgPT4ge1xuICAgICAgd2luZG93LnBlcmZvcm1hbmNlLm1hcmsoc3RhcnRNYXJrTmFtZSk7XG4gICAgICBlbWl0dGVyLm5leHQoKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHVuc3Vic2NyaWJlOiAoKSA9PiB7XG4gICAgICAgICAgd2luZG93LnBlcmZvcm1hbmNlLm1hcmsoZW5kTWFya05hbWUpO1xuICAgICAgICAgIHdpbmRvdy5wZXJmb3JtYW5jZS5tZWFzdXJlKHRyYWNlSWQsIHN0YXJ0TWFya05hbWUsIGVuZE1hcmtOYW1lKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gRU1QVFk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCB0cmFjZVVudGlsID0gPFQgPSBhbnk+KFxuICBuYW1lOiBzdHJpbmcsXG4gIHRlc3Q6IChhOiBUKSA9PiBib29sZWFuLFxuICBvcHRpb25zPzogeyBvckNvbXBsZXRlPzogYm9vbGVhbiB9XG4pID0+IChzb3VyY2UkOiBPYnNlcnZhYmxlPFQ+KSA9PiBuZXcgT2JzZXJ2YWJsZTxUPihzdWJzY3JpYmVyID0+IHtcbiAgY29uc3QgdHJhY2VTdWJzY3JpcHRpb24gPSB0cmFjZSQobmFtZSkuc3Vic2NyaWJlKCk7XG4gIHJldHVybiBzb3VyY2UkLnBpcGUoXG4gICAgdGFwKFxuICAgICAgYSA9PiB0ZXN0KGEpICYmIHRyYWNlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCksXG4gICAgICAoKSA9PiB7XG4gICAgICB9LFxuICAgICAgKCkgPT4gb3B0aW9ucyAmJiBvcHRpb25zLm9yQ29tcGxldGUgJiYgdHJhY2VTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKVxuICAgIClcbiAgKS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG59KTtcblxuZXhwb3J0IGNvbnN0IHRyYWNlV2hpbGUgPSA8VCA9IGFueT4oXG4gIG5hbWU6IHN0cmluZyxcbiAgdGVzdDogKGE6IFQpID0+IGJvb2xlYW4sXG4gIG9wdGlvbnM/OiB7IG9yQ29tcGxldGU/OiBib29sZWFuIH1cbikgPT4gKHNvdXJjZSQ6IE9ic2VydmFibGU8VD4pID0+IG5ldyBPYnNlcnZhYmxlPFQ+KHN1YnNjcmliZXIgPT4ge1xuICBsZXQgdHJhY2VTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbiB8IHVuZGVmaW5lZDtcbiAgcmV0dXJuIHNvdXJjZSQucGlwZShcbiAgICB0YXAoXG4gICAgICBhID0+IHtcbiAgICAgICAgaWYgKHRlc3QoYSkpIHtcbiAgICAgICAgICB0cmFjZVN1YnNjcmlwdGlvbiA9IHRyYWNlU3Vic2NyaXB0aW9uIHx8IHRyYWNlJChuYW1lKS5zdWJzY3JpYmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodHJhY2VTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRyYWNlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdHJhY2VTdWJzY3JpcHRpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAoKSA9PiB7XG4gICAgICB9LFxuICAgICAgKCkgPT4gb3B0aW9ucyAmJiBvcHRpb25zLm9yQ29tcGxldGUgJiYgdHJhY2VTdWJzY3JpcHRpb24gJiYgdHJhY2VTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKVxuICAgIClcbiAgKS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG59KTtcblxuZXhwb3J0IGNvbnN0IHRyYWNlVW50aWxDb21wbGV0ZSA9IDxUID0gYW55PihuYW1lOiBzdHJpbmcpID0+IChzb3VyY2UkOiBPYnNlcnZhYmxlPFQ+KSA9PiBuZXcgT2JzZXJ2YWJsZTxUPihzdWJzY3JpYmVyID0+IHtcbiAgY29uc3QgdHJhY2VTdWJzY3JpcHRpb24gPSB0cmFjZSQobmFtZSkuc3Vic2NyaWJlKCk7XG4gIHJldHVybiBzb3VyY2UkLnBpcGUoXG4gICAgdGFwKFxuICAgICAgKCkgPT4ge1xuICAgICAgfSxcbiAgICAgICgpID0+IHtcbiAgICAgIH0sXG4gICAgICAoKSA9PiB0cmFjZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpXG4gICAgKVxuICApLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbn0pO1xuXG5leHBvcnQgY29uc3QgdHJhY2VVbnRpbEZpcnN0ID0gPFQgPSBhbnk+KG5hbWU6IHN0cmluZykgPT4gKHNvdXJjZSQ6IE9ic2VydmFibGU8VD4pID0+IG5ldyBPYnNlcnZhYmxlPFQ+KHN1YnNjcmliZXIgPT4ge1xuICBjb25zdCB0cmFjZVN1YnNjcmlwdGlvbiA9IHRyYWNlJChuYW1lKS5zdWJzY3JpYmUoKTtcbiAgcmV0dXJuIHNvdXJjZSQucGlwZShcbiAgICB0YXAoXG4gICAgICAoKSA9PiB0cmFjZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpLFxuICAgICAgKCkgPT4ge1xuICAgICAgfSxcbiAgICAgICgpID0+IHtcbiAgICAgIH1cbiAgICApXG4gICkuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xufSk7XG5cbmV4cG9ydCBjb25zdCB0cmFjZSA9IDxUID0gYW55PihuYW1lOiBzdHJpbmcpID0+IChzb3VyY2UkOiBPYnNlcnZhYmxlPFQ+KSA9PiBuZXcgT2JzZXJ2YWJsZTxUPihzdWJzY3JpYmVyID0+IHtcbiAgY29uc3QgdHJhY2VTdWJzY3JpcHRpb24gPSB0cmFjZSQobmFtZSkuc3Vic2NyaWJlKCk7XG4gIHJldHVybiBzb3VyY2UkLnBpcGUoXG4gICAgdGFwKFxuICAgICAgKCkgPT4gdHJhY2VTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKSxcbiAgICAgICgpID0+IHtcbiAgICAgIH0sXG4gICAgICAoKSA9PiB0cmFjZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpXG4gICAgKVxuICApLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbn0pO1xuIl19